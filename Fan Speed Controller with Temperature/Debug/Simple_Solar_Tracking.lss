
Simple_Solar_Tracking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002e16  00002eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00002ecc  2**0
                  ALLOC
  3 .stab         000023d0  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f0  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aadb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_10>
      2c:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 11 	call	0x23dc	; 0x23dc <main>
      8a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_voidSendCommand>:
#include "HLCD_interface.h"
#include "HLCD_config.h"
#include <util/delay.h>

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Clr RS to send Command*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_LOW);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	42 e0       	ldi	r20, 0x02	; 2
     b62:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>

	/*Clr RW to Write*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	42 e0       	ldi	r20, 0x02	; 2
     b6c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>

	/*Send Command On data  Port*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT,Copy_u8Command);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <MDIO_VoidSetPortValue>

	/*Set En To make LCD mc To read the command*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_EN_PIN,DIO_PIN_HIGH);
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <HLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <HLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <HLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <HLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_EN_PIN,DIO_PIN_LOW);
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	42 e0       	ldi	r20, 0x02	; 2
     c6c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>


}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS to send Command*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_HIGH);
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>

	/*Clr RW to Write*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	42 e0       	ldi	r20, 0x02	; 2
     ca8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>

	/*Send Data On data  Port*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT,Copy_u8Data);
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <MDIO_VoidSetPortValue>

	/*Set En To make LCD mc To read the command*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_EN_PIN,DIO_PIN_HIGH);
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <HLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <HLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <HLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <HLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <HLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_EN_PIN,DIO_PIN_LOW);
     da2:	84 e0       	ldi	r24, 0x04	; 4
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	42 e0       	ldi	r20, 0x02	; 2
     da8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MDIO_VoidSetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <HLCD_voidInit>:
void HLCD_voidInit()
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <HLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <HLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <HLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <HLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <HLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0b00111100);
     eb6:	8c e3       	ldi	r24, 0x3C	; 60
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00000001);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>

}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *Copy_u8String)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <HLCD_voidSendString+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <HLCD_voidSendString+0x24>
	while(*Copy_u8String != '\0')
	{
		HLCD_voidSendData(*Copy_u8String);
     eea:	e9 81       	ldd	r30, Y+1	; 0x01
     eec:	fa 81       	ldd	r31, Y+2	; 0x02
     eee:	80 81       	ld	r24, Z
     ef0:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
		Copy_u8String+=1 ;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(0b00000001);

}
void HLCD_voidSendString(u8 *Copy_u8String)
{
	while(*Copy_u8String != '\0')
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	80 81       	ld	r24, Z
     f04:	88 23       	and	r24, r24
     f06:	89 f7       	brne	.-30     	; 0xeea <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*Copy_u8String);
		Copy_u8String+=1 ;
	}
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <HLCD_voidSendDigit>:
void HLCD_voidSendDigit(u8 Copy_u8Digit)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData( (Copy_u8Digit) + 48 );
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 5d       	subi	r24, 0xD0	; 208
     f22:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <HLCD_voidSendGoTo>:

void HLCD_voidSendGoTo(u8 Copy_u8X,u8 Copy_u8Y)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <HLCD_voidSendGoTo+0x6>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8X==0)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	88 23       	and	r24, r24
     f40:	29 f4       	brne	.+10     	; 0xf4c <HLCD_voidSendGoTo+0x1e>
	{
		HLCD_voidSendCommand(128+Copy_u8Y);
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	80 58       	subi	r24, 0x80	; 128
     f46:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <HLCD_voidSendGoTo+0x2c>
	}
	else if(Copy_u8X==1)
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	21 f4       	brne	.+8      	; 0xf5a <HLCD_voidSendGoTo+0x2c>
	{
		HLCD_voidSendCommand(64+128+Copy_u8Y);
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	80 54       	subi	r24, 0x40	; 64
     f56:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	}
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <HLCD_voidSendInt>:


void HLCD_voidSendInt(s32 A_s32Number)
{
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	2d 97       	sbiw	r28, 0x0d	; 13
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	6a 87       	std	Y+10, r22	; 0x0a
     f82:	7b 87       	std	Y+11, r23	; 0x0b
     f84:	8c 87       	std	Y+12, r24	; 0x0c
     f86:	9d 87       	std	Y+13, r25	; 0x0d
	s32 L_s32ReverseNumber = 0;
     f88:	1e 82       	std	Y+6, r1	; 0x06
     f8a:	1f 82       	std	Y+7, r1	; 0x07
     f8c:	18 86       	std	Y+8, r1	; 0x08
     f8e:	19 86       	std	Y+9, r1	; 0x09
	s32 L_s32TempNumber = 0;
     f90:	1a 82       	std	Y+2, r1	; 0x02
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	1c 82       	std	Y+4, r1	; 0x04
     f96:	1d 82       	std	Y+5, r1	; 0x05
	u8 L_u8NegativeFlag = 0;
     f98:	19 82       	std	Y+1, r1	; 0x01
	if(A_s32Number < 0) {
     f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9e:	ac 85       	ldd	r26, Y+12	; 0x0c
     fa0:	bd 85       	ldd	r27, Y+13	; 0x0d
     fa2:	bb 23       	and	r27, r27
     fa4:	8c f4       	brge	.+34     	; 0xfc8 <HLCD_voidSendInt+0x64>
		A_s32Number = -A_s32Number;
     fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
     faa:	ac 85       	ldd	r26, Y+12	; 0x0c
     fac:	bd 85       	ldd	r27, Y+13	; 0x0d
     fae:	b0 95       	com	r27
     fb0:	a0 95       	com	r26
     fb2:	90 95       	com	r25
     fb4:	81 95       	neg	r24
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	af 4f       	sbci	r26, 0xFF	; 255
     fba:	bf 4f       	sbci	r27, 0xFF	; 255
     fbc:	8a 87       	std	Y+10, r24	; 0x0a
     fbe:	9b 87       	std	Y+11, r25	; 0x0b
     fc0:	ac 87       	std	Y+12, r26	; 0x0c
     fc2:	bd 87       	std	Y+13, r27	; 0x0d
		L_u8NegativeFlag = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01
	}

	L_s32TempNumber = A_s32Number;
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	ac 85       	ldd	r26, Y+12	; 0x0c
     fce:	bd 85       	ldd	r27, Y+13	; 0x0d
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	ac 83       	std	Y+4, r26	; 0x04
     fd6:	bd 83       	std	Y+5, r27	; 0x05
     fd8:	36 c0       	rjmp	.+108    	; 0x1046 <HLCD_voidSendInt+0xe2>
	while(L_s32TempNumber > 0)
	{
		L_s32ReverseNumber = (L_s32ReverseNumber * 10) + (L_s32TempNumber % 10) ;
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	a8 85       	ldd	r26, Y+8	; 0x08
     fe0:	b9 85       	ldd	r27, Y+9	; 0x09
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsi3>
     ff2:	7b 01       	movw	r14, r22
     ff4:	8c 01       	movw	r16, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	ac 81       	ldd	r26, Y+4	; 0x04
     ffc:	bd 81       	ldd	r27, Y+5	; 0x05
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodsi4>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8e 0d       	add	r24, r14
    1014:	9f 1d       	adc	r25, r15
    1016:	a0 1f       	adc	r26, r16
    1018:	b1 1f       	adc	r27, r17
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	9f 83       	std	Y+7, r25	; 0x07
    101e:	a8 87       	std	Y+8, r26	; 0x08
    1020:	b9 87       	std	Y+9, r27	; 0x09
		L_s32TempNumber /= 10 ;
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    1026:	ac 81       	ldd	r26, Y+4	; 0x04
    1028:	bd 81       	ldd	r27, Y+5	; 0x05
    102a:	2a e0       	ldi	r18, 0x0A	; 10
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodsi4>
    103a:	da 01       	movw	r26, r20
    103c:	c9 01       	movw	r24, r18
    103e:	8a 83       	std	Y+2, r24	; 0x02
    1040:	9b 83       	std	Y+3, r25	; 0x03
    1042:	ac 83       	std	Y+4, r26	; 0x04
    1044:	bd 83       	std	Y+5, r27	; 0x05
		A_s32Number = -A_s32Number;
		L_u8NegativeFlag = 1;
	}

	L_s32TempNumber = A_s32Number;
	while(L_s32TempNumber > 0)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	ac 81       	ldd	r26, Y+4	; 0x04
    104c:	bd 81       	ldd	r27, Y+5	; 0x05
    104e:	18 16       	cp	r1, r24
    1050:	19 06       	cpc	r1, r25
    1052:	1a 06       	cpc	r1, r26
    1054:	1b 06       	cpc	r1, r27
    1056:	0c f2       	brlt	.-126    	; 0xfda <HLCD_voidSendInt+0x76>
	{
		L_s32ReverseNumber = (L_s32ReverseNumber * 10) + (L_s32TempNumber % 10) ;
		L_s32TempNumber /= 10 ;
	}

	if(L_u8NegativeFlag == 1) {
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	39 f5       	brne	.+78     	; 0x10ac <HLCD_voidSendInt+0x148>
		HLCD_voidSendData( '-' );
    105e:	8d e2       	ldi	r24, 0x2D	; 45
    1060:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
    1064:	23 c0       	rjmp	.+70     	; 0x10ac <HLCD_voidSendInt+0x148>
	}
	while(L_s32ReverseNumber > 0) {
		HLCD_voidSendData( '0' + (L_s32ReverseNumber % 10) );
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	9f 81       	ldd	r25, Y+7	; 0x07
    106a:	a8 85       	ldd	r26, Y+8	; 0x08
    106c:	b9 85       	ldd	r27, Y+9	; 0x09
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodsi4>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	80 5d       	subi	r24, 0xD0	; 208
    1084:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
		L_s32ReverseNumber /= 10;
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	a8 85       	ldd	r26, Y+8	; 0x08
    108e:	b9 85       	ldd	r27, Y+9	; 0x09
    1090:	2a e0       	ldi	r18, 0x0A	; 10
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodsi4>
    10a0:	da 01       	movw	r26, r20
    10a2:	c9 01       	movw	r24, r18
    10a4:	8e 83       	std	Y+6, r24	; 0x06
    10a6:	9f 83       	std	Y+7, r25	; 0x07
    10a8:	a8 87       	std	Y+8, r26	; 0x08
    10aa:	b9 87       	std	Y+9, r27	; 0x09
	}

	if(L_u8NegativeFlag == 1) {
		HLCD_voidSendData( '-' );
	}
	while(L_s32ReverseNumber > 0) {
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	a8 85       	ldd	r26, Y+8	; 0x08
    10b2:	b9 85       	ldd	r27, Y+9	; 0x09
    10b4:	18 16       	cp	r1, r24
    10b6:	19 06       	cpc	r1, r25
    10b8:	1a 06       	cpc	r1, r26
    10ba:	1b 06       	cpc	r1, r27
    10bc:	a4 f2       	brlt	.-88     	; 0x1066 <HLCD_voidSendInt+0x102>
		HLCD_voidSendData( '0' + (L_s32ReverseNumber % 10) );
		L_s32ReverseNumber /= 10;
	}

	if(A_s32Number % 10 == 0) {
    10be:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c2:	ac 85       	ldd	r26, Y+12	; 0x0c
    10c4:	bd 85       	ldd	r27, Y+13	; 0x0d
    10c6:	2a e0       	ldi	r18, 0x0A	; 10
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodsi4>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	a1 05       	cpc	r26, r1
    10de:	b1 05       	cpc	r27, r1
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <HLCD_voidSendInt+0x184>
		HLCD_voidSendData('0');
    10e2:	80 e3       	ldi	r24, 0x30	; 48
    10e4:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
				}

			}
		}
	}
}
    10e8:	2d 96       	adiw	r28, 0x0d	; 13
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <HLCD_voidSendFloat.1375>:

	if(A_s32Number % 10 == 0) {
		HLCD_voidSendData('0');

		void HLCD_voidSendFloat(f32 Copy_f32Float,u8 Copy_u8X,u8 Copy_u8Y)
		{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	60 97       	sbiw	r28, 0x10	; 16
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	6b 87       	std	Y+11, r22	; 0x0b
    1118:	7c 87       	std	Y+12, r23	; 0x0c
    111a:	8d 87       	std	Y+13, r24	; 0x0d
    111c:	9e 87       	std	Y+14, r25	; 0x0e
    111e:	4f 87       	std	Y+15, r20	; 0x0f
    1120:	28 8b       	std	Y+16, r18	; 0x10
			u32 int_number,Number ;
			u8 i,Countint=0;
    1122:	19 82       	std	Y+1, r1	; 0x01
			int_number=(u32)Copy_f32Float ;
    1124:	6b 85       	ldd	r22, Y+11	; 0x0b
    1126:	7c 85       	ldd	r23, Y+12	; 0x0c
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	9e 85       	ldd	r25, Y+14	; 0x0e
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8f 83       	std	Y+7, r24	; 0x07
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	a9 87       	std	Y+9, r26	; 0x09
    113a:	ba 87       	std	Y+10, r27	; 0x0a
    113c:	15 c0       	rjmp	.+42     	; 0x1168 <HLCD_voidSendFloat.1375+0x66>
			/*Count The Digits*/
			while(int_number != 0)
			{
				Countint++ ;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	89 83       	std	Y+1, r24	; 0x01
				int_number/=10 ;
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	98 85       	ldd	r25, Y+8	; 0x08
    1148:	a9 85       	ldd	r26, Y+9	; 0x09
    114a:	ba 85       	ldd	r27, Y+10	; 0x0a
    114c:	2a e0       	ldi	r18, 0x0A	; 10
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    115c:	da 01       	movw	r26, r20
    115e:	c9 01       	movw	r24, r18
    1160:	8f 83       	std	Y+7, r24	; 0x07
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	a9 87       	std	Y+9, r26	; 0x09
    1166:	ba 87       	std	Y+10, r27	; 0x0a
		{
			u32 int_number,Number ;
			u8 i,Countint=0;
			int_number=(u32)Copy_f32Float ;
			/*Count The Digits*/
			while(int_number != 0)
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	a9 85       	ldd	r26, Y+9	; 0x09
    116e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	a1 05       	cpc	r26, r1
    1174:	b1 05       	cpc	r27, r1
    1176:	19 f7       	brne	.-58     	; 0x113e <HLCD_voidSendFloat.1375+0x3c>
			{
				Countint++ ;
				int_number/=10 ;
			}
			/*Make Sure That All Digits locate before the floating point*/
			for(i=0 ; i<2 ; i++)
    1178:	1a 82       	std	Y+2, r1	; 0x02
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <HLCD_voidSendFloat.1375+0xa0>
			{
				Copy_f32Float*=10 ;
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	51 e4       	ldi	r21, 0x41	; 65
    118c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8b 87       	std	Y+11, r24	; 0x0b
    1196:	9c 87       	std	Y+12, r25	; 0x0c
    1198:	ad 87       	std	Y+13, r26	; 0x0d
    119a:	be 87       	std	Y+14, r27	; 0x0e
			{
				Countint++ ;
				int_number/=10 ;
			}
			/*Make Sure That All Digits locate before the floating point*/
			for(i=0 ; i<2 ; i++)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	50 f3       	brcs	.-44     	; 0x117c <HLCD_voidSendFloat.1375+0x7a>
			{
				Copy_f32Float*=10 ;
			}
			Number=Copy_f32Float ;
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	ad 83       	std	Y+5, r26	; 0x05
    11be:	be 83       	std	Y+6, r27	; 0x06
			/*Displaying on LCD (Right To left)*/
			for(i=0 ; i<Countint+3 ; i++)
    11c0:	1a 82       	std	Y+2, r1	; 0x02
    11c2:	39 c0       	rjmp	.+114    	; 0x1236 <HLCD_voidSendFloat.1375+0x134>
			{
				HLCD_voidSendGoTo(Copy_u8X,Copy_u8Y+Countint+2-i);
    11c4:	98 89       	ldd	r25, Y+16	; 0x10
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	98 0f       	add	r25, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	29 2f       	mov	r18, r25
    11ce:	28 1b       	sub	r18, r24
    11d0:	82 2f       	mov	r24, r18
    11d2:	98 2f       	mov	r25, r24
    11d4:	9e 5f       	subi	r25, 0xFE	; 254
    11d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d8:	69 2f       	mov	r22, r25
    11da:	0e 94 97 07 	call	0xf2e	; 0xf2e <HLCD_voidSendGoTo>
				if(i!=2)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	19 f1       	breq	.+70     	; 0x122a <HLCD_voidSendFloat.1375+0x128>
				{
					HLCD_voidSendDigit(Number%10);
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	ad 81       	ldd	r26, Y+5	; 0x05
    11ea:	be 81       	ldd	r27, Y+6	; 0x06
    11ec:	2a e0       	ldi	r18, 0x0A	; 10
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	0e 94 89 07 	call	0xf12	; 0xf12 <HLCD_voidSendDigit>
					Number/=10 ;
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	ad 81       	ldd	r26, Y+5	; 0x05
    120a:	be 81       	ldd	r27, Y+6	; 0x06
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    121c:	da 01       	movw	r26, r20
    121e:	c9 01       	movw	r24, r18
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	ad 83       	std	Y+5, r26	; 0x05
    1226:	be 83       	std	Y+6, r27	; 0x06
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <HLCD_voidSendFloat.1375+0x12e>
				}
				else
				{
					HLCD_voidSendData('.');
    122a:	8e e2       	ldi	r24, 0x2E	; 46
    122c:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
			{
				Copy_f32Float*=10 ;
			}
			Number=Copy_f32Float ;
			/*Displaying on LCD (Right To left)*/
			for(i=0 ; i<Countint+3 ; i++)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	03 96       	adiw	r24, 0x03	; 3
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	0c f4       	brge	.+2      	; 0x124c <HLCD_voidSendFloat.1375+0x14a>
    124a:	bc cf       	rjmp	.-136    	; 0x11c4 <HLCD_voidSendFloat.1375+0xc2>
				{
					HLCD_voidSendData('.');
				}

			}
		}
    124c:	60 96       	adiw	r28, 0x10	; 16
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <HLCD_voidClearLcd>:
	}
}
	void HLCD_voidClearLcd()
	{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
		HLCD_voidSendCommand(1);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <MADC_voidInit>:
#include "MADC_register.h"
#include "MADC_config.h"
#include "MADC_interface.h"

void MADC_voidInit()
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
	/*Select V REF*/
	CLR_BIT(ADMUX,ADMUX_REFS1);
    127a:	a7 e2       	ldi	r26, 0x27	; 39
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e7 e2       	ldi	r30, 0x27	; 39
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 77       	andi	r24, 0x7F	; 127
    1286:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1288:	a7 e2       	ldi	r26, 0x27	; 39
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e7 e2       	ldi	r30, 0x27	; 39
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	80 64       	ori	r24, 0x40	; 64
    1294:	8c 93       	st	X, r24
	/*Right Adjust*/
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1296:	a7 e2       	ldi	r26, 0x27	; 39
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e7 e2       	ldi	r30, 0x27	; 39
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	8c 93       	st	X, r24

	/*Select 32 Prescaler*/
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    12a4:	a6 e2       	ldi	r26, 0x26	; 38
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e6 e2       	ldi	r30, 0x26	; 38
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    12b2:	a6 e2       	ldi	r26, 0x26	; 38
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e6 e2       	ldi	r30, 0x26	; 38
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    12c0:	a6 e2       	ldi	r26, 0x26	; 38
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e6 e2       	ldi	r30, 0x26	; 38
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	8c 93       	st	X, r24



	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    12ce:	a6 e2       	ldi	r26, 0x26	; 38
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e6 e2       	ldi	r30, 0x26	; 38
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	8c 93       	st	X, r24
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <MADC_voidGetValue>:

u16 MADC_voidGetValue(u8 Copy_u8AdcChannel)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <MADC_voidGetValue+0x6>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000 ;// Clr The selection bits
    12ee:	a7 e2       	ldi	r26, 0x27	; 39
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e7 e2       	ldi	r30, 0x27	; 39
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 7e       	andi	r24, 0xE0	; 224
    12fa:	8c 93       	st	X, r24
	ADMUX |= Copy_u8AdcChannel ; //
    12fc:	a7 e2       	ldi	r26, 0x27	; 39
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e7 e2       	ldi	r30, 0x27	; 39
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	90 81       	ld	r25, Z
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	89 2b       	or	r24, r25
    130a:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    130c:	a6 e2       	ldi	r26, 0x26	; 38
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e6 e2       	ldi	r30, 0x26	; 38
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 64       	ori	r24, 0x40	; 64
    1318:	8c 93       	st	X, r24
	/*Busy wait until ADC Complete Converting*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    131a:	e6 e2       	ldi	r30, 0x26	; 38
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
	/**Clear ADC flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF) ;
    1320:	a6 e2       	ldi	r26, 0x26	; 38
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e6 e2       	ldi	r30, 0x26	; 38
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	8c 93       	st	X, r24
	return ADC_DATA ;
    132e:	e4 e2       	ldi	r30, 0x24	; 36
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01


}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <MDIO_VoidSetPinDirection>:




Error_state_t MDIO_VoidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	28 97       	sbiw	r28, 0x08	; 8
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	6b 83       	std	Y+3, r22	; 0x03
    1358:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    135a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	08 f0       	brcs	.+2      	; 0x1364 <MDIO_VoidSetPinDirection+0x24>
    1362:	f3 c0       	rjmp	.+486    	; 0x154a <MDIO_VoidSetPinDirection+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_INPUT)
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	09 f0       	breq	.+2      	; 0x136c <MDIO_VoidSetPinDirection+0x2c>
    136a:	78 c0       	rjmp	.+240    	; 0x145c <MDIO_VoidSetPinDirection+0x11c>
		{
			switch(Copy_u8Port)
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	38 87       	std	Y+8, r19	; 0x08
    1374:	2f 83       	std	Y+7, r18	; 0x07
    1376:	8f 81       	ldd	r24, Y+7	; 0x07
    1378:	98 85       	ldd	r25, Y+8	; 0x08
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	61 f1       	breq	.+88     	; 0x13d8 <MDIO_VoidSetPinDirection+0x98>
    1380:	2f 81       	ldd	r18, Y+7	; 0x07
    1382:	38 85       	ldd	r19, Y+8	; 0x08
    1384:	23 30       	cpi	r18, 0x03	; 3
    1386:	31 05       	cpc	r19, r1
    1388:	34 f4       	brge	.+12     	; 0x1396 <MDIO_VoidSetPinDirection+0x56>
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	98 85       	ldd	r25, Y+8	; 0x08
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	69 f0       	breq	.+26     	; 0x13ae <MDIO_VoidSetPinDirection+0x6e>
    1394:	60 c0       	rjmp	.+192    	; 0x1456 <MDIO_VoidSetPinDirection+0x116>
    1396:	2f 81       	ldd	r18, Y+7	; 0x07
    1398:	38 85       	ldd	r19, Y+8	; 0x08
    139a:	23 30       	cpi	r18, 0x03	; 3
    139c:	31 05       	cpc	r19, r1
    139e:	89 f1       	breq	.+98     	; 0x1402 <MDIO_VoidSetPinDirection+0xc2>
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	98 85       	ldd	r25, Y+8	; 0x08
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <MDIO_VoidSetPinDirection+0x6c>
    13aa:	40 c0       	rjmp	.+128    	; 0x142c <MDIO_VoidSetPinDirection+0xec>
    13ac:	54 c0       	rjmp	.+168    	; 0x1456 <MDIO_VoidSetPinDirection+0x116>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break ;
    13ae:	aa e3       	ldi	r26, 0x3A	; 58
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MDIO_VoidSetPinDirection+0x8c>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <MDIO_VoidSetPinDirection+0x88>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	bb c0       	rjmp	.+374    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break ;
    13d8:	a7 e3       	ldi	r26, 0x37	; 55
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e7 e3       	ldi	r30, 0x37	; 55
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <MDIO_VoidSetPinDirection+0xb6>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <MDIO_VoidSetPinDirection+0xb2>
    13fa:	80 95       	com	r24
    13fc:	84 23       	and	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	a6 c0       	rjmp	.+332    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break ;
    1402:	a4 e3       	ldi	r26, 0x34	; 52
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e4 e3       	ldi	r30, 0x34	; 52
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <MDIO_VoidSetPinDirection+0xe0>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <MDIO_VoidSetPinDirection+0xdc>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	91 c0       	rjmp	.+290    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break ;
    142c:	a1 e3       	ldi	r26, 0x31	; 49
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_VoidSetPinDirection+0x10a>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_VoidSetPinDirection+0x106>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	7c c0       	rjmp	.+248    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			default : Error_state=Return_Nok ; break ;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	79 c0       	rjmp	.+242    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_OUTPUT)
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	09 f0       	breq	.+2      	; 0x1464 <MDIO_VoidSetPinDirection+0x124>
    1462:	75 c0       	rjmp	.+234    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
		{
			switch(Copy_u8Port)
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3e 83       	std	Y+6, r19	; 0x06
    146c:	2d 83       	std	Y+5, r18	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	91 05       	cpc	r25, r1
    1476:	51 f1       	breq	.+84     	; 0x14cc <MDIO_VoidSetPinDirection+0x18c>
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	23 30       	cpi	r18, 0x03	; 3
    147e:	31 05       	cpc	r19, r1
    1480:	34 f4       	brge	.+12     	; 0x148e <MDIO_VoidSetPinDirection+0x14e>
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 05       	cpc	r25, r1
    148a:	61 f0       	breq	.+24     	; 0x14a4 <MDIO_VoidSetPinDirection+0x164>
    148c:	5b c0       	rjmp	.+182    	; 0x1544 <MDIO_VoidSetPinDirection+0x204>
    148e:	2d 81       	ldd	r18, Y+5	; 0x05
    1490:	3e 81       	ldd	r19, Y+6	; 0x06
    1492:	23 30       	cpi	r18, 0x03	; 3
    1494:	31 05       	cpc	r19, r1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <MDIO_VoidSetPinDirection+0x1b4>
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	91 05       	cpc	r25, r1
    14a0:	e9 f1       	breq	.+122    	; 0x151c <MDIO_VoidSetPinDirection+0x1dc>
    14a2:	50 c0       	rjmp	.+160    	; 0x1544 <MDIO_VoidSetPinDirection+0x204>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break ;
    14a4:	aa e3       	ldi	r26, 0x3A	; 58
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ea e3       	ldi	r30, 0x3A	; 58
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <MDIO_VoidSetPinDirection+0x182>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <MDIO_VoidSetPinDirection+0x17e>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	41 c0       	rjmp	.+130    	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break ;
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <MDIO_VoidSetPinDirection+0x1aa>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <MDIO_VoidSetPinDirection+0x1a6>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	2d c0       	rjmp	.+90     	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break ;
    14f4:	a4 e3       	ldi	r26, 0x34	; 52
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e3       	ldi	r30, 0x34	; 52
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <MDIO_VoidSetPinDirection+0x1d2>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <MDIO_VoidSetPinDirection+0x1ce>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	19 c0       	rjmp	.+50     	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break ;
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_VoidSetPinDirection+0x1fa>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_VoidSetPinDirection+0x1f6>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	05 c0       	rjmp	.+10     	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			default :Error_state=Return_Nok ;  break ;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	02 c0       	rjmp	.+4      	; 0x154e <MDIO_VoidSetPinDirection+0x20e>
			}
		}
	}
	else
	{
		Error_state=Return_Nok ;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    154e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1550:	28 96       	adiw	r28, 0x08	; 8
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <MDIO_VoidSetPinValue>:
Error_state_t MDIO_VoidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	28 97       	sbiw	r28, 0x08	; 8
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	6b 83       	std	Y+3, r22	; 0x03
    157a:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    157c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	08 f0       	brcs	.+2      	; 0x1586 <MDIO_VoidSetPinValue+0x24>
    1584:	f3 c0       	rjmp	.+486    	; 0x176c <MDIO_VoidSetPinValue+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_LOW)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	09 f0       	breq	.+2      	; 0x158e <MDIO_VoidSetPinValue+0x2c>
    158c:	78 c0       	rjmp	.+240    	; 0x167e <MDIO_VoidSetPinValue+0x11c>
		{
			switch(Copy_u8Port)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	38 87       	std	Y+8, r19	; 0x08
    1596:	2f 83       	std	Y+7, r18	; 0x07
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	91 05       	cpc	r25, r1
    15a0:	61 f1       	breq	.+88     	; 0x15fa <MDIO_VoidSetPinValue+0x98>
    15a2:	2f 81       	ldd	r18, Y+7	; 0x07
    15a4:	38 85       	ldd	r19, Y+8	; 0x08
    15a6:	23 30       	cpi	r18, 0x03	; 3
    15a8:	31 05       	cpc	r19, r1
    15aa:	34 f4       	brge	.+12     	; 0x15b8 <MDIO_VoidSetPinValue+0x56>
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	69 f0       	breq	.+26     	; 0x15d0 <MDIO_VoidSetPinValue+0x6e>
    15b6:	60 c0       	rjmp	.+192    	; 0x1678 <MDIO_VoidSetPinValue+0x116>
    15b8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ba:	38 85       	ldd	r19, Y+8	; 0x08
    15bc:	23 30       	cpi	r18, 0x03	; 3
    15be:	31 05       	cpc	r19, r1
    15c0:	89 f1       	breq	.+98     	; 0x1624 <MDIO_VoidSetPinValue+0xc2>
    15c2:	8f 81       	ldd	r24, Y+7	; 0x07
    15c4:	98 85       	ldd	r25, Y+8	; 0x08
    15c6:	84 30       	cpi	r24, 0x04	; 4
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <MDIO_VoidSetPinValue+0x6c>
    15cc:	40 c0       	rjmp	.+128    	; 0x164e <MDIO_VoidSetPinValue+0xec>
    15ce:	54 c0       	rjmp	.+168    	; 0x1678 <MDIO_VoidSetPinValue+0x116>
			{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin); break ;
    15d0:	ab e3       	ldi	r26, 0x3B	; 59
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <MDIO_VoidSetPinValue+0x8c>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <MDIO_VoidSetPinValue+0x88>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	bb c0       	rjmp	.+374    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin); break ;
    15fa:	a8 e3       	ldi	r26, 0x38	; 56
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <MDIO_VoidSetPinValue+0xb6>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <MDIO_VoidSetPinValue+0xb2>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	a6 c0       	rjmp	.+332    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin); break ;
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <MDIO_VoidSetPinValue+0xe0>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <MDIO_VoidSetPinValue+0xdc>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	91 c0       	rjmp	.+290    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin); break ;
    164e:	a2 e3       	ldi	r26, 0x32	; 50
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e2 e3       	ldi	r30, 0x32	; 50
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <MDIO_VoidSetPinValue+0x10a>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <MDIO_VoidSetPinValue+0x106>
    1670:	80 95       	com	r24
    1672:	84 23       	and	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	7c c0       	rjmp	.+248    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	79 c0       	rjmp	.+242    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_HIGH)
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	09 f0       	breq	.+2      	; 0x1686 <MDIO_VoidSetPinValue+0x124>
    1684:	75 c0       	rjmp	.+234    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
		{
			switch(Copy_u8Port)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3e 83       	std	Y+6, r19	; 0x06
    168e:	2d 83       	std	Y+5, r18	; 0x05
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	51 f1       	breq	.+84     	; 0x16ee <MDIO_VoidSetPinValue+0x18c>
    169a:	2d 81       	ldd	r18, Y+5	; 0x05
    169c:	3e 81       	ldd	r19, Y+6	; 0x06
    169e:	23 30       	cpi	r18, 0x03	; 3
    16a0:	31 05       	cpc	r19, r1
    16a2:	34 f4       	brge	.+12     	; 0x16b0 <MDIO_VoidSetPinValue+0x14e>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <MDIO_VoidSetPinValue+0x164>
    16ae:	5b c0       	rjmp	.+182    	; 0x1766 <MDIO_VoidSetPinValue+0x204>
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	31 05       	cpc	r19, r1
    16b8:	71 f1       	breq	.+92     	; 0x1716 <MDIO_VoidSetPinValue+0x1b4>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	91 05       	cpc	r25, r1
    16c2:	e9 f1       	breq	.+122    	; 0x173e <MDIO_VoidSetPinValue+0x1dc>
    16c4:	50 c0       	rjmp	.+160    	; 0x1766 <MDIO_VoidSetPinValue+0x204>
			{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin); break ;
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <MDIO_VoidSetPinValue+0x182>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <MDIO_VoidSetPinValue+0x17e>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	41 c0       	rjmp	.+130    	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin); break ;
    16ee:	a8 e3       	ldi	r26, 0x38	; 56
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 e3       	ldi	r30, 0x38	; 56
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <MDIO_VoidSetPinValue+0x1aa>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <MDIO_VoidSetPinValue+0x1a6>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	2d c0       	rjmp	.+90     	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin); break ;
    1716:	a5 e3       	ldi	r26, 0x35	; 53
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e3       	ldi	r30, 0x35	; 53
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <MDIO_VoidSetPinValue+0x1d2>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <MDIO_VoidSetPinValue+0x1ce>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	19 c0       	rjmp	.+50     	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin); break ;
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <MDIO_VoidSetPinValue+0x1fa>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <MDIO_VoidSetPinValue+0x1f6>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <MDIO_VoidSetPinValue+0x20e>
			}
		}
	}
	else
	{
		Error_state = Return_Nok ;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    1770:	89 81       	ldd	r24, Y+1	; 0x01

}
    1772:	28 96       	adiw	r28, 0x08	; 8
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <MDIO_VoidGetPinValue>:
Error_state_t MDIO_VoidGetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *P_u8Value)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	27 97       	sbiw	r28, 0x07	; 7
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	6b 83       	std	Y+3, r22	; 0x03
    179c:	5d 83       	std	Y+5, r21	; 0x05
    179e:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_State=Return_Ok ;
    17a0:	19 82       	std	Y+1, r1	; 0x01
	if(P_u8Value != NULL)
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <MDIO_VoidGetPinValue+0x2a>
    17ac:	7b c0       	rjmp	.+246    	; 0x18a4 <MDIO_VoidGetPinValue+0x120>
	{
		if(Copy_u8Pin<=7)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 30       	cpi	r24, 0x08	; 8
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <MDIO_VoidGetPinValue+0x32>
    17b4:	74 c0       	rjmp	.+232    	; 0x189e <MDIO_VoidGetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3f 83       	std	Y+7, r19	; 0x07
    17be:	2e 83       	std	Y+6, r18	; 0x06
    17c0:	4e 81       	ldd	r20, Y+6	; 0x06
    17c2:	5f 81       	ldd	r21, Y+7	; 0x07
    17c4:	42 30       	cpi	r20, 0x02	; 2
    17c6:	51 05       	cpc	r21, r1
    17c8:	59 f1       	breq	.+86     	; 0x1820 <MDIO_VoidGetPinValue+0x9c>
    17ca:	8e 81       	ldd	r24, Y+6	; 0x06
    17cc:	9f 81       	ldd	r25, Y+7	; 0x07
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	91 05       	cpc	r25, r1
    17d2:	34 f4       	brge	.+12     	; 0x17e0 <MDIO_VoidGetPinValue+0x5c>
    17d4:	2e 81       	ldd	r18, Y+6	; 0x06
    17d6:	3f 81       	ldd	r19, Y+7	; 0x07
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	31 05       	cpc	r19, r1
    17dc:	69 f0       	breq	.+26     	; 0x17f8 <MDIO_VoidGetPinValue+0x74>
    17de:	5c c0       	rjmp	.+184    	; 0x1898 <MDIO_VoidGetPinValue+0x114>
    17e0:	4e 81       	ldd	r20, Y+6	; 0x06
    17e2:	5f 81       	ldd	r21, Y+7	; 0x07
    17e4:	43 30       	cpi	r20, 0x03	; 3
    17e6:	51 05       	cpc	r21, r1
    17e8:	79 f1       	breq	.+94     	; 0x1848 <MDIO_VoidGetPinValue+0xc4>
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	9f 81       	ldd	r25, Y+7	; 0x07
    17ee:	84 30       	cpi	r24, 0x04	; 4
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <MDIO_VoidGetPinValue+0x72>
    17f4:	3d c0       	rjmp	.+122    	; 0x1870 <MDIO_VoidGetPinValue+0xec>
    17f6:	50 c0       	rjmp	.+160    	; 0x1898 <MDIO_VoidGetPinValue+0x114>
			{
			case DIO_PORTA :*P_u8Value= GET_BIT(PINA,Copy_u8Pin); break ;
    17f8:	e9 e3       	ldi	r30, 0x39	; 57
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <MDIO_VoidGetPinValue+0x8c>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <MDIO_VoidGetPinValue+0x88>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	ec 81       	ldd	r30, Y+4	; 0x04
    181a:	fd 81       	ldd	r31, Y+5	; 0x05
    181c:	80 83       	st	Z, r24
    181e:	44 c0       	rjmp	.+136    	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTB :*P_u8Value= GET_BIT(PINB,Copy_u8Pin); break ;
    1820:	e6 e3       	ldi	r30, 0x36	; 54
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a9 01       	movw	r20, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <MDIO_VoidGetPinValue+0xb4>
    1834:	55 95       	asr	r21
    1836:	47 95       	ror	r20
    1838:	8a 95       	dec	r24
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <MDIO_VoidGetPinValue+0xb0>
    183c:	ca 01       	movw	r24, r20
    183e:	81 70       	andi	r24, 0x01	; 1
    1840:	ec 81       	ldd	r30, Y+4	; 0x04
    1842:	fd 81       	ldd	r31, Y+5	; 0x05
    1844:	80 83       	st	Z, r24
    1846:	30 c0       	rjmp	.+96     	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTC :*P_u8Value= GET_BIT(PINC,Copy_u8Pin); break ;
    1848:	e3 e3       	ldi	r30, 0x33	; 51
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <MDIO_VoidGetPinValue+0xdc>
    185c:	55 95       	asr	r21
    185e:	47 95       	ror	r20
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <MDIO_VoidGetPinValue+0xd8>
    1864:	ca 01       	movw	r24, r20
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	ec 81       	ldd	r30, Y+4	; 0x04
    186a:	fd 81       	ldd	r31, Y+5	; 0x05
    186c:	80 83       	st	Z, r24
    186e:	1c c0       	rjmp	.+56     	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTD :*P_u8Value= GET_BIT(PIND,Copy_u8Pin); break ;
    1870:	e0 e3       	ldi	r30, 0x30	; 48
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <MDIO_VoidGetPinValue+0x104>
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <MDIO_VoidGetPinValue+0x100>
    188c:	ca 01       	movw	r24, r20
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	ec 81       	ldd	r30, Y+4	; 0x04
    1892:	fd 81       	ldd	r31, Y+5	; 0x05
    1894:	80 83       	st	Z, r24
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
			default :Error_State=Return_Nok ;  break ;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
			}
		}
		else
		{
			Error_State=Return_Nok ;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <MDIO_VoidGetPinValue+0x124>
		}
	}
	else
	{
		Error_State=Return_NullPointer ;
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	89 83       	std	Y+1, r24	; 0x01
	}



	return Error_State ;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01

}
    18aa:	27 96       	adiw	r28, 0x07	; 7
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <MDIO_VoidSetPortValue>:

Error_state_t MDIO_VoidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <MDIO_VoidSetPortValue+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <MDIO_VoidSetPortValue+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_State=Return_Ok ;
    18ce:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	91 05       	cpc	r25, r1
    18e2:	d9 f0       	breq	.+54     	; 0x191a <MDIO_VoidSetPortValue+0x5e>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	23 30       	cpi	r18, 0x03	; 3
    18ea:	31 05       	cpc	r19, r1
    18ec:	34 f4       	brge	.+12     	; 0x18fa <MDIO_VoidSetPortValue+0x3e>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	61 f0       	breq	.+24     	; 0x1910 <MDIO_VoidSetPortValue+0x54>
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <MDIO_VoidSetPortValue+0x7c>
    18fa:	2c 81       	ldd	r18, Y+4	; 0x04
    18fc:	3d 81       	ldd	r19, Y+5	; 0x05
    18fe:	23 30       	cpi	r18, 0x03	; 3
    1900:	31 05       	cpc	r19, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <MDIO_VoidSetPortValue+0x68>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	91 05       	cpc	r25, r1
    190c:	81 f0       	breq	.+32     	; 0x192e <MDIO_VoidSetPortValue+0x72>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <MDIO_VoidSetPortValue+0x7c>
	{
	case DIO_PORTA : PORTA=Copy_u8Value ;break ;
    1910:	eb e3       	ldi	r30, 0x3B	; 59
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	80 83       	st	Z, r24
    1918:	11 c0       	rjmp	.+34     	; 0x193c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTB : PORTB=Copy_u8Value ;break ;
    191a:	e8 e3       	ldi	r30, 0x38	; 56
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	80 83       	st	Z, r24
    1922:	0c c0       	rjmp	.+24     	; 0x193c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTC : PORTC=Copy_u8Value ;break ;
    1924:	e5 e3       	ldi	r30, 0x35	; 53
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 83       	st	Z, r24
    192c:	07 c0       	rjmp	.+14     	; 0x193c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTD : PORTD=Copy_u8Value ;break ;
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	80 83       	st	Z, r24
    1936:	02 c0       	rjmp	.+4      	; 0x193c <MDIO_VoidSetPortValue+0x80>
	default : Error_State=Return_Nok ;break ;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State=Return_Nok ;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <Port_voidInit>:
void Port_voidInit()
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    195a:	ea e3       	ldi	r30, 0x3A	; 58
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8e ef       	ldi	r24, 0xFE	; 254
    1960:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    1962:	e7 e3       	ldi	r30, 0x37	; 55
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    196a:	e4 e3       	ldi	r30, 0x34	; 52
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    1972:	e1 e3       	ldi	r30, 0x31	; 49
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	80 83       	st	Z, r24


	PORTA = PORTA_Value ;
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	10 82       	st	Z, r1
	PORTB = PORTB_Value ;
    1980:	e8 e3       	ldi	r30, 0x38	; 56
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	10 82       	st	Z, r1
	PORTC = PORTC_Value ;
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	10 82       	st	Z, r1
	PORTD = PORTD_Value ;
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	10 82       	st	Z, r1

}
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <MDIO_VoidTogglePin>:


Error_state_t MDIO_VoidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <MDIO_VoidTogglePin+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <MDIO_VoidTogglePin+0x8>
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_state=Return_Ok ;
    19aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 30       	cpi	r24, 0x08	; 8
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <MDIO_VoidTogglePin+0x1c>
    19b2:	73 c0       	rjmp	.+230    	; 0x1a9a <MDIO_VoidTogglePin+0x102>
	{

			switch(Copy_u8Port)
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	91 05       	cpc	r25, r1
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <MDIO_VoidTogglePin+0x84>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	23 30       	cpi	r18, 0x03	; 3
    19ce:	31 05       	cpc	r19, r1
    19d0:	34 f4       	brge	.+12     	; 0x19de <MDIO_VoidTogglePin+0x46>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	61 f0       	breq	.+24     	; 0x19f4 <MDIO_VoidTogglePin+0x5c>
    19dc:	5b c0       	rjmp	.+182    	; 0x1a94 <MDIO_VoidTogglePin+0xfc>
    19de:	2c 81       	ldd	r18, Y+4	; 0x04
    19e0:	3d 81       	ldd	r19, Y+5	; 0x05
    19e2:	23 30       	cpi	r18, 0x03	; 3
    19e4:	31 05       	cpc	r19, r1
    19e6:	71 f1       	breq	.+92     	; 0x1a44 <MDIO_VoidTogglePin+0xac>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	91 05       	cpc	r25, r1
    19f0:	e9 f1       	breq	.+122    	; 0x1a6c <MDIO_VoidTogglePin+0xd4>
    19f2:	50 c0       	rjmp	.+160    	; 0x1a94 <MDIO_VoidTogglePin+0xfc>
			{
			case DIO_PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break ;
    19f4:	ab e3       	ldi	r26, 0x3B	; 59
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	eb e3       	ldi	r30, 0x3B	; 59
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <MDIO_VoidTogglePin+0x7a>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <MDIO_VoidTogglePin+0x76>
    1a16:	84 27       	eor	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	41 c0       	rjmp	.+130    	; 0x1a9e <MDIO_VoidTogglePin+0x106>
			case DIO_PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break ;
    1a1c:	a8 e3       	ldi	r26, 0x38	; 56
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e8 e3       	ldi	r30, 0x38	; 56
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <MDIO_VoidTogglePin+0xa2>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <MDIO_VoidTogglePin+0x9e>
    1a3e:	84 27       	eor	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	2d c0       	rjmp	.+90     	; 0x1a9e <MDIO_VoidTogglePin+0x106>
			case DIO_PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break ;
    1a44:	a5 e3       	ldi	r26, 0x35	; 53
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <MDIO_VoidTogglePin+0xca>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <MDIO_VoidTogglePin+0xc6>
    1a66:	84 27       	eor	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	19 c0       	rjmp	.+50     	; 0x1a9e <MDIO_VoidTogglePin+0x106>
			case DIO_PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break ;
    1a6c:	a2 e3       	ldi	r26, 0x32	; 50
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e2 e3       	ldi	r30, 0x32	; 50
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <MDIO_VoidTogglePin+0xf2>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <MDIO_VoidTogglePin+0xee>
    1a8e:	84 27       	eor	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <MDIO_VoidTogglePin+0x106>
			default :Error_state = Return_Nok ; break ;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_VoidTogglePin+0x106>
			}
	}
	else
	{
		Error_state = Return_Nok ;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <MTIMER0_voidInit>:
void (*Timer0_PF_OVF)(void)=NULL ;
void (*Timer0_PF_CMP)(void)=NULL ;


void MTIMER0_voidInit()
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE==TIMER0_CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
	SET_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_OCIE0); // Compare Match Interrupt enable
#elif TIMER0_MODE==TIMER0_FPWM_MODE
	SET_BIT(TCCR0,TCCR0_WGM00);
    1ab8:	a3 e5       	ldi	r26, 0x53	; 83
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e3 e5       	ldi	r30, 0x53	; 83
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	80 64       	ori	r24, 0x40	; 64
    1ac4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1ac6:	a3 e5       	ldi	r26, 0x53	; 83
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e3 e5       	ldi	r30, 0x53	; 83
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 60       	ori	r24, 0x08	; 8
    1ad2:	8c 93       	st	X, r24
	/*Non-inverting mode*/
	CLR_BIT(TCCR0,TCCR0_COM00);
    1ad4:	a3 e5       	ldi	r26, 0x53	; 83
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e3 e5       	ldi	r30, 0x53	; 83
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7e       	andi	r24, 0xEF	; 239
    1ae0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    1ae2:	a3 e5       	ldi	r26, 0x53	; 83
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e3 e5       	ldi	r30, 0x53	; 83
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	80 62       	ori	r24, 0x20	; 32
    1aee:	8c 93       	st	X, r24
#if TIMER0_PRESCALER==TIMER0_NO_PRESCALER
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
	CLR_BIT(TCCR0,TCCR0_CS00);
    1af0:	a3 e5       	ldi	r26, 0x53	; 83
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e3 e5       	ldi	r30, 0x53	; 83
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8e 7f       	andi	r24, 0xFE	; 254
    1afc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1afe:	a3 e5       	ldi	r26, 0x53	; 83
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e3 e5       	ldi	r30, 0x53	; 83
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1b0c:	a3 e5       	ldi	r26, 0x53	; 83
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e3 e5       	ldi	r30, 0x53	; 83
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8b 7f       	andi	r24, 0xFB	; 251
    1b18:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error"Wrong Timer0 Prescaler Selection"
#endif
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable()
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	/*No Clock Source*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1b28:	a3 e5       	ldi	r26, 0x53	; 83
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e3 e5       	ldi	r30, 0x53	; 83
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8e 7f       	andi	r24, 0xFE	; 254
    1b34:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    1b36:	a3 e5       	ldi	r26, 0x53	; 83
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e3 e5       	ldi	r30, 0x53	; 83
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8d 7f       	andi	r24, 0xFD	; 253
    1b42:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1b44:	a3 e5       	ldi	r26, 0x53	; 83
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e3 e5       	ldi	r30, 0x53	; 83
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8b 7f       	andi	r24, 0xFB	; 251
    1b50:	8c 93       	st	X, r24
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle ;
    1b64:	ec e5       	ldi	r30, 0x5C	; 92
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	80 83       	st	Z, r24
}
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <MTIMER0_voidPreload>:
void MTIMER0_voidPreload(u8 Copy_u8Preload)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload ;
    1b80:	e2 e5       	ldi	r30, 0x52	; 82
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	80 83       	st	Z, r24
}
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <MTIMER0_voidCompMatchValue>:

void MTIMER0_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	0f 92       	push	r0
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8ComMatchValue ;
    1b9c:	ec e5       	ldi	r30, 0x5C	; 92
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	80 83       	st	Z, r24
}
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <MTIMER0_voidSetCallBack_OVF>:

void MTIMER0_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <MTIMER0_voidSetCallBack_OVF+0x6>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_OVF=Copy_pf ;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	90 93 83 00 	sts	0x0083, r25
    1bc2:	80 93 82 00 	sts	0x0082, r24
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <MTIMER0_voidSetCallBack_CMP>:
void MTIMER0_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <MTIMER0_voidSetCallBack_CMP+0x6>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_CMP=Copy_pf ;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	90 93 85 00 	sts	0x0085, r25
    1be6:	80 93 84 00 	sts	0x0084, r24
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <__vector_11>:

void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_OVF != NULL)
    1c1e:	80 91 82 00 	lds	r24, 0x0082
    1c22:	90 91 83 00 	lds	r25, 0x0083
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	29 f0       	breq	.+10     	; 0x1c34 <__vector_11+0x40>
	{
		Timer0_PF_OVF() ;
    1c2a:	e0 91 82 00 	lds	r30, 0x0082
    1c2e:	f0 91 83 00 	lds	r31, 0x0083
    1c32:	09 95       	icall
	}
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__vector_10>:
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_CMP != NULL)
    1c84:	80 91 84 00 	lds	r24, 0x0084
    1c88:	90 91 85 00 	lds	r25, 0x0085
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	29 f0       	breq	.+10     	; 0x1c9a <__vector_10+0x40>
	{
		Timer0_PF_CMP() ;
    1c90:	e0 91 84 00 	lds	r30, 0x0084
    1c94:	f0 91 85 00 	lds	r31, 0x0085
    1c98:	09 95       	icall
	}
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	0f 90       	pop	r0
    1cbc:	1f 90       	pop	r1
    1cbe:	18 95       	reti

00001cc0 <MTIMER1_voidInit>:

void MTIMER1_voidInit(TIMER1MODES_t Copy_enuTimer1Mode , TIMER1_TOPMODES_t Copy_enuTimer1TopMode,TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	29 97       	sbiw	r28, 0x09	; 9
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	6a 83       	std	Y+2, r22	; 0x02
    1cd8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_enuTimer1Mode)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	39 87       	std	Y+9, r19	; 0x09
    1ce2:	28 87       	std	Y+8, r18	; 0x08
    1ce4:	88 85       	ldd	r24, Y+8	; 0x08
    1ce6:	99 85       	ldd	r25, Y+9	; 0x09
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	91 05       	cpc	r25, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <MTIMER1_voidInit+0x30>
    1cee:	79 c0       	rjmp	.+242    	; 0x1de2 <MTIMER1_voidInit+0x122>
    1cf0:	28 85       	ldd	r18, Y+8	; 0x08
    1cf2:	39 85       	ldd	r19, Y+9	; 0x09
    1cf4:	23 30       	cpi	r18, 0x03	; 3
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	54 f4       	brge	.+20     	; 0x1d0e <MTIMER1_voidInit+0x4e>
    1cfa:	88 85       	ldd	r24, Y+8	; 0x08
    1cfc:	99 85       	ldd	r25, Y+9	; 0x09
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	c9 f0       	breq	.+50     	; 0x1d34 <MTIMER1_voidInit+0x74>
    1d02:	28 85       	ldd	r18, Y+8	; 0x08
    1d04:	39 85       	ldd	r19, Y+9	; 0x09
    1d06:	21 30       	cpi	r18, 0x01	; 1
    1d08:	31 05       	cpc	r19, r1
    1d0a:	89 f1       	breq	.+98     	; 0x1d6e <MTIMER1_voidInit+0xae>
    1d0c:	c0 c0       	rjmp	.+384    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
    1d0e:	88 85       	ldd	r24, Y+8	; 0x08
    1d10:	99 85       	ldd	r25, Y+9	; 0x09
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <MTIMER1_voidInit+0x5a>
    1d18:	81 c0       	rjmp	.+258    	; 0x1e1c <MTIMER1_voidInit+0x15c>
    1d1a:	28 85       	ldd	r18, Y+8	; 0x08
    1d1c:	39 85       	ldd	r19, Y+9	; 0x09
    1d1e:	24 30       	cpi	r18, 0x04	; 4
    1d20:	31 05       	cpc	r19, r1
    1d22:	0c f4       	brge	.+2      	; 0x1d26 <MTIMER1_voidInit+0x66>
    1d24:	41 c0       	rjmp	.+130    	; 0x1da8 <MTIMER1_voidInit+0xe8>
    1d26:	88 85       	ldd	r24, Y+8	; 0x08
    1d28:	99 85       	ldd	r25, Y+9	; 0x09
    1d2a:	85 30       	cpi	r24, 0x05	; 5
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <MTIMER1_voidInit+0x72>
    1d30:	92 c0       	rjmp	.+292    	; 0x1e56 <MTIMER1_voidInit+0x196>
    1d32:	ad c0       	rjmp	.+346    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
	{
	case CTC_NORMAL_MODE :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1d34:	af e4       	ldi	r26, 0x4F	; 79
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ef e4       	ldi	r30, 0x4F	; 79
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 7b       	andi	r24, 0xBF	; 191
    1d40:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1d42:	af e4       	ldi	r26, 0x4F	; 79
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ef e4       	ldi	r30, 0x4F	; 79
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 7e       	andi	r24, 0xEF	; 239
    1d4e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    1d50:	af e4       	ldi	r26, 0x4F	; 79
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ef e4       	ldi	r30, 0x4F	; 79
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1d5e:	af e4       	ldi	r26, 0x4F	; 79
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ef e4       	ldi	r30, 0x4F	; 79
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	8c 93       	st	X, r24
    1d6c:	90 c0       	rjmp	.+288    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
		/*CLR_BIT(TCCR1A,TCCR1A_WGM10);
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
		CLR_BIT(TCCR1A,TCCR1B_WGM12);
		CLR_BIT(TCCR1A,TCCR1B_WGM13);break ;*/
	case CTC_TOGGLE :
		SET_BIT(TCCR1A, TCCR1A_COM1A0);
    1d6e:	af e4       	ldi	r26, 0x4F	; 79
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ef e4       	ldi	r30, 0x4F	; 79
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 64       	ori	r24, 0x40	; 64
    1d7a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B0);
    1d7c:	af e4       	ldi	r26, 0x4F	; 79
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ef e4       	ldi	r30, 0x4F	; 79
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 61       	ori	r24, 0x10	; 16
    1d88:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    1d8a:	af e4       	ldi	r26, 0x4F	; 79
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ef e4       	ldi	r30, 0x4F	; 79
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 77       	andi	r24, 0x7F	; 127
    1d96:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1d98:	af e4       	ldi	r26, 0x4F	; 79
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ef e4       	ldi	r30, 0x4F	; 79
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	8c 93       	st	X, r24
    1da6:	73 c0       	rjmp	.+230    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
	case CTC_SET :
		SET_BIT(TCCR1A, TCCR1A_COM1A0);
    1da8:	af e4       	ldi	r26, 0x4F	; 79
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ef e4       	ldi	r30, 0x4F	; 79
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 64       	ori	r24, 0x40	; 64
    1db4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B0);
    1db6:	af e4       	ldi	r26, 0x4F	; 79
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ef e4       	ldi	r30, 0x4F	; 79
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 61       	ori	r24, 0x10	; 16
    1dc2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1dc4:	af e4       	ldi	r26, 0x4F	; 79
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	ef e4       	ldi	r30, 0x4F	; 79
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1dd2:	af e4       	ldi	r26, 0x4F	; 79
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ef e4       	ldi	r30, 0x4F	; 79
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 62       	ori	r24, 0x20	; 32
    1dde:	8c 93       	st	X, r24
    1de0:	56 c0       	rjmp	.+172    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
	case CTC_CLR :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1de2:	af e4       	ldi	r26, 0x4F	; 79
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ef e4       	ldi	r30, 0x4F	; 79
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 7b       	andi	r24, 0xBF	; 191
    1dee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1df0:	af e4       	ldi	r26, 0x4F	; 79
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	ef e4       	ldi	r30, 0x4F	; 79
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 7e       	andi	r24, 0xEF	; 239
    1dfc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1dfe:	af e4       	ldi	r26, 0x4F	; 79
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	ef e4       	ldi	r30, 0x4F	; 79
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1e0c:	af e4       	ldi	r26, 0x4F	; 79
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ef e4       	ldi	r30, 0x4F	; 79
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	80 62       	ori	r24, 0x20	; 32
    1e18:	8c 93       	st	X, r24
    1e1a:	39 c0       	rjmp	.+114    	; 0x1e8e <MTIMER1_voidInit+0x1ce>
	case FPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1e1c:	af e4       	ldi	r26, 0x4F	; 79
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	ef e4       	ldi	r30, 0x4F	; 79
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7b       	andi	r24, 0xBF	; 191
    1e28:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1e2a:	af e4       	ldi	r26, 0x4F	; 79
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ef e4       	ldi	r30, 0x4F	; 79
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7e       	andi	r24, 0xEF	; 239
    1e36:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1e38:	af e4       	ldi	r26, 0x4F	; 79
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e4       	ldi	r30, 0x4F	; 79
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1e46:	af e4       	ldi	r26, 0x4F	; 79
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ef e4       	ldi	r30, 0x4F	; 79
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 62       	ori	r24, 0x20	; 32
    1e52:	8c 93       	st	X, r24
    1e54:	1c c0       	rjmp	.+56     	; 0x1e8e <MTIMER1_voidInit+0x1ce>
	case FPWM_INVERTING :
		SET_BIT(TCCR1A, TCCR1A_COM1A0);
    1e56:	af e4       	ldi	r26, 0x4F	; 79
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ef e4       	ldi	r30, 0x4F	; 79
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 64       	ori	r24, 0x40	; 64
    1e62:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B0);
    1e64:	af e4       	ldi	r26, 0x4F	; 79
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ef e4       	ldi	r30, 0x4F	; 79
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 61       	ori	r24, 0x10	; 16
    1e70:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1e72:	af e4       	ldi	r26, 0x4F	; 79
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ef e4       	ldi	r30, 0x4F	; 79
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1e80:	af e4       	ldi	r26, 0x4F	; 79
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ef e4       	ldi	r30, 0x4F	; 79
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 62       	ori	r24, 0x20	; 32
    1e8c:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1TopMode)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3f 83       	std	Y+7, r19	; 0x07
    1e96:	2e 83       	std	Y+6, r18	; 0x06
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <MTIMER1_voidInit+0x1e4>
    1ea2:	73 c0       	rjmp	.+230    	; 0x1f8a <MTIMER1_voidInit+0x2ca>
    1ea4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea8:	23 30       	cpi	r18, 0x03	; 3
    1eaa:	31 05       	cpc	r19, r1
    1eac:	54 f4       	brge	.+20     	; 0x1ec2 <MTIMER1_voidInit+0x202>
    1eae:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	81 f1       	breq	.+96     	; 0x1f16 <MTIMER1_voidInit+0x256>
    1eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eba:	21 30       	cpi	r18, 0x01	; 1
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <MTIMER1_voidInit+0x21c>
    1ec0:	9d c0       	rjmp	.+314    	; 0x1ffc <MTIMER1_voidInit+0x33c>
    1ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <MTIMER1_voidInit+0x20e>
    1ecc:	41 c0       	rjmp	.+130    	; 0x1f50 <MTIMER1_voidInit+0x290>
    1ece:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed2:	24 30       	cpi	r18, 0x04	; 4
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <MTIMER1_voidInit+0x21a>
    1ed8:	75 c0       	rjmp	.+234    	; 0x1fc4 <MTIMER1_voidInit+0x304>
    1eda:	90 c0       	rjmp	.+288    	; 0x1ffc <MTIMER1_voidInit+0x33c>
	{
	case TOP_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1edc:	af e4       	ldi	r26, 0x4F	; 79
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ef e4       	ldi	r30, 0x4F	; 79
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8e 7f       	andi	r24, 0xFE	; 254
    1ee8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1eea:	af e4       	ldi	r26, 0x4F	; 79
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	ef e4       	ldi	r30, 0x4F	; 79
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ef8:	ae e4       	ldi	r26, 0x4E	; 78
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	ee e4       	ldi	r30, 0x4E	; 78
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	88 60       	ori	r24, 0x08	; 8
    1f04:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f06:	ae e4       	ldi	r26, 0x4E	; 78
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	ee e4       	ldi	r30, 0x4E	; 78
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 61       	ori	r24, 0x10	; 16
    1f12:	8c 93       	st	X, r24
    1f14:	73 c0       	rjmp	.+230    	; 0x1ffc <MTIMER1_voidInit+0x33c>
	case TOP_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f16:	af e4       	ldi	r26, 0x4F	; 79
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	ef e4       	ldi	r30, 0x4F	; 79
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8e 7f       	andi	r24, 0xFE	; 254
    1f22:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1f24:	af e4       	ldi	r26, 0x4F	; 79
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ef e4       	ldi	r30, 0x4F	; 79
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8d 7f       	andi	r24, 0xFD	; 253
    1f30:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f32:	ae e4       	ldi	r26, 0x4E	; 78
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ee e4       	ldi	r30, 0x4E	; 78
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 60       	ori	r24, 0x08	; 8
    1f3e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f40:	ae e4       	ldi	r26, 0x4E	; 78
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ee e4       	ldi	r30, 0x4E	; 78
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 7e       	andi	r24, 0xEF	; 239
    1f4c:	8c 93       	st	X, r24
    1f4e:	56 c0       	rjmp	.+172    	; 0x1ffc <MTIMER1_voidInit+0x33c>
	case TOP_FPWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f50:	af e4       	ldi	r26, 0x4F	; 79
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ef e4       	ldi	r30, 0x4F	; 79
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	8e 7f       	andi	r24, 0xFE	; 254
    1f5c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f5e:	af e4       	ldi	r26, 0x4F	; 79
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ef e4       	ldi	r30, 0x4F	; 79
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	82 60       	ori	r24, 0x02	; 2
    1f6a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f6c:	ae e4       	ldi	r26, 0x4E	; 78
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ee e4       	ldi	r30, 0x4E	; 78
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	88 60       	ori	r24, 0x08	; 8
    1f78:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f7a:	ae e4       	ldi	r26, 0x4E	; 78
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ee e4       	ldi	r30, 0x4E	; 78
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 61       	ori	r24, 0x10	; 16
    1f86:	8c 93       	st	X, r24
    1f88:	39 c0       	rjmp	.+114    	; 0x1ffc <MTIMER1_voidInit+0x33c>
	case TOP_FPWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1f8a:	af e4       	ldi	r26, 0x4F	; 79
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	ef e4       	ldi	r30, 0x4F	; 79
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	81 60       	ori	r24, 0x01	; 1
    1f96:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f98:	af e4       	ldi	r26, 0x4F	; 79
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	ef e4       	ldi	r30, 0x4F	; 79
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	82 60       	ori	r24, 0x02	; 2
    1fa4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1fa6:	ae e4       	ldi	r26, 0x4E	; 78
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	ee e4       	ldi	r30, 0x4E	; 78
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 60       	ori	r24, 0x08	; 8
    1fb2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1fb4:	ae e4       	ldi	r26, 0x4E	; 78
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	ee e4       	ldi	r30, 0x4E	; 78
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 61       	ori	r24, 0x10	; 16
    1fc0:	8c 93       	st	X, r24
    1fc2:	1c c0       	rjmp	.+56     	; 0x1ffc <MTIMER1_voidInit+0x33c>
	case TOP_NORMAL_0xffff :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1fc4:	af e4       	ldi	r26, 0x4F	; 79
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	ef e4       	ldi	r30, 0x4F	; 79
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8e 7f       	andi	r24, 0xFE	; 254
    1fd0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1fd2:	af e4       	ldi	r26, 0x4F	; 79
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ef e4       	ldi	r30, 0x4F	; 79
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8d 7f       	andi	r24, 0xFD	; 253
    1fde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1fe0:	ae e4       	ldi	r26, 0x4E	; 78
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	ee e4       	ldi	r30, 0x4E	; 78
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	87 7f       	andi	r24, 0xF7	; 247
    1fec:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);break;
    1fee:	ae e4       	ldi	r26, 0x4E	; 78
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	ee e4       	ldi	r30, 0x4E	; 78
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 7e       	andi	r24, 0xEF	; 239
    1ffa:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1Prescaler)
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	3d 83       	std	Y+5, r19	; 0x05
    2004:	2c 83       	std	Y+4, r18	; 0x04
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	82 30       	cpi	r24, 0x02	; 2
    200c:	91 05       	cpc	r25, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <MTIMER1_voidInit+0x352>
    2010:	48 c0       	rjmp	.+144    	; 0x20a2 <MTIMER1_voidInit+0x3e2>
    2012:	2c 81       	ldd	r18, Y+4	; 0x04
    2014:	3d 81       	ldd	r19, Y+5	; 0x05
    2016:	23 30       	cpi	r18, 0x03	; 3
    2018:	31 05       	cpc	r19, r1
    201a:	54 f4       	brge	.+20     	; 0x2030 <MTIMER1_voidInit+0x370>
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	99 f0       	breq	.+38     	; 0x204a <MTIMER1_voidInit+0x38a>
    2024:	2c 81       	ldd	r18, Y+4	; 0x04
    2026:	3d 81       	ldd	r19, Y+5	; 0x05
    2028:	21 30       	cpi	r18, 0x01	; 1
    202a:	31 05       	cpc	r19, r1
    202c:	21 f1       	breq	.+72     	; 0x2076 <MTIMER1_voidInit+0x3b6>
    202e:	7a c0       	rjmp	.+244    	; 0x2124 <MTIMER1_voidInit+0x464>
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	9d 81       	ldd	r25, Y+5	; 0x05
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <MTIMER1_voidInit+0x37c>
    203a:	49 c0       	rjmp	.+146    	; 0x20ce <MTIMER1_voidInit+0x40e>
    203c:	2c 81       	ldd	r18, Y+4	; 0x04
    203e:	3d 81       	ldd	r19, Y+5	; 0x05
    2040:	24 30       	cpi	r18, 0x04	; 4
    2042:	31 05       	cpc	r19, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <MTIMER1_voidInit+0x388>
    2046:	59 c0       	rjmp	.+178    	; 0x20fa <MTIMER1_voidInit+0x43a>
    2048:	6d c0       	rjmp	.+218    	; 0x2124 <MTIMER1_voidInit+0x464>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    204a:	ae e4       	ldi	r26, 0x4E	; 78
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	ee e4       	ldi	r30, 0x4E	; 78
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	81 60       	ori	r24, 0x01	; 1
    2056:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2058:	ae e4       	ldi	r26, 0x4E	; 78
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	ee e4       	ldi	r30, 0x4E	; 78
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	8d 7f       	andi	r24, 0xFD	; 253
    2064:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2066:	ae e4       	ldi	r26, 0x4E	; 78
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	ee e4       	ldi	r30, 0x4E	; 78
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8b 7f       	andi	r24, 0xFB	; 251
    2072:	8c 93       	st	X, r24
    2074:	57 c0       	rjmp	.+174    	; 0x2124 <MTIMER1_voidInit+0x464>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    2076:	ae e4       	ldi	r26, 0x4E	; 78
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	ee e4       	ldi	r30, 0x4E	; 78
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8e 7f       	andi	r24, 0xFE	; 254
    2082:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    2084:	ae e4       	ldi	r26, 0x4E	; 78
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	ee e4       	ldi	r30, 0x4E	; 78
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	82 60       	ori	r24, 0x02	; 2
    2090:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2092:	ae e4       	ldi	r26, 0x4E	; 78
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	ee e4       	ldi	r30, 0x4E	; 78
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8b 7f       	andi	r24, 0xFB	; 251
    209e:	8c 93       	st	X, r24
    20a0:	41 c0       	rjmp	.+130    	; 0x2124 <MTIMER1_voidInit+0x464>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    20a2:	ae e4       	ldi	r26, 0x4E	; 78
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ee e4       	ldi	r30, 0x4E	; 78
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	81 60       	ori	r24, 0x01	; 1
    20ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    20b0:	ae e4       	ldi	r26, 0x4E	; 78
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e4       	ldi	r30, 0x4E	; 78
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    20be:	ae e4       	ldi	r26, 0x4E	; 78
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	ee e4       	ldi	r30, 0x4E	; 78
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8b 7f       	andi	r24, 0xFB	; 251
    20ca:	8c 93       	st	X, r24
    20cc:	2b c0       	rjmp	.+86     	; 0x2124 <MTIMER1_voidInit+0x464>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    20ce:	ae e4       	ldi	r26, 0x4E	; 78
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ee e4       	ldi	r30, 0x4E	; 78
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8e 7f       	andi	r24, 0xFE	; 254
    20da:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    20dc:	ae e4       	ldi	r26, 0x4E	; 78
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ee e4       	ldi	r30, 0x4E	; 78
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8d 7f       	andi	r24, 0xFD	; 253
    20e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    20ea:	ae e4       	ldi	r26, 0x4E	; 78
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ee e4       	ldi	r30, 0x4E	; 78
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	8c 93       	st	X, r24
    20f8:	15 c0       	rjmp	.+42     	; 0x2124 <MTIMER1_voidInit+0x464>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    20fa:	ae e4       	ldi	r26, 0x4E	; 78
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	ee e4       	ldi	r30, 0x4E	; 78
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	81 60       	ori	r24, 0x01	; 1
    2106:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2108:	ae e4       	ldi	r26, 0x4E	; 78
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ee e4       	ldi	r30, 0x4E	; 78
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8d 7f       	andi	r24, 0xFD	; 253
    2114:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    2116:	ae e4       	ldi	r26, 0x4E	; 78
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ee e4       	ldi	r30, 0x4E	; 78
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	84 60       	ori	r24, 0x04	; 4
    2122:	8c 93       	st	X, r24
	default:break;

	}

}
    2124:	29 96       	adiw	r28, 0x09	; 9
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_TopValue ,TIMER1_TOPMODES_t Copy_enuTimer1TopMode)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <MTIMER1_voidSetTopValue+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <MTIMER1_voidSetTopValue+0x8>
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuTimer1TopMode)
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	3d 83       	std	Y+5, r19	; 0x05
    2152:	2c 83       	std	Y+4, r18	; 0x04
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	91 05       	cpc	r25, r1
    215c:	a9 f0       	breq	.+42     	; 0x2188 <MTIMER1_voidSetTopValue+0x52>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	2c f4       	brge	.+10     	; 0x2172 <MTIMER1_voidSetTopValue+0x3c>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	99 f0       	breq	.+38     	; 0x2196 <MTIMER1_voidSetTopValue+0x60>
    2170:	26 c0       	rjmp	.+76     	; 0x21be <MTIMER1_voidSetTopValue+0x88>
    2172:	2c 81       	ldd	r18, Y+4	; 0x04
    2174:	3d 81       	ldd	r19, Y+5	; 0x05
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	31 05       	cpc	r19, r1
    217a:	d9 f0       	breq	.+54     	; 0x21b2 <MTIMER1_voidSetTopValue+0x7c>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	79 f0       	breq	.+30     	; 0x21a4 <MTIMER1_voidSetTopValue+0x6e>
    2186:	1b c0       	rjmp	.+54     	; 0x21be <MTIMER1_voidSetTopValue+0x88>
	{
	case TOP_CTC_ICR1 : ICR1 = Copy_TopValue ;break ;
    2188:	e6 e4       	ldi	r30, 0x46	; 70
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	14 c0       	rjmp	.+40     	; 0x21be <MTIMER1_voidSetTopValue+0x88>
	case TOP_CTC_OCR1A : OCR1A = Copy_TopValue ;break ;
    2196:	ea e4       	ldi	r30, 0x4A	; 74
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	0d c0       	rjmp	.+26     	; 0x21be <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_ICR1 : ICR1 = Copy_TopValue ;break ;
    21a4:	e6 e4       	ldi	r30, 0x46	; 70
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_OCR1A : OCR1A = Copy_TopValue ;break ;
    21b2:	ea e4       	ldi	r30, 0x4A	; 74
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
	default:break;

	}
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_DutyCycleValue)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <MTIMER1_voidSetDutyCycle+0x6>
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_DutyCycleValue ;
    21dc:	ea e4       	ldi	r30, 0x4A	; 74
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
}
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <MTIMER1_voidICUInit>:

void MTIMER1_voidICUInit(u8 Copy_ICUSense,TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <MTIMER1_voidICUInit+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <MTIMER1_voidICUInit+0x8>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_enuTimer1Prescaler)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3c 83       	std	Y+4, r19	; 0x04
    220a:	2b 83       	std	Y+3, r18	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <MTIMER1_voidICUInit+0x26>
    2216:	48 c0       	rjmp	.+144    	; 0x22a8 <MTIMER1_voidICUInit+0xb6>
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	23 30       	cpi	r18, 0x03	; 3
    221e:	31 05       	cpc	r19, r1
    2220:	54 f4       	brge	.+20     	; 0x2236 <MTIMER1_voidICUInit+0x44>
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	99 f0       	breq	.+38     	; 0x2250 <MTIMER1_voidICUInit+0x5e>
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	21 30       	cpi	r18, 0x01	; 1
    2230:	31 05       	cpc	r19, r1
    2232:	21 f1       	breq	.+72     	; 0x227c <MTIMER1_voidICUInit+0x8a>
    2234:	7a c0       	rjmp	.+244    	; 0x232a <MTIMER1_voidICUInit+0x138>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	91 05       	cpc	r25, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <MTIMER1_voidICUInit+0x50>
    2240:	49 c0       	rjmp	.+146    	; 0x22d4 <MTIMER1_voidICUInit+0xe2>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	24 30       	cpi	r18, 0x04	; 4
    2248:	31 05       	cpc	r19, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <MTIMER1_voidICUInit+0x5c>
    224c:	59 c0       	rjmp	.+178    	; 0x2300 <MTIMER1_voidICUInit+0x10e>
    224e:	6d c0       	rjmp	.+218    	; 0x232a <MTIMER1_voidICUInit+0x138>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2250:	ae e4       	ldi	r26, 0x4E	; 78
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e4       	ldi	r30, 0x4E	; 78
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    225e:	ae e4       	ldi	r26, 0x4E	; 78
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ee e4       	ldi	r30, 0x4E	; 78
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8d 7f       	andi	r24, 0xFD	; 253
    226a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    226c:	ae e4       	ldi	r26, 0x4E	; 78
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ee e4       	ldi	r30, 0x4E	; 78
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	8b 7f       	andi	r24, 0xFB	; 251
    2278:	8c 93       	st	X, r24
    227a:	57 c0       	rjmp	.+174    	; 0x232a <MTIMER1_voidICUInit+0x138>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    227c:	ae e4       	ldi	r26, 0x4E	; 78
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ee e4       	ldi	r30, 0x4E	; 78
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8e 7f       	andi	r24, 0xFE	; 254
    2288:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    228a:	ae e4       	ldi	r26, 0x4E	; 78
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	ee e4       	ldi	r30, 0x4E	; 78
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	82 60       	ori	r24, 0x02	; 2
    2296:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2298:	ae e4       	ldi	r26, 0x4E	; 78
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ee e4       	ldi	r30, 0x4E	; 78
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8b 7f       	andi	r24, 0xFB	; 251
    22a4:	8c 93       	st	X, r24
    22a6:	41 c0       	rjmp	.+130    	; 0x232a <MTIMER1_voidICUInit+0x138>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    22a8:	ae e4       	ldi	r26, 0x4E	; 78
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ee e4       	ldi	r30, 0x4E	; 78
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	81 60       	ori	r24, 0x01	; 1
    22b4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    22b6:	ae e4       	ldi	r26, 0x4E	; 78
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ee e4       	ldi	r30, 0x4E	; 78
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	82 60       	ori	r24, 0x02	; 2
    22c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    22c4:	ae e4       	ldi	r26, 0x4E	; 78
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ee e4       	ldi	r30, 0x4E	; 78
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8b 7f       	andi	r24, 0xFB	; 251
    22d0:	8c 93       	st	X, r24
    22d2:	2b c0       	rjmp	.+86     	; 0x232a <MTIMER1_voidICUInit+0x138>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    22d4:	ae e4       	ldi	r26, 0x4E	; 78
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ee e4       	ldi	r30, 0x4E	; 78
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8e 7f       	andi	r24, 0xFE	; 254
    22e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    22e2:	ae e4       	ldi	r26, 0x4E	; 78
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ee e4       	ldi	r30, 0x4E	; 78
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8d 7f       	andi	r24, 0xFD	; 253
    22ee:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    22f0:	ae e4       	ldi	r26, 0x4E	; 78
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ee e4       	ldi	r30, 0x4E	; 78
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	84 60       	ori	r24, 0x04	; 4
    22fc:	8c 93       	st	X, r24
    22fe:	15 c0       	rjmp	.+42     	; 0x232a <MTIMER1_voidICUInit+0x138>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2300:	ae e4       	ldi	r26, 0x4E	; 78
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ee e4       	ldi	r30, 0x4E	; 78
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	81 60       	ori	r24, 0x01	; 1
    230c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    230e:	ae e4       	ldi	r26, 0x4E	; 78
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ee e4       	ldi	r30, 0x4E	; 78
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8d 7f       	andi	r24, 0xFD	; 253
    231a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    231c:	ae e4       	ldi	r26, 0x4E	; 78
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	ee e4       	ldi	r30, 0x4E	; 78
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	84 60       	ori	r24, 0x04	; 4
    2328:	8c 93       	st	X, r24
	default:break;
	}
}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <MTIMER1_voidSetICUSense>:
void MTIMER1_voidSetICUSense(u8 Copy_ICUSense)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <MTIMER1_voidSetICUSense+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_ICUSense)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3b 83       	std	Y+3, r19	; 0x03
    234e:	2a 83       	std	Y+2, r18	; 0x02
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	69 f0       	breq	.+26     	; 0x2374 <MTIMER1_voidSetICUSense+0x3c>
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	3b 81       	ldd	r19, Y+3	; 0x03
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	79 f4       	brne	.+30     	; 0x2382 <MTIMER1_voidSetICUSense+0x4a>
	{
	case ICU_RISING : SET_BIT(TCCR1B,TCCR1B_ICES1);break ;
    2364:	ae e4       	ldi	r26, 0x4E	; 78
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	ee e4       	ldi	r30, 0x4E	; 78
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	80 64       	ori	r24, 0x40	; 64
    2370:	8c 93       	st	X, r24
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <MTIMER1_voidSetICUSense+0x4a>
	case ICU_FALLING : CLR_BIT(TCCR1B,TCCR1B_ICES1);break ;
    2374:	ae e4       	ldi	r26, 0x4E	; 78
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ee e4       	ldi	r30, 0x4E	; 78
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8f 7b       	andi	r24, 0xBF	; 191
    2380:	8c 93       	st	X, r24
	default:break;
	}
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <MTIMER1_voidEnableICUInterrupt>:
void MTIMER1_voidEnableICUInterrupt()
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2396:	a9 e5       	ldi	r26, 0x59	; 89
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e9 e5       	ldi	r30, 0x59	; 89
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 62       	ori	r24, 0x20	; 32
    23a2:	8c 93       	st	X, r24
}
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <MTIMER1_voidDisableICUInterrupt>:
void MTIMER1_voidDisableICUInterrupt()
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    23b2:	a9 e5       	ldi	r26, 0x59	; 89
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e9 e5       	ldi	r30, 0x59	; 89
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	8c 93       	st	X, r24
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <MTIMER1_voidGetICUValue>:
u16 MTIMER1_voidGetICUValue()
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    23ce:	e6 e4       	ldi	r30, 0x46	; 70
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <main>:
#include <util/delay.h>

u16 Mapping(u16 X_MAX,u16 X_MIN,u16 Y_MAX,u16 Y_MIN,u16 Y);

int main()
{
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	c8 56       	subi	r28, 0x68	; 104
    23ea:	d0 40       	sbci	r29, 0x00	; 0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
	u16 value ,MapValue,angle=0 ;
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 59       	subi	r30, 0x9D	; 157
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	11 82       	std	Z+1, r1	; 0x01
    23fe:	10 82       	st	Z, r1
	Port_voidInit();
    2400:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Port_voidInit>
	HLCD_voidInit();
    2404:	0e 94 df 06 	call	0xdbe	; 0xdbe <HLCD_voidInit>
    2408:	fe 01       	movw	r30, r28
    240a:	e1 5a       	subi	r30, 0xA1	; 161
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	aa ef       	ldi	r26, 0xFA	; 250
    2414:	b3 e4       	ldi	r27, 0x43	; 67
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	8e 01       	movw	r16, r28
    2420:	05 5a       	subi	r16, 0xA5	; 165
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	fe 01       	movw	r30, r28
    2426:	e1 5a       	subi	r30, 0xA1	; 161
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a ef       	ldi	r20, 0xFA	; 250
    2438:	54 e4       	ldi	r21, 0x44	; 68
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	80 83       	st	Z, r24
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	a2 83       	std	Z+2, r26	; 0x02
    244a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    244c:	fe 01       	movw	r30, r28
    244e:	e5 5a       	subi	r30, 0xA5	; 165
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	44 f4       	brge	.+16     	; 0x247a <main+0x9e>
		__ticks = 1;
    246a:	fe 01       	movw	r30, r28
    246c:	e7 5a       	subi	r30, 0xA7	; 167
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	64 c0       	rjmp	.+200    	; 0x2542 <main+0x166>
	else if (__tmp > 65535)
    247a:	fe 01       	movw	r30, r28
    247c:	e5 5a       	subi	r30, 0xA5	; 165
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	0c f0       	brlt	.+2      	; 0x249a <main+0xbe>
    2498:	43 c0       	rjmp	.+134    	; 0x2520 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	fe 01       	movw	r30, r28
    249c:	e1 5a       	subi	r30, 0xA1	; 161
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8e 01       	movw	r16, r28
    24ba:	07 5a       	subi	r16, 0xA7	; 167
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	1f c0       	rjmp	.+62     	; 0x2510 <main+0x134>
    24d2:	fe 01       	movw	r30, r28
    24d4:	e9 5a       	subi	r30, 0xA9	; 169
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	88 ec       	ldi	r24, 0xC8	; 200
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	fe 01       	movw	r30, r28
    24e2:	e9 5a       	subi	r30, 0xA9	; 169
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <main+0x10e>
    24ee:	fe 01       	movw	r30, r28
    24f0:	e9 5a       	subi	r30, 0xA9	; 169
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	de 01       	movw	r26, r28
    24fa:	a7 5a       	subi	r26, 0xA7	; 167
    24fc:	bf 4f       	sbci	r27, 0xFF	; 255
    24fe:	fe 01       	movw	r30, r28
    2500:	e7 5a       	subi	r30, 0xA7	; 167
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	9c 93       	st	X, r25
    250e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	fe 01       	movw	r30, r28
    2512:	e7 5a       	subi	r30, 0xA7	; 167
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	d1 f6       	brne	.-76     	; 0x24d2 <main+0xf6>
    251e:	27 c0       	rjmp	.+78     	; 0x256e <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	8e 01       	movw	r16, r28
    2522:	07 5a       	subi	r16, 0xA7	; 167
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	e5 5a       	subi	r30, 0xA5	; 165
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	de 01       	movw	r26, r28
    2544:	ab 5a       	subi	r26, 0xAB	; 171
    2546:	bf 4f       	sbci	r27, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	e7 5a       	subi	r30, 0xA7	; 167
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	fe 01       	movw	r30, r28
    2558:	eb 5a       	subi	r30, 0xAB	; 171
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <main+0x184>
    2564:	fe 01       	movw	r30, r28
    2566:	eb 5a       	subi	r30, 0xAB	; 171
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
	_delay_ms(500);

	MADC_voidInit();
    256e:	0e 94 39 09 	call	0x1272	; 0x1272 <MADC_voidInit>
	MTIMER1_voidInit(FPWM_NON_INVERTING,TOP_FPWM_ICR1,TIMER1_8_PRESCALER);
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	63 e0       	ldi	r22, 0x03	; 3
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000,TOP_CTC_ICR1);
    257c:	80 e2       	ldi	r24, 0x20	; 32
    257e:	9e e4       	ldi	r25, 0x4E	; 78
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 9b 10 	call	0x2136	; 0x2136 <MTIMER1_voidSetTopValue>
	while(1)
	{

		value = MADC_voidGetValue(ADC0);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MADC_voidGetValue>
    258c:	fe 01       	movw	r30, r28
    258e:	e9 59       	subi	r30, 0x99	; 153
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
		MapValue=Mapping(2500,700,940,120,value);
    2596:	fe 01       	movw	r30, r28
    2598:	e9 59       	subi	r30, 0x99	; 153
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	01 90       	ld	r0, Z+
    259e:	f0 81       	ld	r31, Z
    25a0:	e0 2d       	mov	r30, r0
    25a2:	84 ec       	ldi	r24, 0xC4	; 196
    25a4:	99 e0       	ldi	r25, 0x09	; 9
    25a6:	6c eb       	ldi	r22, 0xBC	; 188
    25a8:	72 e0       	ldi	r23, 0x02	; 2
    25aa:	4c ea       	ldi	r20, 0xAC	; 172
    25ac:	53 e0       	ldi	r21, 0x03	; 3
    25ae:	28 e7       	ldi	r18, 0x78	; 120
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8f 01       	movw	r16, r30
    25b4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <Mapping>
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 59       	subi	r30, 0x9B	; 155
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24

		angle=Mapping(180,0,2500,700,MapValue);
    25c2:	fe 01       	movw	r30, r28
    25c4:	eb 59       	subi	r30, 0x9B	; 155
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	01 90       	ld	r0, Z+
    25ca:	f0 81       	ld	r31, Z
    25cc:	e0 2d       	mov	r30, r0
    25ce:	84 eb       	ldi	r24, 0xB4	; 180
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	44 ec       	ldi	r20, 0xC4	; 196
    25d8:	59 e0       	ldi	r21, 0x09	; 9
    25da:	2c eb       	ldi	r18, 0xBC	; 188
    25dc:	32 e0       	ldi	r19, 0x02	; 2
    25de:	8f 01       	movw	r16, r30
    25e0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <Mapping>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 59       	subi	r30, 0x9D	; 157
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		HLCD_voidSendGoTo(0,0);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	0e 94 97 07 	call	0xf2e	; 0xf2e <HLCD_voidSendGoTo>
    25f6:	fe 01       	movw	r30, r28
    25f8:	ef 5a       	subi	r30, 0xAF	; 175
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a0 e2       	ldi	r26, 0x20	; 32
    2602:	b1 e4       	ldi	r27, 0x41	; 65
    2604:	80 83       	st	Z, r24
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	a2 83       	std	Z+2, r26	; 0x02
    260a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260c:	8e 01       	movw	r16, r28
    260e:	03 5b       	subi	r16, 0xB3	; 179
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	ef 5a       	subi	r30, 0xAF	; 175
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a ef       	ldi	r20, 0xFA	; 250
    2626:	54 e4       	ldi	r21, 0x44	; 68
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	80 83       	st	Z, r24
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	a2 83       	std	Z+2, r26	; 0x02
    2638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263a:	fe 01       	movw	r30, r28
    263c:	e3 5b       	subi	r30, 0xB3	; 179
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	44 f4       	brge	.+16     	; 0x2668 <main+0x28c>
		__ticks = 1;
    2658:	fe 01       	movw	r30, r28
    265a:	e5 5b       	subi	r30, 0xB5	; 181
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	64 c0       	rjmp	.+200    	; 0x2730 <main+0x354>
	else if (__tmp > 65535)
    2668:	fe 01       	movw	r30, r28
    266a:	e3 5b       	subi	r30, 0xB3	; 179
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	0c f0       	brlt	.+2      	; 0x2688 <main+0x2ac>
    2686:	43 c0       	rjmp	.+134    	; 0x270e <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	fe 01       	movw	r30, r28
    268a:	ef 5a       	subi	r30, 0xAF	; 175
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8e 01       	movw	r16, r28
    26a8:	05 5b       	subi	r16, 0xB5	; 181
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	1f c0       	rjmp	.+62     	; 0x26fe <main+0x322>
    26c0:	fe 01       	movw	r30, r28
    26c2:	e7 5b       	subi	r30, 0xB7	; 183
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	88 ec       	ldi	r24, 0xC8	; 200
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <main+0x2fc>
    26dc:	fe 01       	movw	r30, r28
    26de:	e7 5b       	subi	r30, 0xB7	; 183
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	de 01       	movw	r26, r28
    26e8:	a5 5b       	subi	r26, 0xB5	; 181
    26ea:	bf 4f       	sbci	r27, 0xFF	; 255
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5b       	subi	r30, 0xB5	; 181
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	9c 93       	st	X, r25
    26fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	fe 01       	movw	r30, r28
    2700:	e5 5b       	subi	r30, 0xB5	; 181
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	d1 f6       	brne	.-76     	; 0x26c0 <main+0x2e4>
    270c:	27 c0       	rjmp	.+78     	; 0x275c <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	8e 01       	movw	r16, r28
    2710:	05 5b       	subi	r16, 0xB5	; 181
    2712:	1f 4f       	sbci	r17, 0xFF	; 255
    2714:	fe 01       	movw	r30, r28
    2716:	e3 5b       	subi	r30, 0xB3	; 179
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	f8 01       	movw	r30, r16
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
    2730:	de 01       	movw	r26, r28
    2732:	a9 5b       	subi	r26, 0xB9	; 185
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e5 5b       	subi	r30, 0xB5	; 181
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	8d 93       	st	X+, r24
    2742:	9c 93       	st	X, r25
    2744:	fe 01       	movw	r30, r28
    2746:	e9 5b       	subi	r30, 0xB9	; 185
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <main+0x372>
    2752:	fe 01       	movw	r30, r28
    2754:	e9 5b       	subi	r30, 0xB9	; 185
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
		_delay_ms(10);
		HLCD_voidSendString("Servo Angle : ");
    275c:	80 e6       	ldi	r24, 0x60	; 96
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 6d 07 	call	0xeda	; 0xeda <HLCD_voidSendString>
    2764:	fe 01       	movw	r30, r28
    2766:	ed 5b       	subi	r30, 0xBD	; 189
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e2       	ldi	r26, 0x20	; 32
    2770:	b1 e4       	ldi	r27, 0x41	; 65
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	8e 01       	movw	r16, r28
    277c:	01 5c       	subi	r16, 0xC1	; 193
    277e:	1f 4f       	sbci	r17, 0xFF	; 255
    2780:	fe 01       	movw	r30, r28
    2782:	ed 5b       	subi	r30, 0xBD	; 189
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a ef       	ldi	r20, 0xFA	; 250
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	f8 01       	movw	r30, r16
    27a0:	80 83       	st	Z, r24
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	a2 83       	std	Z+2, r26	; 0x02
    27a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a8:	fe 01       	movw	r30, r28
    27aa:	ff 96       	adiw	r30, 0x3f	; 63
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <main+0x3f2>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9e af       	std	Y+62, r25	; 0x3e
    27ca:	8d af       	std	Y+61, r24	; 0x3d
    27cc:	46 c0       	rjmp	.+140    	; 0x285a <main+0x47e>
	else if (__tmp > 65535)
    27ce:	fe 01       	movw	r30, r28
    27d0:	ff 96       	adiw	r30, 0x3f	; 63
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	64 f5       	brge	.+88     	; 0x2842 <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 5b       	subi	r30, 0xBD	; 189
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e af       	std	Y+62, r25	; 0x3e
    2816:	8d af       	std	Y+61, r24	; 0x3d
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <main+0x45c>
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9c af       	std	Y+60, r25	; 0x3c
    2820:	8b af       	std	Y+59, r24	; 0x3b
    2822:	8b ad       	ldd	r24, Y+59	; 0x3b
    2824:	9c ad       	ldd	r25, Y+60	; 0x3c
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <main+0x44a>
    282a:	9c af       	std	Y+60, r25	; 0x3c
    282c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2830:	9e ad       	ldd	r25, Y+62	; 0x3e
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9e af       	std	Y+62, r25	; 0x3e
    2836:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2838:	8d ad       	ldd	r24, Y+61	; 0x3d
    283a:	9e ad       	ldd	r25, Y+62	; 0x3e
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f7       	brne	.-38     	; 0x281a <main+0x43e>
    2840:	16 c0       	rjmp	.+44     	; 0x286e <main+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	fe 01       	movw	r30, r28
    2844:	ff 96       	adiw	r30, 0x3f	; 63
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e af       	std	Y+62, r25	; 0x3e
    2858:	8d af       	std	Y+61, r24	; 0x3d
    285a:	8d ad       	ldd	r24, Y+61	; 0x3d
    285c:	9e ad       	ldd	r25, Y+62	; 0x3e
    285e:	9a af       	std	Y+58, r25	; 0x3a
    2860:	89 af       	std	Y+57, r24	; 0x39
    2862:	89 ad       	ldd	r24, Y+57	; 0x39
    2864:	9a ad       	ldd	r25, Y+58	; 0x3a
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <main+0x48a>
    286a:	9a af       	std	Y+58, r25	; 0x3a
    286c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		HLCD_voidSendGoTo(0,13);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	6d e0       	ldi	r22, 0x0D	; 13
    2872:	0e 94 97 07 	call	0xf2e	; 0xf2e <HLCD_voidSendGoTo>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e2       	ldi	r26, 0x20	; 32
    287c:	b1 e4       	ldi	r27, 0x41	; 65
    287e:	8d ab       	std	Y+53, r24	; 0x35
    2880:	9e ab       	std	Y+54, r25	; 0x36
    2882:	af ab       	std	Y+55, r26	; 0x37
    2884:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6d a9       	ldd	r22, Y+53	; 0x35
    2888:	7e a9       	ldd	r23, Y+54	; 0x36
    288a:	8f a9       	ldd	r24, Y+55	; 0x37
    288c:	98 ad       	ldd	r25, Y+56	; 0x38
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	89 ab       	std	Y+49, r24	; 0x31
    28a0:	9a ab       	std	Y+50, r25	; 0x32
    28a2:	ab ab       	std	Y+51, r26	; 0x33
    28a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <main+0x4ec>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <main+0x56a>
	else if (__tmp > 65535)
    28c8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ca:	7a a9       	ldd	r23, Y+50	; 0x32
    28cc:	8b a9       	ldd	r24, Y+51	; 0x33
    28ce:	9c a9       	ldd	r25, Y+52	; 0x34
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <main+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6d a9       	ldd	r22, Y+53	; 0x35
    28e2:	7e a9       	ldd	r23, Y+54	; 0x36
    28e4:	8f a9       	ldd	r24, Y+55	; 0x37
    28e6:	98 ad       	ldd	r25, Y+56	; 0x38
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <main+0x54c>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
    2912:	8d a5       	ldd	r24, Y+45	; 0x2d
    2914:	9e a5       	ldd	r25, Y+46	; 0x2e
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <main+0x53a>
    291a:	9e a7       	std	Y+46, r25	; 0x2e
    291c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <main+0x52e>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <main+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	98 ab       	std	Y+48, r25	; 0x30
    2944:	8f a7       	std	Y+47, r24	; 0x2f
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
    294e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2950:	9c a5       	ldd	r25, Y+44	; 0x2c
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <main+0x576>
    2956:	9c a7       	std	Y+44, r25	; 0x2c
    2958:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		HLCD_voidSendInt(angle);
    295a:	fe 01       	movw	r30, r28
    295c:	ed 59       	subi	r30, 0x9D	; 157
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	cc 01       	movw	r24, r24
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 b2 07 	call	0xf64	; 0xf64 <HLCD_voidSendInt>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a0 e2       	ldi	r26, 0x20	; 32
    2978:	b1 e4       	ldi	r27, 0x41	; 65
    297a:	8f a3       	std	Y+39, r24	; 0x27
    297c:	98 a7       	std	Y+40, r25	; 0x28
    297e:	a9 a7       	std	Y+41, r26	; 0x29
    2980:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2982:	6f a1       	ldd	r22, Y+39	; 0x27
    2984:	78 a5       	ldd	r23, Y+40	; 0x28
    2986:	89 a5       	ldd	r24, Y+41	; 0x29
    2988:	9a a5       	ldd	r25, Y+42	; 0x2a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4a ef       	ldi	r20, 0xFA	; 250
    2990:	54 e4       	ldi	r21, 0x44	; 68
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8b a3       	std	Y+35, r24	; 0x23
    299c:	9c a3       	std	Y+36, r25	; 0x24
    299e:	ad a3       	std	Y+37, r26	; 0x25
    29a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e8       	ldi	r20, 0x80	; 128
    29b0:	5f e3       	ldi	r21, 0x3F	; 63
    29b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	2c f4       	brge	.+10     	; 0x29c4 <main+0x5e8>
		__ticks = 1;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9a a3       	std	Y+34, r25	; 0x22
    29c0:	89 a3       	std	Y+33, r24	; 0x21
    29c2:	3f c0       	rjmp	.+126    	; 0x2a42 <main+0x666>
	else if (__tmp > 65535)
    29c4:	6b a1       	ldd	r22, Y+35	; 0x23
    29c6:	7c a1       	ldd	r23, Y+36	; 0x24
    29c8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ca:	9e a1       	ldd	r25, Y+38	; 0x26
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	3f ef       	ldi	r19, 0xFF	; 255
    29d0:	4f e7       	ldi	r20, 0x7F	; 127
    29d2:	57 e4       	ldi	r21, 0x47	; 71
    29d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d8:	18 16       	cp	r1, r24
    29da:	4c f5       	brge	.+82     	; 0x2a2e <main+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	6f a1       	ldd	r22, Y+39	; 0x27
    29de:	78 a5       	ldd	r23, Y+40	; 0x28
    29e0:	89 a5       	ldd	r24, Y+41	; 0x29
    29e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <main+0x648>
    2a06:	88 ec       	ldi	r24, 0xC8	; 200
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	98 a3       	std	Y+32, r25	; 0x20
    2a0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a10:	98 a1       	ldd	r25, Y+32	; 0x20
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <main+0x636>
    2a16:	98 a3       	std	Y+32, r25	; 0x20
    2a18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9a a3       	std	Y+34, r25	; 0x22
    2a22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a24:	89 a1       	ldd	r24, Y+33	; 0x21
    2a26:	9a a1       	ldd	r25, Y+34	; 0x22
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	69 f7       	brne	.-38     	; 0x2a06 <main+0x62a>
    2a2c:	14 c0       	rjmp	.+40     	; 0x2a56 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a30:	7c a1       	ldd	r23, Y+36	; 0x24
    2a32:	8d a1       	ldd	r24, Y+37	; 0x25
    2a34:	9e a1       	ldd	r25, Y+38	; 0x26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	9e 8f       	std	Y+30, r25	; 0x1e
    2a48:	8d 8f       	std	Y+29, r24	; 0x1d
    2a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <main+0x672>
    2a52:	9e 8f       	std	Y+30, r25	; 0x1e
    2a54:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		HLCD_voidSendString("         ");
    2a56:	8f e6       	ldi	r24, 0x6F	; 111
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 6d 07 	call	0xeda	; 0xeda <HLCD_voidSendString>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e2       	ldi	r26, 0x20	; 32
    2a64:	b1 e4       	ldi	r27, 0x41	; 65
    2a66:	89 8f       	std	Y+25, r24	; 0x19
    2a68:	9a 8f       	std	Y+26, r25	; 0x1a
    2a6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a ef       	ldi	r20, 0xFA	; 250
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8d 8b       	std	Y+21, r24	; 0x15
    2a88:	9e 8b       	std	Y+22, r25	; 0x16
    2a8a:	af 8b       	std	Y+23, r26	; 0x17
    2a8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a90:	7e 89       	ldd	r23, Y+22	; 0x16
    2a92:	8f 89       	ldd	r24, Y+23	; 0x17
    2a94:	98 8d       	ldd	r25, Y+24	; 0x18
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <main+0x6d4>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <main+0x752>
	else if (__tmp > 65535)
    2ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <main+0x73e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c 8b       	std	Y+20, r25	; 0x14
    2aee:	8b 8b       	std	Y+19, r24	; 0x13
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <main+0x734>
    2af2:	88 ec       	ldi	r24, 0xC8	; 200
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9a 8b       	std	Y+18, r25	; 0x12
    2af8:	89 8b       	std	Y+17, r24	; 0x11
    2afa:	89 89       	ldd	r24, Y+17	; 0x11
    2afc:	9a 89       	ldd	r25, Y+18	; 0x12
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <main+0x722>
    2b02:	9a 8b       	std	Y+18, r25	; 0x12
    2b04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9c 8b       	std	Y+20, r25	; 0x14
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <main+0x716>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <main+0x766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b20:	98 8d       	ldd	r25, Y+24	; 0x18
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9c 8b       	std	Y+20, r25	; 0x14
    2b2c:	8b 8b       	std	Y+19, r24	; 0x13
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	98 8b       	std	Y+16, r25	; 0x10
    2b34:	8f 87       	std	Y+15, r24	; 0x0f
    2b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b38:	98 89       	ldd	r25, Y+16	; 0x10
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <main+0x75e>
    2b3e:	98 8b       	std	Y+16, r25	; 0x10
    2b40:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		MTIMER1_voidSetDutyCycle(MapValue);
    2b42:	fe 01       	movw	r30, r28
    2b44:	eb 59       	subi	r30, 0x9B	; 155
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <MTIMER1_voidSetDutyCycle>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	aa ef       	ldi	r26, 0xFA	; 250
    2b56:	b3 e4       	ldi	r27, 0x43	; 67
    2b58:	8b 87       	std	Y+11, r24	; 0x0b
    2b5a:	9c 87       	std	Y+12, r25	; 0x0c
    2b5c:	ad 87       	std	Y+13, r26	; 0x0d
    2b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8f 83       	std	Y+7, r24	; 0x07
    2b7a:	98 87       	std	Y+8, r25	; 0x08
    2b7c:	a9 87       	std	Y+9, r26	; 0x09
    2b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <main+0x7c6>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <main+0x844>
	else if (__tmp > 65535)
    2ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba4:	78 85       	ldd	r23, Y+8	; 0x08
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <main+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <main+0x826>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9c 83       	std	Y+4, r25	; 0x04
    2bea:	8b 83       	std	Y+3, r24	; 0x03
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <main+0x814>
    2bf4:	9c 83       	std	Y+4, r25	; 0x04
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <main+0x808>
    2c0a:	bd cc       	rjmp	.-1670   	; 0x2586 <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <main+0x850>
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	a8 cc       	rjmp	.-1712   	; 0x2586 <main+0x1aa>

00002c36 <Mapping>:
}



u16 Mapping(u16 X_MAX,u16 X_MIN,u16 Y_MAX,u16 Y_MIN,u16 Y)
{
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	2c 97       	sbiw	r28, 0x0c	; 12
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	7e 83       	std	Y+6, r23	; 0x06
    2c58:	6d 83       	std	Y+5, r22	; 0x05
    2c5a:	58 87       	std	Y+8, r21	; 0x08
    2c5c:	4f 83       	std	Y+7, r20	; 0x07
    2c5e:	3a 87       	std	Y+10, r19	; 0x0a
    2c60:	29 87       	std	Y+9, r18	; 0x09
    2c62:	1c 87       	std	Y+12, r17	; 0x0c
    2c64:	0b 87       	std	Y+11, r16	; 0x0b
	u16 X;
	X = ( (  ((u32) (X_MAX - X_MIN) * (Y-Y_MIN) )/ (Y_MAX-Y_MIN) ) + X_MIN);
    2c66:	2b 81       	ldd	r18, Y+3	; 0x03
    2c68:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	a9 01       	movw	r20, r18
    2c70:	48 1b       	sub	r20, r24
    2c72:	59 0b       	sbc	r21, r25
    2c74:	ca 01       	movw	r24, r20
    2c76:	7c 01       	movw	r14, r24
    2c78:	00 e0       	ldi	r16, 0x00	; 0
    2c7a:	10 e0       	ldi	r17, 0x00	; 0
    2c7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	a9 01       	movw	r20, r18
    2c86:	48 1b       	sub	r20, r24
    2c88:	59 0b       	sbc	r21, r25
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	c8 01       	movw	r24, r16
    2c94:	b7 01       	movw	r22, r14
    2c96:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsi3>
    2c9a:	7b 01       	movw	r14, r22
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca0:	38 85       	ldd	r19, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	48 1b       	sub	r20, r24
    2caa:	59 0b       	sbc	r21, r25
    2cac:	ca 01       	movw	r24, r20
    2cae:	9c 01       	movw	r18, r24
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	b7 01       	movw	r22, r14
    2cb8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    2cbc:	da 01       	movw	r26, r20
    2cbe:	c9 01       	movw	r24, r18
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	82 0f       	add	r24, r18
    2cc8:	93 1f       	adc	r25, r19
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01

	return X ;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cd2:	2c 96       	adiw	r28, 0x0c	; 12
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	1f 91       	pop	r17
    2ce4:	0f 91       	pop	r16
    2ce6:	ff 90       	pop	r15
    2ce8:	ef 90       	pop	r14
    2cea:	08 95       	ret

00002cec <__mulsi3>:
    2cec:	62 9f       	mul	r22, r18
    2cee:	d0 01       	movw	r26, r0
    2cf0:	73 9f       	mul	r23, r19
    2cf2:	f0 01       	movw	r30, r0
    2cf4:	82 9f       	mul	r24, r18
    2cf6:	e0 0d       	add	r30, r0
    2cf8:	f1 1d       	adc	r31, r1
    2cfa:	64 9f       	mul	r22, r20
    2cfc:	e0 0d       	add	r30, r0
    2cfe:	f1 1d       	adc	r31, r1
    2d00:	92 9f       	mul	r25, r18
    2d02:	f0 0d       	add	r31, r0
    2d04:	83 9f       	mul	r24, r19
    2d06:	f0 0d       	add	r31, r0
    2d08:	74 9f       	mul	r23, r20
    2d0a:	f0 0d       	add	r31, r0
    2d0c:	65 9f       	mul	r22, r21
    2d0e:	f0 0d       	add	r31, r0
    2d10:	99 27       	eor	r25, r25
    2d12:	72 9f       	mul	r23, r18
    2d14:	b0 0d       	add	r27, r0
    2d16:	e1 1d       	adc	r30, r1
    2d18:	f9 1f       	adc	r31, r25
    2d1a:	63 9f       	mul	r22, r19
    2d1c:	b0 0d       	add	r27, r0
    2d1e:	e1 1d       	adc	r30, r1
    2d20:	f9 1f       	adc	r31, r25
    2d22:	bd 01       	movw	r22, r26
    2d24:	cf 01       	movw	r24, r30
    2d26:	11 24       	eor	r1, r1
    2d28:	08 95       	ret

00002d2a <__udivmodsi4>:
    2d2a:	a1 e2       	ldi	r26, 0x21	; 33
    2d2c:	1a 2e       	mov	r1, r26
    2d2e:	aa 1b       	sub	r26, r26
    2d30:	bb 1b       	sub	r27, r27
    2d32:	fd 01       	movw	r30, r26
    2d34:	0d c0       	rjmp	.+26     	; 0x2d50 <__udivmodsi4_ep>

00002d36 <__udivmodsi4_loop>:
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	ee 1f       	adc	r30, r30
    2d3c:	ff 1f       	adc	r31, r31
    2d3e:	a2 17       	cp	r26, r18
    2d40:	b3 07       	cpc	r27, r19
    2d42:	e4 07       	cpc	r30, r20
    2d44:	f5 07       	cpc	r31, r21
    2d46:	20 f0       	brcs	.+8      	; 0x2d50 <__udivmodsi4_ep>
    2d48:	a2 1b       	sub	r26, r18
    2d4a:	b3 0b       	sbc	r27, r19
    2d4c:	e4 0b       	sbc	r30, r20
    2d4e:	f5 0b       	sbc	r31, r21

00002d50 <__udivmodsi4_ep>:
    2d50:	66 1f       	adc	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	88 1f       	adc	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	1a 94       	dec	r1
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <__udivmodsi4_loop>
    2d5c:	60 95       	com	r22
    2d5e:	70 95       	com	r23
    2d60:	80 95       	com	r24
    2d62:	90 95       	com	r25
    2d64:	9b 01       	movw	r18, r22
    2d66:	ac 01       	movw	r20, r24
    2d68:	bd 01       	movw	r22, r26
    2d6a:	cf 01       	movw	r24, r30
    2d6c:	08 95       	ret

00002d6e <__divmodsi4>:
    2d6e:	97 fb       	bst	r25, 7
    2d70:	09 2e       	mov	r0, r25
    2d72:	05 26       	eor	r0, r21
    2d74:	0e d0       	rcall	.+28     	; 0x2d92 <__divmodsi4_neg1>
    2d76:	57 fd       	sbrc	r21, 7
    2d78:	04 d0       	rcall	.+8      	; 0x2d82 <__divmodsi4_neg2>
    2d7a:	d7 df       	rcall	.-82     	; 0x2d2a <__udivmodsi4>
    2d7c:	0a d0       	rcall	.+20     	; 0x2d92 <__divmodsi4_neg1>
    2d7e:	00 1c       	adc	r0, r0
    2d80:	38 f4       	brcc	.+14     	; 0x2d90 <__divmodsi4_exit>

00002d82 <__divmodsi4_neg2>:
    2d82:	50 95       	com	r21
    2d84:	40 95       	com	r20
    2d86:	30 95       	com	r19
    2d88:	21 95       	neg	r18
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d8e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d90 <__divmodsi4_exit>:
    2d90:	08 95       	ret

00002d92 <__divmodsi4_neg1>:
    2d92:	f6 f7       	brtc	.-4      	; 0x2d90 <__divmodsi4_exit>
    2d94:	90 95       	com	r25
    2d96:	80 95       	com	r24
    2d98:	70 95       	com	r23
    2d9a:	61 95       	neg	r22
    2d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2da0:	9f 4f       	sbci	r25, 0xFF	; 255
    2da2:	08 95       	ret

00002da4 <__prologue_saves__>:
    2da4:	2f 92       	push	r2
    2da6:	3f 92       	push	r3
    2da8:	4f 92       	push	r4
    2daa:	5f 92       	push	r5
    2dac:	6f 92       	push	r6
    2dae:	7f 92       	push	r7
    2db0:	8f 92       	push	r8
    2db2:	9f 92       	push	r9
    2db4:	af 92       	push	r10
    2db6:	bf 92       	push	r11
    2db8:	cf 92       	push	r12
    2dba:	df 92       	push	r13
    2dbc:	ef 92       	push	r14
    2dbe:	ff 92       	push	r15
    2dc0:	0f 93       	push	r16
    2dc2:	1f 93       	push	r17
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	ca 1b       	sub	r28, r26
    2dce:	db 0b       	sbc	r29, r27
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	09 94       	ijmp

00002ddc <__epilogue_restores__>:
    2ddc:	2a 88       	ldd	r2, Y+18	; 0x12
    2dde:	39 88       	ldd	r3, Y+17	; 0x11
    2de0:	48 88       	ldd	r4, Y+16	; 0x10
    2de2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dee:	b9 84       	ldd	r11, Y+9	; 0x09
    2df0:	c8 84       	ldd	r12, Y+8	; 0x08
    2df2:	df 80       	ldd	r13, Y+7	; 0x07
    2df4:	ee 80       	ldd	r14, Y+6	; 0x06
    2df6:	fd 80       	ldd	r15, Y+5	; 0x05
    2df8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dfa:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfe:	b9 81       	ldd	r27, Y+1	; 0x01
    2e00:	ce 0f       	add	r28, r30
    2e02:	d1 1d       	adc	r29, r1
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	ed 01       	movw	r28, r26
    2e10:	08 95       	ret

00002e12 <_exit>:
    2e12:	f8 94       	cli

00002e14 <__stop_program>:
    2e14:	ff cf       	rjmp	.-2      	; 0x2e14 <__stop_program>
