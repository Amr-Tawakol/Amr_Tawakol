
final_projectAVR_slave_iti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003bf8  00003c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800080  00800080  00003cac  2**0
                  ALLOC
  3 .stab         000036f0  00000000  00000000  00003cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001746  00000000  00000000  0000739c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a9db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d22f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_1>
       8:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_2>
       c:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_3>
      10:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_4>
      14:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__vector_5>
      18:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_6>
      1c:	0c 94 35 12 	jmp	0x246a	; 0x246a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_10>
      2c:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 14 	call	0x286a	; 0x286a <main>
      8a:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_voidsendcmd>:
#include "HLCD_config.h"



void HLCD_voidsendcmd(u8 copy_u8cmd)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_RS , DIO_LOW); //Clr RS to send Command
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_RW , DIO_LOW); //Clr r/w to write
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
	MDIO_u8SetPortValue(LCD_PORT_DATA , copy_u8cmd); //send data
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 2d 0b 	call	0x165a	; 0x165a <MDIO_u8SetPortValue>
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_EN , DIO_HIGH);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	63 e0       	ldi	r22, 0x03	; 3
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <HLCD_voidsendcmd+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <HLCD_voidsendcmd+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <HLCD_voidsendcmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <HLCD_voidsendcmd+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <HLCD_voidsendcmd+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <HLCD_voidsendcmd+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <HLCD_voidsendcmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <HLCD_voidsendcmd+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_EN , DIO_LOW);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	63 e0       	ldi	r22, 0x03	; 3
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>

}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <HLCD_voidsenddata>:
void HLCD_voidsenddata(u8 copy_u8data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_RS , DIO_HIGH);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_RW , DIO_LOW);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
	MDIO_u8SetPortValue(LCD_PORT_DATA , copy_u8data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 2d 0b 	call	0x165a	; 0x165a <MDIO_u8SetPortValue>
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_EN , DIO_HIGH);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <HLCD_voidsenddata+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <HLCD_voidsenddata+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <HLCD_voidsenddata+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <HLCD_voidsenddata+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <HLCD_voidsenddata+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <HLCD_voidsenddata+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <HLCD_voidsenddata+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <HLCD_voidsenddata+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_PORT_CTRL ,LCD_EN , DIO_LOW);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	63 e0       	ldi	r22, 0x03	; 3
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <HLCD_voidInt>:
void HLCD_voidInt(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <HLCD_voidInt+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <HLCD_voidInt+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <HLCD_voidInt+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <HLCD_voidInt+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <HLCD_voidInt+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <HLCD_voidInt+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <HLCD_voidInt+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <HLCD_voidInt+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidsendcmd(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidsendcmd>
	HLCD_voidsendcmd(0b00001111);
     ebc:	8f e0       	ldi	r24, 0x0F	; 15
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidsendcmd>
	HLCD_voidsendcmd(0b00000001);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidsendcmd>
}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8  Local_u8Counter=0;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter]!= '\0'){
		HLCD_voidsenddata(Copy_pcString[Local_u8Counter]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidsenddata>
		Local_u8Counter++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidsendcmd(0b00000001);
}
void CLCD_voidSendString(const char* Copy_pcString)
{
	u8  Local_u8Counter=0;
	while (Copy_pcString[Local_u8Counter]!= '\0'){
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_voidSendString+0x14>
		HLCD_voidsenddata(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_voidGoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address ;
	if (Copy_u8XPos==0){
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 23       	and	r24, r24
     f40:	19 f4       	brne	.+6      	; 0xf48 <CLCD_voidGoToXY+0x1c>
		Local_u8Address=Copy_u8YPos;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8XPos==1){
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoToXY+0x28>
		Local_u8Address=Copy_u8YPos+0x40;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_voidsendcmd(Local_u8Address+128);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 58       	subi	r24, 0x80	; 128
     f58:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidsendcmd>
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos ){
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	27 97       	sbiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	6d 83       	std	Y+5, r22	; 0x05
     f82:	4e 83       	std	Y+6, r20	; 0x06
     f84:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddeess=0,Local_u8Iterator;
     f86:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8CGRAMAddeess=Copy_u8PatternNumber*8;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_voidsendcmd(Local_u8CGRAMAddeess+64);
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 5c       	subi	r24, 0xC0	; 192
     fa0:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidsendcmd>
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <CLCD_voidWriteSpecialCharacter+0x5c>
		HLCD_voidsenddata(Copy_pu8Pattern[Local_u8Iterator]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidsenddata>
}
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos ){
	u8 Local_u8CGRAMAddeess=0,Local_u8Iterator;
	Local_u8CGRAMAddeess=Copy_u8PatternNumber*8;
	HLCD_voidsendcmd(Local_u8CGRAMAddeess+64);
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	78 f3       	brcs	.-34     	; 0xfa8 <CLCD_voidWriteSpecialCharacter+0x40>
		HLCD_voidsenddata(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY( Copy_u8XPos,Copy_u8YPos);
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
	HLCD_voidsenddata(Copy_u8PatternNumber);
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidsenddata>
}
     fd8:	27 96       	adiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <HSSD_voidEnable>:
#include "HSSD_config.h"
#include "HSSD_interface.h"
#include "HSSD_private.h"

void HSSD_voidEnable(u8 Copy_EnablePort,u8 Copy_EnablePin)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <HSSD_voidEnable+0x6>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	6a 83       	std	Y+2, r22	; 0x02
#if SSD_COMMON_TYPE == SSD_COMMON_KATHODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_LOW);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	MDIO_voidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_HIGH);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	6a 81       	ldd	r22, Y+2	; 0x02
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <HSSD_voidDisable>:
void HSSD_voidDisable(u8 Copy_EnablePort,u8 Copy_EnablePin)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <HSSD_voidDisable+0x6>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	6a 83       	std	Y+2, r22	; 0x02
#if SSD_COMMON_TYPE == SSD_COMMON_KATHODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_HIGH);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	MDIO_voidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_LOW);
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	6a 81       	ldd	r22, Y+2	; 0x02
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <HSSD_voidSendNumber>:
void HSSD_voidSendNumber(u8 Copy_u8Number)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <HSSD_voidSendNumber+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <HSSD_voidSendNumber+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8a 83       	std	Y+2, r24	; 0x02
	case 8 : Local_u8Number =0b1111111 ; break ;
	case 9 : Local_u8Number =0b1101111 ; break ;
	}
	MDIO_VoidSetPortValue(SSD_PORT,Local_u8Number);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	switch(Copy_u8Number)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <HSSD_voidSendNumber+0x24>
    1050:	4b c0       	rjmp	.+150    	; 0x10e8 <HSSD_voidSendNumber+0xba>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	25 30       	cpi	r18, 0x05	; 5
    1058:	31 05       	cpc	r19, r1
    105a:	d4 f4       	brge	.+52     	; 0x1090 <HSSD_voidSendNumber+0x62>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	c1 f1       	breq	.+112    	; 0x10d6 <HSSD_voidSendNumber+0xa8>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <HSSD_voidSendNumber+0x4c>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	61 f1       	breq	.+88     	; 0x10d0 <HSSD_voidSendNumber+0xa2>
    1078:	48 c0       	rjmp	.+144    	; 0x110a <HSSD_voidSendNumber+0xdc>
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	61 f1       	breq	.+88     	; 0x10dc <HSSD_voidSendNumber+0xae>
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	51 f1       	breq	.+84     	; 0x10e2 <HSSD_voidSendNumber+0xb4>
    108e:	3d c0       	rjmp	.+122    	; 0x110a <HSSD_voidSendNumber+0xdc>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	27 30       	cpi	r18, 0x07	; 7
    1096:	31 05       	cpc	r19, r1
    1098:	81 f1       	breq	.+96     	; 0x10fa <HSSD_voidSendNumber+0xcc>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	91 05       	cpc	r25, r1
    10a2:	5c f4       	brge	.+22     	; 0x10ba <HSSD_voidSendNumber+0x8c>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	25 30       	cpi	r18, 0x05	; 5
    10aa:	31 05       	cpc	r19, r1
    10ac:	01 f1       	breq	.+64     	; 0x10ee <HSSD_voidSendNumber+0xc0>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	86 30       	cpi	r24, 0x06	; 6
    10b4:	91 05       	cpc	r25, r1
    10b6:	f1 f0       	breq	.+60     	; 0x10f4 <HSSD_voidSendNumber+0xc6>
    10b8:	28 c0       	rjmp	.+80     	; 0x110a <HSSD_voidSendNumber+0xdc>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	28 30       	cpi	r18, 0x08	; 8
    10c0:	31 05       	cpc	r19, r1
    10c2:	f1 f0       	breq	.+60     	; 0x1100 <HSSD_voidSendNumber+0xd2>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	89 30       	cpi	r24, 0x09	; 9
    10ca:	91 05       	cpc	r25, r1
    10cc:	e1 f0       	breq	.+56     	; 0x1106 <HSSD_voidSendNumber+0xd8>
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <HSSD_voidSendNumber+0xdc>
	{
	case 0 : Local_u8Number =(0b0111111) ; break ;
    10d0:	8f e3       	ldi	r24, 0x3F	; 63
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	1a c0       	rjmp	.+52     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 1 : Local_u8Number =(0b0000110) ; break ;
    10d6:	86 e0       	ldi	r24, 0x06	; 6
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	17 c0       	rjmp	.+46     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 2 : Local_u8Number =(0b1011011) ; break ;
    10dc:	8b e5       	ldi	r24, 0x5B	; 91
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 3 : Local_u8Number =(0b1001111) ; break ;
    10e2:	8f e4       	ldi	r24, 0x4F	; 79
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 4 : Local_u8Number =(0b1100110) ; break ;
    10e8:	86 e6       	ldi	r24, 0x66	; 102
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 5 : Local_u8Number =(0b1101101) ; break ;
    10ee:	8d e6       	ldi	r24, 0x6D	; 109
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 6 : Local_u8Number =(0b1111101) ; break ;
    10f4:	8d e7       	ldi	r24, 0x7D	; 125
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 7 : Local_u8Number =(0b0000111) ; break ;
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 8 : Local_u8Number =(0b1111111) ; break ;
    1100:	8f e7       	ldi	r24, 0x7F	; 127
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	02 c0       	rjmp	.+4      	; 0x110a <HSSD_voidSendNumber+0xdc>
	case 9 : Local_u8Number =(0b1101111) ; break ;
    1106:	8f e6       	ldi	r24, 0x6F	; 111
    1108:	89 83       	std	Y+1, r24	; 0x01
	}
	MDIO_u8SetPortValue(SSD_PORT,~(Local_u8Number));
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	98 2f       	mov	r25, r24
    110e:	90 95       	com	r25
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	69 2f       	mov	r22, r25
    1114:	0e 94 2d 0b 	call	0x165a	; 0x165a <MDIO_u8SetPortValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <KPD_u8GetPressedKey>:
#include "ITI_KPD_interface.h"
#include "ITI_KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <KPD_u8GetPressedKey+0x6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <KPD_u8GetPressedKey+0x8>
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62

	u8 LOCAL_u8KeyPressed=NKP , LOCAL_u8C_Indix , LOCAL_u8R_Indix ,LOCAL_u8PinState ;
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	8b 83       	std	Y+3, r24	; 0x03
	static u8 LOCAL_u8KPDarr[R_num][C_num]=KPD_Val;
	static u8 LOCAL_u8KPDColumnArr[C_num]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
	static u8 LOCAL_u8KPDRowArr[R_num]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};

	for(LOCAL_u8C_Indix = 0; LOCAL_u8C_Indix < C_num; LOCAL_u8C_Indix++)
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	5e c0       	rjmp	.+188    	; 0x11f8 <KPD_u8GetPressedKey+0xd2>
	{
		MDIO_voidSetPinValue(KPD_PORT,LOCAL_u8KPDColumnArr[LOCAL_u8C_Indix], DIO_LOW);
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	fc 01       	movw	r30, r24
    1144:	e4 59       	subi	r30, 0x94	; 148
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	90 81       	ld	r25, Z
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	69 2f       	mov	r22, r25
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
		for(LOCAL_u8R_Indix = 0; LOCAL_u8R_Indix < R_num; LOCAL_u8R_Indix++)
    1154:	19 82       	std	Y+1, r1	; 0x01
    1156:	3d c0       	rjmp	.+122    	; 0x11d2 <KPD_u8GetPressedKey+0xac>
		{
			MDIO_Error_State_tGetPinValue(KPD_PORT,LOCAL_u8KPDRowArr[LOCAL_u8R_Indix],&LOCAL_u8PinState);
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	fc 01       	movw	r30, r24
    1160:	e8 59       	subi	r30, 0x98	; 152
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	90 81       	ld	r25, Z
    1166:	9e 01       	movw	r18, r28
    1168:	2c 5f       	subi	r18, 0xFC	; 252
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	69 2f       	mov	r22, r25
    1170:	a9 01       	movw	r20, r18
    1172:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <MDIO_Error_State_tGetPinValue>
			if(LOCAL_u8PinState==DIO_LOW)
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	88 23       	and	r24, r24
    117a:	41 f5       	brne	.+80     	; 0x11cc <KPD_u8GetPressedKey+0xa6>
			{
				LOCAL_u8KeyPressed=LOCAL_u8KPDarr[LOCAL_u8R_Indix][LOCAL_u8C_Indix];
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	48 2f       	mov	r20, r24
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	ca 01       	movw	r24, r20
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	82 0f       	add	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	fc 01       	movw	r30, r24
    1198:	e0 59       	subi	r30, 0x90	; 144
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <KPD_u8GetPressedKey+0x9a>
				while(LOCAL_u8PinState==DIO_LOW)
				{
					MDIO_Error_State_tGetPinValue(KPD_PORT,LOCAL_u8KPDRowArr[LOCAL_u8R_Indix],&LOCAL_u8PinState);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	e8 59       	subi	r30, 0x98	; 152
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	90 81       	ld	r25, Z
    11b0:	9e 01       	movw	r18, r28
    11b2:	2c 5f       	subi	r18, 0xFC	; 252
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	69 2f       	mov	r22, r25
    11ba:	a9 01       	movw	r20, r18
    11bc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <MDIO_Error_State_tGetPinValue>
		{
			MDIO_Error_State_tGetPinValue(KPD_PORT,LOCAL_u8KPDRowArr[LOCAL_u8R_Indix],&LOCAL_u8PinState);
			if(LOCAL_u8PinState==DIO_LOW)
			{
				LOCAL_u8KeyPressed=LOCAL_u8KPDarr[LOCAL_u8R_Indix][LOCAL_u8C_Indix];
				while(LOCAL_u8PinState==DIO_LOW)
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	88 23       	and	r24, r24
    11c4:	71 f3       	breq	.-36     	; 0x11a2 <KPD_u8GetPressedKey+0x7c>
				{
					MDIO_Error_State_tGetPinValue(KPD_PORT,LOCAL_u8KPDRowArr[LOCAL_u8R_Indix],&LOCAL_u8PinState);
				}
				return LOCAL_u8KeyPressed;
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	1c c0       	rjmp	.+56     	; 0x1204 <KPD_u8GetPressedKey+0xde>
	static u8 LOCAL_u8KPDRowArr[R_num]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};

	for(LOCAL_u8C_Indix = 0; LOCAL_u8C_Indix < C_num; LOCAL_u8C_Indix++)
	{
		MDIO_voidSetPinValue(KPD_PORT,LOCAL_u8KPDColumnArr[LOCAL_u8C_Indix], DIO_LOW);
		for(LOCAL_u8R_Indix = 0; LOCAL_u8R_Indix < R_num; LOCAL_u8R_Indix++)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	08 f4       	brcc	.+2      	; 0x11da <KPD_u8GetPressedKey+0xb4>
    11d8:	bf cf       	rjmp	.-130    	; 0x1158 <KPD_u8GetPressedKey+0x32>
					MDIO_Error_State_tGetPinValue(KPD_PORT,LOCAL_u8KPDRowArr[LOCAL_u8R_Indix],&LOCAL_u8PinState);
				}
				return LOCAL_u8KeyPressed;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT,LOCAL_u8KPDColumnArr[LOCAL_u8C_Indix], DIO_HIGH);
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	fc 01       	movw	r30, r24
    11e2:	e4 59       	subi	r30, 0x94	; 148
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	90 81       	ld	r25, Z
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	69 2f       	mov	r22, r25
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
	u8 LOCAL_u8KeyPressed=NKP , LOCAL_u8C_Indix , LOCAL_u8R_Indix ,LOCAL_u8PinState ;
	static u8 LOCAL_u8KPDarr[R_num][C_num]=KPD_Val;
	static u8 LOCAL_u8KPDColumnArr[C_num]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
	static u8 LOCAL_u8KPDRowArr[R_num]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};

	for(LOCAL_u8C_Indix = 0; LOCAL_u8C_Indix < C_num; LOCAL_u8C_Indix++)
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <KPD_u8GetPressedKey+0xda>
    11fe:	9e cf       	rjmp	.-196    	; 0x113c <KPD_u8GetPressedKey+0x16>
		}
		MDIO_voidSetPinValue(KPD_PORT,LOCAL_u8KPDColumnArr[LOCAL_u8C_Indix], DIO_HIGH);

	}

	return LOCAL_u8KeyPressed;
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <MDIO_voidSetPinDirection>:
#include "MDIO_config.h"



Error_State_t MDIO_voidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Mode)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	28 97       	sbiw	r28, 0x08	; 8
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Status=Return_OK;
    1230:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Mode == DIO_INPUT)
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	09 f0       	breq	.+2      	; 0x123a <MDIO_voidSetPinDirection+0x24>
    1238:	7b c0       	rjmp	.+246    	; 0x1330 <MDIO_voidSetPinDirection+0x11a>
	{
		switch(Copy_u8Port)
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	38 87       	std	Y+8, r19	; 0x08
    1242:	2f 83       	std	Y+7, r18	; 0x07
    1244:	8f 81       	ldd	r24, Y+7	; 0x07
    1246:	98 85       	ldd	r25, Y+8	; 0x08
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	61 f1       	breq	.+88     	; 0x12a6 <MDIO_voidSetPinDirection+0x90>
    124e:	2f 81       	ldd	r18, Y+7	; 0x07
    1250:	38 85       	ldd	r19, Y+8	; 0x08
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <MDIO_voidSetPinDirection+0x4c>
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f0       	breq	.+26     	; 0x127a <MDIO_voidSetPinDirection+0x64>
    1260:	64 c0       	rjmp	.+200    	; 0x132a <MDIO_voidSetPinDirection+0x114>
    1262:	2f 81       	ldd	r18, Y+7	; 0x07
    1264:	38 85       	ldd	r19, Y+8	; 0x08
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	99 f1       	breq	.+102    	; 0x12d2 <MDIO_voidSetPinDirection+0xbc>
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	98 85       	ldd	r25, Y+8	; 0x08
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <MDIO_voidSetPinDirection+0x62>
    1276:	43 c0       	rjmp	.+134    	; 0x12fe <MDIO_voidSetPinDirection+0xe8>
    1278:	58 c0       	rjmp	.+176    	; 0x132a <MDIO_voidSetPinDirection+0x114>
		{
		case DIO_PORTA : CLR_BIT(DDRA, Copy_u8Pin);Status=Return_OK; break;
    127a:	aa e3       	ldi	r26, 0x3A	; 58
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MDIO_voidSetPinDirection+0x82>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MDIO_voidSetPinDirection+0x7e>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	19 82       	std	Y+1, r1	; 0x01
    12a4:	bf c0       	rjmp	.+382    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTB : CLR_BIT(DDRB, Copy_u8Pin);Status=Return_OK; break;
    12a6:	a7 e3       	ldi	r26, 0x37	; 55
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <MDIO_voidSetPinDirection+0xae>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <MDIO_voidSetPinDirection+0xaa>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	19 82       	std	Y+1, r1	; 0x01
    12d0:	a9 c0       	rjmp	.+338    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTC : CLR_BIT(DDRC, Copy_u8Pin);Status=Return_OK; break;
    12d2:	a4 e3       	ldi	r26, 0x34	; 52
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e4 e3       	ldi	r30, 0x34	; 52
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <MDIO_voidSetPinDirection+0xda>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <MDIO_voidSetPinDirection+0xd6>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	19 82       	std	Y+1, r1	; 0x01
    12fc:	93 c0       	rjmp	.+294    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTD : CLR_BIT(DDRD, Copy_u8Pin);Status=Return_OK; break;
    12fe:	a1 e3       	ldi	r26, 0x31	; 49
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e1 e3       	ldi	r30, 0x31	; 49
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <MDIO_voidSetPinDirection+0x106>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <MDIO_voidSetPinDirection+0x102>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	19 82       	std	Y+1, r1	; 0x01
    1328:	7d c0       	rjmp	.+250    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		default:Status=Return_Nok; break;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	7a c0       	rjmp	.+244    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>

		}
	}
	else if(Copy_u8Mode == DIO_OUTPUT)
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f0       	breq	.+2      	; 0x1338 <MDIO_voidSetPinDirection+0x122>
    1336:	76 c0       	rjmp	.+236    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
	{
		switch(Copy_u8Port)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3e 83       	std	Y+6, r19	; 0x06
    1340:	2d 83       	std	Y+5, r18	; 0x05
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	59 f1       	breq	.+86     	; 0x13a2 <MDIO_voidSetPinDirection+0x18c>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <MDIO_voidSetPinDirection+0x14a>
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f0       	breq	.+26     	; 0x1378 <MDIO_voidSetPinDirection+0x162>
    135e:	60 c0       	rjmp	.+192    	; 0x1420 <MDIO_voidSetPinDirection+0x20a>
    1360:	2d 81       	ldd	r18, Y+5	; 0x05
    1362:	3e 81       	ldd	r19, Y+6	; 0x06
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	89 f1       	breq	.+98     	; 0x13cc <MDIO_voidSetPinDirection+0x1b6>
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <MDIO_voidSetPinDirection+0x160>
    1374:	40 c0       	rjmp	.+128    	; 0x13f6 <MDIO_voidSetPinDirection+0x1e0>
    1376:	54 c0       	rjmp	.+168    	; 0x1420 <MDIO_voidSetPinDirection+0x20a>
		{
		case DIO_PORTA : SET_BIT(DDRA, Copy_u8Pin);Status=Return_OK; break;
    1378:	aa e3       	ldi	r26, 0x3A	; 58
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ea e3       	ldi	r30, 0x3A	; 58
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <MDIO_voidSetPinDirection+0x180>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <MDIO_voidSetPinDirection+0x17c>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	41 c0       	rjmp	.+130    	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTB : SET_BIT(DDRB, Copy_u8Pin);Status=Return_OK; break;
    13a2:	a7 e3       	ldi	r26, 0x37	; 55
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <MDIO_voidSetPinDirection+0x1aa>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <MDIO_voidSetPinDirection+0x1a6>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	2c c0       	rjmp	.+88     	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTC : SET_BIT(DDRC, Copy_u8Pin);Status=Return_OK; break;
    13cc:	a4 e3       	ldi	r26, 0x34	; 52
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e4 e3       	ldi	r30, 0x34	; 52
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <MDIO_voidSetPinDirection+0x1d4>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <MDIO_voidSetPinDirection+0x1d0>
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	19 82       	std	Y+1, r1	; 0x01
    13f4:	17 c0       	rjmp	.+46     	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		case DIO_PORTD : SET_BIT(DDRD, Copy_u8Pin);Status=Return_OK; break;
    13f6:	a1 e3       	ldi	r26, 0x31	; 49
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <MDIO_voidSetPinDirection+0x1fe>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <MDIO_voidSetPinDirection+0x1fa>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <MDIO_voidSetPinDirection+0x20e>
		default:Status=Return_Nok; break;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Status;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
}
    1426:	28 96       	adiw	r28, 0x08	; 8
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <MDIO_voidSetPinValue>:
Error_State_t MDIO_voidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Mode)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	28 97       	sbiw	r28, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
    1450:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State = Return_OK;
    1452:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Mode == DIO_LOW)
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	88 23       	and	r24, r24
    1458:	09 f0       	breq	.+2      	; 0x145c <MDIO_voidSetPinValue+0x24>
    145a:	7b c0       	rjmp	.+246    	; 0x1552 <MDIO_voidSetPinValue+0x11a>
	{
		switch(Copy_u8Port)
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	38 87       	std	Y+8, r19	; 0x08
    1464:	2f 83       	std	Y+7, r18	; 0x07
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	61 f1       	breq	.+88     	; 0x14c8 <MDIO_voidSetPinValue+0x90>
    1470:	2f 81       	ldd	r18, Y+7	; 0x07
    1472:	38 85       	ldd	r19, Y+8	; 0x08
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <MDIO_voidSetPinValue+0x4c>
    147a:	8f 81       	ldd	r24, Y+7	; 0x07
    147c:	98 85       	ldd	r25, Y+8	; 0x08
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f0       	breq	.+26     	; 0x149c <MDIO_voidSetPinValue+0x64>
    1482:	64 c0       	rjmp	.+200    	; 0x154c <MDIO_voidSetPinValue+0x114>
    1484:	2f 81       	ldd	r18, Y+7	; 0x07
    1486:	38 85       	ldd	r19, Y+8	; 0x08
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	99 f1       	breq	.+102    	; 0x14f4 <MDIO_voidSetPinValue+0xbc>
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <MDIO_voidSetPinValue+0x62>
    1498:	43 c0       	rjmp	.+134    	; 0x1520 <MDIO_voidSetPinValue+0xe8>
    149a:	58 c0       	rjmp	.+176    	; 0x154c <MDIO_voidSetPinValue+0x114>
		{
		case DIO_PORTA: CLR_BIT(PORTA , Copy_u8Pin);Error_State=Return_OK;  break;
    149c:	ab e3       	ldi	r26, 0x3B	; 59
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e3       	ldi	r30, 0x3B	; 59
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <MDIO_voidSetPinValue+0x82>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <MDIO_voidSetPinValue+0x7e>
    14be:	80 95       	com	r24
    14c0:	84 23       	and	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	bf c0       	rjmp	.+382    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTB: CLR_BIT(PORTB , Copy_u8Pin);Error_State=Return_OK; break;
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <MDIO_voidSetPinValue+0xae>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <MDIO_voidSetPinValue+0xaa>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	19 82       	std	Y+1, r1	; 0x01
    14f2:	a9 c0       	rjmp	.+338    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTC: CLR_BIT(PORTC , Copy_u8Pin);Error_State=Return_OK; break;
    14f4:	a5 e3       	ldi	r26, 0x35	; 53
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e3       	ldi	r30, 0x35	; 53
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <MDIO_voidSetPinValue+0xda>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <MDIO_voidSetPinValue+0xd6>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	19 82       	std	Y+1, r1	; 0x01
    151e:	93 c0       	rjmp	.+294    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTD: CLR_BIT(PORTD , Copy_u8Pin);Error_State=Return_OK; break;
    1520:	a2 e3       	ldi	r26, 0x32	; 50
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e2 e3       	ldi	r30, 0x32	; 50
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <MDIO_voidSetPinValue+0x106>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <MDIO_voidSetPinValue+0x102>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	19 82       	std	Y+1, r1	; 0x01
    154a:	7d c0       	rjmp	.+250    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		default:Error_State=Return_Nok; break;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	7a c0       	rjmp	.+244    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		}

	}
	else if (Copy_u8Mode == DIO_HIGH)
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	09 f0       	breq	.+2      	; 0x155a <MDIO_voidSetPinValue+0x122>
    1558:	76 c0       	rjmp	.+236    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
	{
		switch(Copy_u8Port)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3e 83       	std	Y+6, r19	; 0x06
    1562:	2d 83       	std	Y+5, r18	; 0x05
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	59 f1       	breq	.+86     	; 0x15c4 <MDIO_voidSetPinValue+0x18c>
    156e:	2d 81       	ldd	r18, Y+5	; 0x05
    1570:	3e 81       	ldd	r19, Y+6	; 0x06
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <MDIO_voidSetPinValue+0x14a>
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f0       	breq	.+26     	; 0x159a <MDIO_voidSetPinValue+0x162>
    1580:	60 c0       	rjmp	.+192    	; 0x1642 <MDIO_voidSetPinValue+0x20a>
    1582:	2d 81       	ldd	r18, Y+5	; 0x05
    1584:	3e 81       	ldd	r19, Y+6	; 0x06
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	89 f1       	breq	.+98     	; 0x15ee <MDIO_voidSetPinValue+0x1b6>
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <MDIO_voidSetPinValue+0x160>
    1596:	40 c0       	rjmp	.+128    	; 0x1618 <MDIO_voidSetPinValue+0x1e0>
    1598:	54 c0       	rjmp	.+168    	; 0x1642 <MDIO_voidSetPinValue+0x20a>
		{
		case DIO_PORTA: SET_BIT(PORTA , Copy_u8Pin);Error_State=Return_OK; break;
    159a:	ab e3       	ldi	r26, 0x3B	; 59
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	eb e3       	ldi	r30, 0x3B	; 59
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <MDIO_voidSetPinValue+0x180>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <MDIO_voidSetPinValue+0x17c>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	41 c0       	rjmp	.+130    	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTB: SET_BIT(PORTB , Copy_u8Pin);Error_State=Return_OK; break;
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <MDIO_voidSetPinValue+0x1aa>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <MDIO_voidSetPinValue+0x1a6>
    15e6:	84 2b       	or	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	2c c0       	rjmp	.+88     	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTC: SET_BIT(PORTC , Copy_u8Pin);Error_State=Return_OK; break;
    15ee:	a5 e3       	ldi	r26, 0x35	; 53
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <MDIO_voidSetPinValue+0x1d4>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <MDIO_voidSetPinValue+0x1d0>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	19 82       	std	Y+1, r1	; 0x01
    1616:	17 c0       	rjmp	.+46     	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		case DIO_PORTD: SET_BIT(PORTD , Copy_u8Pin);Error_State=Return_OK; break;
    1618:	a2 e3       	ldi	r26, 0x32	; 50
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e3       	ldi	r30, 0x32	; 50
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_voidSetPinValue+0x1fe>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_voidSetPinValue+0x1fa>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <MDIO_voidSetPinValue+0x20e>
		default:Error_State=Return_Nok; break;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_State;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
}
    1648:	28 96       	adiw	r28, 0x08	; 8
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <MDIO_u8SetPortValue>:


void MDIO_u8SetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <MDIO_u8SetPortValue+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <MDIO_u8SetPortValue+0x8>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	d1 f0       	breq	.+52     	; 0x16b2 <MDIO_u8SetPortValue+0x58>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <MDIO_u8SetPortValue+0x38>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	61 f0       	breq	.+24     	; 0x16a8 <MDIO_u8SetPortValue+0x4e>
    1690:	1e c0       	rjmp	.+60     	; 0x16ce <MDIO_u8SetPortValue+0x74>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <MDIO_u8SetPortValue+0x62>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	81 f0       	breq	.+32     	; 0x16c6 <MDIO_u8SetPortValue+0x6c>
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <MDIO_u8SetPortValue+0x74>
	{
	case DIO_PORTA : PORTA=Copy_u8Value; break;
    16a8:	eb e3       	ldi	r30, 0x3B	; 59
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <MDIO_u8SetPortValue+0x74>
	case DIO_PORTB : PORTB=Copy_u8Value; break;
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <MDIO_u8SetPortValue+0x74>
	case DIO_PORTC : PORTC=Copy_u8Value; break;
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <MDIO_u8SetPortValue+0x74>
	case DIO_PORTD : PORTD=Copy_u8Value; break;
    16c6:	e2 e3       	ldi	r30, 0x32	; 50
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	80 83       	st	Z, r24
	default : break;

	}
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <MDIO_Error_State_tGetPinValue>:

void MDIO_Error_State_tGetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	27 97       	sbiw	r28, 0x07	; 7
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	6b 83       	std	Y+3, r22	; 0x03
    16f4:	5d 83       	std	Y+5, r21	; 0x05
    16f6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State = Return_OK;
    16f8:	19 82       	std	Y+1, r1	; 0x01
	if ((P_u8Value!=NULL)&&(Copy_u8Pin<= DIO_PIN7))
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <MDIO_Error_State_tGetPinValue+0x28>
    1702:	78 c0       	rjmp	.+240    	; 0x17f4 <MDIO_Error_State_tGetPinValue+0x118>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	08 f0       	brcs	.+2      	; 0x170c <MDIO_Error_State_tGetPinValue+0x30>
    170a:	74 c0       	rjmp	.+232    	; 0x17f4 <MDIO_Error_State_tGetPinValue+0x118>

	{
		switch (Copy_u8Port)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3f 83       	std	Y+7, r19	; 0x07
    1714:	2e 83       	std	Y+6, r18	; 0x06
    1716:	4e 81       	ldd	r20, Y+6	; 0x06
    1718:	5f 81       	ldd	r21, Y+7	; 0x07
    171a:	41 30       	cpi	r20, 0x01	; 1
    171c:	51 05       	cpc	r21, r1
    171e:	59 f1       	breq	.+86     	; 0x1776 <MDIO_Error_State_tGetPinValue+0x9a>
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	9f 81       	ldd	r25, Y+7	; 0x07
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	34 f4       	brge	.+12     	; 0x1736 <MDIO_Error_State_tGetPinValue+0x5a>
    172a:	2e 81       	ldd	r18, Y+6	; 0x06
    172c:	3f 81       	ldd	r19, Y+7	; 0x07
    172e:	21 15       	cp	r18, r1
    1730:	31 05       	cpc	r19, r1
    1732:	69 f0       	breq	.+26     	; 0x174e <MDIO_Error_State_tGetPinValue+0x72>
    1734:	5c c0       	rjmp	.+184    	; 0x17ee <MDIO_Error_State_tGetPinValue+0x112>
    1736:	4e 81       	ldd	r20, Y+6	; 0x06
    1738:	5f 81       	ldd	r21, Y+7	; 0x07
    173a:	42 30       	cpi	r20, 0x02	; 2
    173c:	51 05       	cpc	r21, r1
    173e:	79 f1       	breq	.+94     	; 0x179e <MDIO_Error_State_tGetPinValue+0xc2>
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <MDIO_Error_State_tGetPinValue+0x70>
    174a:	3d c0       	rjmp	.+122    	; 0x17c6 <MDIO_Error_State_tGetPinValue+0xea>
    174c:	50 c0       	rjmp	.+160    	; 0x17ee <MDIO_Error_State_tGetPinValue+0x112>
		{
		case DIO_PORTA: *P_u8Value=GET_BIT(PINA, Copy_u8Pin);break;
    174e:	e9 e3       	ldi	r30, 0x39	; 57
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <MDIO_Error_State_tGetPinValue+0x8a>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <MDIO_Error_State_tGetPinValue+0x86>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	ec 81       	ldd	r30, Y+4	; 0x04
    1770:	fd 81       	ldd	r31, Y+5	; 0x05
    1772:	80 83       	st	Z, r24
    1774:	41 c0       	rjmp	.+130    	; 0x17f8 <MDIO_Error_State_tGetPinValue+0x11c>
		case DIO_PORTB: *P_u8Value=GET_BIT(PINB, Copy_u8Pin);break;
    1776:	e6 e3       	ldi	r30, 0x36	; 54
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <MDIO_Error_State_tGetPinValue+0xb2>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <MDIO_Error_State_tGetPinValue+0xae>
    1792:	ca 01       	movw	r24, r20
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	ec 81       	ldd	r30, Y+4	; 0x04
    1798:	fd 81       	ldd	r31, Y+5	; 0x05
    179a:	80 83       	st	Z, r24
    179c:	2d c0       	rjmp	.+90     	; 0x17f8 <MDIO_Error_State_tGetPinValue+0x11c>
		case DIO_PORTC: *P_u8Value=GET_BIT(PINC, Copy_u8Pin);break;
    179e:	e3 e3       	ldi	r30, 0x33	; 51
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a9 01       	movw	r20, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <MDIO_Error_State_tGetPinValue+0xda>
    17b2:	55 95       	asr	r21
    17b4:	47 95       	ror	r20
    17b6:	8a 95       	dec	r24
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <MDIO_Error_State_tGetPinValue+0xd6>
    17ba:	ca 01       	movw	r24, r20
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	ec 81       	ldd	r30, Y+4	; 0x04
    17c0:	fd 81       	ldd	r31, Y+5	; 0x05
    17c2:	80 83       	st	Z, r24
    17c4:	19 c0       	rjmp	.+50     	; 0x17f8 <MDIO_Error_State_tGetPinValue+0x11c>
		case DIO_PORTD: *P_u8Value=GET_BIT(PIND, Copy_u8Pin);break;
    17c6:	e0 e3       	ldi	r30, 0x30	; 48
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <MDIO_Error_State_tGetPinValue+0x102>
    17da:	55 95       	asr	r21
    17dc:	47 95       	ror	r20
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <MDIO_Error_State_tGetPinValue+0xfe>
    17e2:	ca 01       	movw	r24, r20
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	ec 81       	ldd	r30, Y+4	; 0x04
    17e8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ea:	80 83       	st	Z, r24
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <MDIO_Error_State_tGetPinValue+0x11c>
		default:Error_State=Return_Nok; break;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <MDIO_Error_State_tGetPinValue+0x11c>
		}
	}
	else
	{
		Error_State=Return_Nok;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
	}

}
    17f8:	27 96       	adiw	r28, 0x07	; 7
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <Port_voidInit>:

void Port_voidInit(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    181a:	e7 e3       	ldi	r30, 0x37	; 55
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8f e5       	ldi	r24, 0x5F	; 95
    1820:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1822:	e4 e3       	ldi	r30, 0x34	; 52
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    182a:	e1 e3       	ldi	r30, 0x31	; 49
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	80 83       	st	Z, r24

	PORTA = PORTA_VALUE;
    1832:	eb e3       	ldi	r30, 0x3B	; 59
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	10 82       	st	Z, r1
	PORTB = PORTB_VALUE;
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	10 82       	st	Z, r1
	PORTC = PORTC_VALUE;
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	10 82       	st	Z, r1
	PORTD = PORTD_VALUE;
    1844:	e2 e3       	ldi	r30, 0x32	; 50
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	10 82       	st	Z, r1

}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <MEXI0_voidInit>:
	pf();


}*/
void MEXI0_voidInit(void)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
	/*check Interupt Sense modes*/
#if INT0_SENS_MODES==LOW_LEVEL
	SET_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENS_MODES==FALLING
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1858:	a5 e5       	ldi	r26, 0x55	; 85
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e5       	ldi	r30, 0x55	; 85
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8e 7f       	andi	r24, 0xFE	; 254
    1864:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	82 60       	ori	r24, 0x02	; 2
    1872:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
#else
#error "INT0 SENSE CONTROL INVALID MODES"

#endif
	SET_BIT(GICR,GICR_INT0);
    1874:	ab e5       	ldi	r26, 0x5B	; 91
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e5       	ldi	r30, 0x5B	; 91
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 64       	ori	r24, 0x40	; 64
    1880:	8c 93       	st	X, r24

}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <MEXI1_voidInit>:
void MEXI1_voidInit(void)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENS_MODES==RISING
	SET_BIT(MCUCR,MCUCR_ISC10);
	SET_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENS_MODES==FALLING
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1890:	a5 e5       	ldi	r26, 0x55	; 85
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e5       	ldi	r30, 0x55	; 85
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8b 7f       	andi	r24, 0xFB	; 251
    189c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    189e:	a5 e5       	ldi	r26, 0x55	; 85
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e5       	ldi	r30, 0x55	; 85
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 60       	ori	r24, 0x08	; 8
    18aa:	8c 93       	st	X, r24
     CLR_BIT(MCUCR,MCUCR_ISC11);
#else
#error "INT1 SENSE CONTROL INVALID MODES"

#endif
	SET_BIT(GICR,GICR_INT1);
    18ac:	ab e5       	ldi	r26, 0x5B	; 91
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e5       	ldi	r30, 0x5B	; 91
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	8c 93       	st	X, r24

}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <MEXI2_voidInit>:
void MEXI2_voidInit(void)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENS_MODES==RISING
	SET_BIT(MCUCSR,MCUCSR_ISC2);

#elif INT2_SENS_MODES==FALLING
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    18c8:	a4 e5       	ldi	r26, 0x54	; 84
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e4 e5       	ldi	r30, 0x54	; 84
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 7b       	andi	r24, 0xBF	; 191
    18d4:	8c 93       	st	X, r24


#else
#error "INT2 SENSE CONTROL INVALID MODES"
#endif
	SET_BIT(GICR,GICR_INT2);
    18d6:	ab e5       	ldi	r26, 0x5B	; 91
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	eb e5       	ldi	r30, 0x5B	; 91
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 62       	ori	r24, 0x20	; 32
    18e2:	8c 93       	st	X, r24

}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <EXIT_u8Int0SetCallBack>:

u8 EXIT_u8Int0SetCallBack(void(*Copy_PvInt0Func)(void)){
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <EXIT_u8Int0SetCallBack+0x6>
    18f0:	0f 92       	push	r0
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    18fa:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_PvInt0Func!=NULL){
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	39 f0       	breq	.+14     	; 0x1912 <EXIT_u8Int0SetCallBack+0x28>
		EXIT_PvInt0Func=Copy_PvInt0Func ;
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	90 93 81 00 	sts	0x0081, r25
    190c:	80 93 80 00 	sts	0x0080, r24
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <EXIT_u8Int0SetCallBack+0x2c>

	}

	else {
		Local_u8ErrorState=NULL_POINTER;
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1916:	89 81       	ldd	r24, Y+1	; 0x01
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <EXIT_u8Int1SetCallBack>:

u8 EXIT_u8Int1SetCallBack(void(*Copy_PvInt1Func)(void)){
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <EXIT_u8Int1SetCallBack+0x6>
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	9b 83       	std	Y+3, r25	; 0x03
    1932:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1934:	19 82       	std	Y+1, r1	; 0x01
if (Copy_PvInt1Func!=NULL){
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	39 f0       	breq	.+14     	; 0x194c <EXIT_u8Int1SetCallBack+0x28>
	EXIT_PvInt1Func=Copy_PvInt1Func ;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	90 93 83 00 	sts	0x0083, r25
    1946:	80 93 82 00 	sts	0x0082, r24
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <EXIT_u8Int1SetCallBack+0x2c>

}

else {
	Local_u8ErrorState=NULL_POINTER;
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <EXIT_u8Int2SetCallBack>:
u8 EXIT_u8Int2SetCallBack(void(*Copy_PvInt2Func)(void)){
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <EXIT_u8Int2SetCallBack+0x6>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9b 83       	std	Y+3, r25	; 0x03
    196c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    196e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_PvInt2Func!=NULL){
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	39 f0       	breq	.+14     	; 0x1986 <EXIT_u8Int2SetCallBack+0x28>
		EXIT_PvInt2Func=Copy_PvInt2Func ;
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	90 93 85 00 	sts	0x0085, r25
    1980:	80 93 84 00 	sts	0x0084, r24
    1984:	02 c0       	rjmp	.+4      	; 0x198a <EXIT_u8Int2SetCallBack+0x2c>

	}

	else {
		Local_u8ErrorState=NULL_POINTER;
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    198a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <__vector_1>:


void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	if (EXIT_PvInt0Func!=NULL){
    19c2:	80 91 80 00 	lds	r24, 0x0080
    19c6:	90 91 81 00 	lds	r25, 0x0081
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <__vector_1+0x40>
	EXIT_PvInt0Func();
    19ce:	e0 91 80 00 	lds	r30, 0x0080
    19d2:	f0 91 81 00 	lds	r31, 0x0081
    19d6:	09 95       	icall
	}
	else{

	}
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <__vector_2>:


void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	if (EXIT_PvInt1Func!=NULL){
    1a28:	80 91 82 00 	lds	r24, 0x0082
    1a2c:	90 91 83 00 	lds	r25, 0x0083
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	29 f0       	breq	.+10     	; 0x1a3e <__vector_2+0x40>
	EXIT_PvInt1Func();
    1a34:	e0 91 82 00 	lds	r30, 0x0082
    1a38:	f0 91 83 00 	lds	r31, 0x0083
    1a3c:	09 95       	icall
	}
	else{

	}
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_3>:

void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	if (EXIT_PvInt2Func!=NULL){
    1a8e:	80 91 84 00 	lds	r24, 0x0084
    1a92:	90 91 85 00 	lds	r25, 0x0085
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <__vector_3+0x40>
	EXIT_PvInt2Func();
    1a9a:	e0 91 84 00 	lds	r30, 0x0084
    1a9e:	f0 91 85 00 	lds	r31, 0x0085
    1aa2:	09 95       	icall
	}
	else{

	}
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <MGIE_voidEnable>:




void MGIE_voidEnable(void)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1ad2:	af e5       	ldi	r26, 0x5F	; 95
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e5       	ldi	r30, 0x5F	; 95
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 68       	ori	r24, 0x80	; 128
    1ade:	8c 93       	st	X, r24
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <MGIE_voidDisable>:
void MGIE_voidDisable(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1aee:	af e5       	ldi	r26, 0x5F	; 95
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ef e5       	ldi	r30, 0x5F	; 95
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 77       	andi	r24, 0x7F	; 127
    1afa:	8c 93       	st	X, r24
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <MSPI_voidInit>:
#include "MSPI_config.h"
#include "MSPI_private.h"
#include "MSPI_interface.h"

void MSPI_voidInit()
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62

	/*Data Order*/
	SET_BIT(SPCR,SPCR_DORD);
    1b0a:	ad e2       	ldi	r26, 0x2D	; 45
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ed e2       	ldi	r30, 0x2D	; 45
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 62       	ori	r24, 0x20	; 32
    1b16:	8c 93       	st	X, r24
	/*Select Prescaler as 16*/
	SET_BIT(SPCR,SPCR_SPR0);
	CLR_BIT(SPCR,SPCR_SPR1);
	CLR_BIT(SPSR,SPSR_SPI2X);
#elif SPI_MODE==SPI_SLAVE
	CLR_BIT(SPCR,SPCR_MSTR);
    1b18:	ad e2       	ldi	r26, 0x2D	; 45
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ed e2       	ldi	r30, 0x2D	; 45
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8f 7e       	andi	r24, 0xEF	; 239
    1b24:	8c 93       	st	X, r24
#else
#error"Wrong SPI Mode Configuration"
#endif
	/* Select Clock Polarity as Leading edge rising*/
	CLR_BIT(SPCR,SPCR_CPOL);
    1b26:	ad e2       	ldi	r26, 0x2D	; 45
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ed e2       	ldi	r30, 0x2D	; 45
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	87 7f       	andi	r24, 0xF7	; 247
    1b32:	8c 93       	st	X, r24
	/* Select Clock Phase as Leading edge is sample*/
	CLR_BIT(SPCR,SPCR_CPHA);
    1b34:	ad e2       	ldi	r26, 0x2D	; 45
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ed e2       	ldi	r30, 0x2D	; 45
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8b 7f       	andi	r24, 0xFB	; 251
    1b40:	8c 93       	st	X, r24

	/*Enable SPI peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    1b42:	ad e2       	ldi	r26, 0x2D	; 45
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	ed e2       	ldi	r30, 0x2D	; 45
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 64       	ori	r24, 0x40	; 64
    1b4e:	8c 93       	st	X, r24

}
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <MSPI_voidTranceive>:
u8 MSPI_voidTranceive(u8 Copy_u8Data)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data ;
    1b62:	ef e2       	ldi	r30, 0x2F	; 47
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	80 83       	st	Z, r24

	while( (GET_BIT(SPSR,SPSR_SPIF)) ==0);
    1b6a:	ee e2       	ldi	r30, 0x2E	; 46
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 23       	and	r24, r24
    1b72:	dc f7       	brge	.-10     	; 0x1b6a <MSPI_voidTranceive+0x14>

	return SPDR ;
    1b74:	ef e2       	ldi	r30, 0x2F	; 47
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
}
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <MTIMER0_voidInit>:
void (*Timer2_PF_CMP)(void)=NULL ;

/**************************************TIMER0 ******************************************/

void MTIMER0_voidInit()
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_TOIE0); // Overflow Interrupt enable

#elif TIMER0_MODE==TIMER0_CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1b8a:	a3 e5       	ldi	r26, 0x53	; 83
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e3 e5       	ldi	r30, 0x53	; 83
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8f 7b       	andi	r24, 0xBF	; 191
    1b96:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1b98:	a3 e5       	ldi	r26, 0x53	; 83
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e3 e5       	ldi	r30, 0x53	; 83
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 60       	ori	r24, 0x08	; 8
    1ba4:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_OCIE0); // Compare Match Interrupt enable
    1ba6:	a9 e5       	ldi	r26, 0x59	; 89
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e9 e5       	ldi	r30, 0x59	; 89
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	82 60       	ori	r24, 0x02	; 2
    1bb2:	8c 93       	st	X, r24
#if TIMER0_PRESCALER==TIMER0_NO_PRESCALER
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
	CLR_BIT(TCCR0,TCCR0_CS00);
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8e 7f       	andi	r24, 0xFE	; 254
    1bc0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1bc2:	a3 e5       	ldi	r26, 0x53	; 83
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e3 e5       	ldi	r30, 0x53	; 83
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	82 60       	ori	r24, 0x02	; 2
    1bce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1bd0:	a3 e5       	ldi	r26, 0x53	; 83
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e3 e5       	ldi	r30, 0x53	; 83
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8b 7f       	andi	r24, 0xFB	; 251
    1bdc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error"Wrong Timer0 Prescaler Selection"
#endif
}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable()
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	/*No Clock Source*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1bec:	a3 e5       	ldi	r26, 0x53	; 83
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e3 e5       	ldi	r30, 0x53	; 83
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8e 7f       	andi	r24, 0xFE	; 254
    1bf8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    1bfa:	a3 e5       	ldi	r26, 0x53	; 83
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e3 e5       	ldi	r30, 0x53	; 83
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1c08:	a3 e5       	ldi	r26, 0x53	; 83
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e3 e5       	ldi	r30, 0x53	; 83
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	8c 93       	st	X, r24
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle ;
    1c28:	ec e5       	ldi	r30, 0x5C	; 92
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	80 83       	st	Z, r24
}
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <MTIMER0_voidPreload>:
void MTIMER0_voidPreload(u8 Copy_u8Preload)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload ;
    1c44:	e2 e5       	ldi	r30, 0x52	; 82
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <MTIMER0_voidCompMatchValue>:

void MTIMER0_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8ComMatchValue ;
    1c60:	ec e5       	ldi	r30, 0x5C	; 92
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	80 83       	st	Z, r24
}
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <MTIMER0_voidSetCallBack_OVF>:

void MTIMER0_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <MTIMER0_voidSetCallBack_OVF+0x6>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_OVF=Copy_pf ;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	90 93 87 00 	sts	0x0087, r25
    1c86:	80 93 86 00 	sts	0x0086, r24
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <MTIMER0_voidSetCallBack_CMP>:
void MTIMER0_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <MTIMER0_voidSetCallBack_CMP+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_CMP=Copy_pf ;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	90 93 89 00 	sts	0x0089, r25
    1caa:	80 93 88 00 	sts	0x0088, r24
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <__vector_11>:
/*OVF*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_OVF != NULL)
    1ce2:	80 91 86 00 	lds	r24, 0x0086
    1ce6:	90 91 87 00 	lds	r25, 0x0087
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	29 f0       	breq	.+10     	; 0x1cf8 <__vector_11+0x40>
	{
		Timer0_PF_OVF() ;
    1cee:	e0 91 86 00 	lds	r30, 0x0086
    1cf2:	f0 91 87 00 	lds	r31, 0x0087
    1cf6:	09 95       	icall
	}
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_10>:
/*CMP*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	2f 93       	push	r18
    1d2a:	3f 93       	push	r19
    1d2c:	4f 93       	push	r20
    1d2e:	5f 93       	push	r21
    1d30:	6f 93       	push	r22
    1d32:	7f 93       	push	r23
    1d34:	8f 93       	push	r24
    1d36:	9f 93       	push	r25
    1d38:	af 93       	push	r26
    1d3a:	bf 93       	push	r27
    1d3c:	ef 93       	push	r30
    1d3e:	ff 93       	push	r31
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_CMP != NULL)
    1d48:	80 91 88 00 	lds	r24, 0x0088
    1d4c:	90 91 89 00 	lds	r25, 0x0089
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	29 f0       	breq	.+10     	; 0x1d5e <__vector_10+0x40>
	{
		Timer0_PF_CMP() ;
    1d54:	e0 91 88 00 	lds	r30, 0x0088
    1d58:	f0 91 89 00 	lds	r31, 0x0089
    1d5c:	09 95       	icall
	}
}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <MTIMER1_voidInit>:
/**************************************TIMER1 ******************************************/
void MTIMER1_voidInit(TIMER1MODES_t Copy_enuTimer1Mode , TIMER1_TOPMODES_t Copy_enuTimer1TopMode,TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	29 97       	sbiw	r28, 0x09	; 9
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	6a 83       	std	Y+2, r22	; 0x02
    1d9c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_enuTimer1Mode)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	39 87       	std	Y+9, r19	; 0x09
    1da6:	28 87       	std	Y+8, r18	; 0x08
    1da8:	88 85       	ldd	r24, Y+8	; 0x08
    1daa:	99 85       	ldd	r25, Y+9	; 0x09
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	91 05       	cpc	r25, r1
    1db0:	79 f1       	breq	.+94     	; 0x1e10 <MTIMER1_voidInit+0x8c>
    1db2:	28 85       	ldd	r18, Y+8	; 0x08
    1db4:	39 85       	ldd	r19, Y+9	; 0x09
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <MTIMER1_voidInit+0x3a>
    1dbc:	46 c0       	rjmp	.+140    	; 0x1e4a <MTIMER1_voidInit+0xc6>
    1dbe:	88 85       	ldd	r24, Y+8	; 0x08
    1dc0:	99 85       	ldd	r25, Y+9	; 0x09
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <MTIMER1_voidInit+0x44>
    1dc6:	5d c0       	rjmp	.+186    	; 0x1e82 <MTIMER1_voidInit+0xfe>
	{
	case TIMER1_CTC_MODE :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1dc8:	af e4       	ldi	r26, 0x4F	; 79
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	ef e4       	ldi	r30, 0x4F	; 79
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8f 7b       	andi	r24, 0xBF	; 191
    1dd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1dd6:	af e4       	ldi	r26, 0x4F	; 79
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	ef e4       	ldi	r30, 0x4F	; 79
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 7e       	andi	r24, 0xEF	; 239
    1de2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    1de4:	af e4       	ldi	r26, 0x4F	; 79
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ef e4       	ldi	r30, 0x4F	; 79
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 77       	andi	r24, 0x7F	; 127
    1df0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    1df2:	af e4       	ldi	r26, 0x4F	; 79
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ef e4       	ldi	r30, 0x4F	; 79
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 7d       	andi	r24, 0xDF	; 223
    1dfe:	8c 93       	st	X, r24
		/*SEI*/
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    1e00:	a9 e5       	ldi	r26, 0x59	; 89
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e9 e5       	ldi	r30, 0x59	; 89
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 61       	ori	r24, 0x10	; 16
    1e0c:	8c 93       	st	X, r24
    1e0e:	39 c0       	rjmp	.+114    	; 0x1e82 <MTIMER1_voidInit+0xfe>
		break;
	case TIMER1_FPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1e10:	af e4       	ldi	r26, 0x4F	; 79
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ef e4       	ldi	r30, 0x4F	; 79
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 7b       	andi	r24, 0xBF	; 191
    1e1c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1e1e:	af e4       	ldi	r26, 0x4F	; 79
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	ef e4       	ldi	r30, 0x4F	; 79
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	8f 7e       	andi	r24, 0xEF	; 239
    1e2a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1e2c:	af e4       	ldi	r26, 0x4F	; 79
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ef e4       	ldi	r30, 0x4F	; 79
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1e3a:	af e4       	ldi	r26, 0x4F	; 79
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ef e4       	ldi	r30, 0x4F	; 79
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 62       	ori	r24, 0x20	; 32
    1e46:	8c 93       	st	X, r24
    1e48:	1c c0       	rjmp	.+56     	; 0x1e82 <MTIMER1_voidInit+0xfe>
	case TIMER1_PPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1e4a:	af e4       	ldi	r26, 0x4F	; 79
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	ef e4       	ldi	r30, 0x4F	; 79
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 7b       	andi	r24, 0xBF	; 191
    1e56:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1e58:	af e4       	ldi	r26, 0x4F	; 79
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ef e4       	ldi	r30, 0x4F	; 79
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7e       	andi	r24, 0xEF	; 239
    1e64:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1e66:	af e4       	ldi	r26, 0x4F	; 79
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ef e4       	ldi	r30, 0x4F	; 79
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 68       	ori	r24, 0x80	; 128
    1e72:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    1e74:	af e4       	ldi	r26, 0x4F	; 79
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ef e4       	ldi	r30, 0x4F	; 79
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 62       	ori	r24, 0x20	; 32
    1e80:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1TopMode)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3f 83       	std	Y+7, r19	; 0x07
    1e8a:	2e 83       	std	Y+6, r18	; 0x06
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	b1 f0       	breq	.+44     	; 0x1ec2 <MTIMER1_voidInit+0x13e>
    1e96:	2e 81       	ldd	r18, Y+6	; 0x06
    1e98:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <MTIMER1_voidInit+0x126>
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	51 f1       	breq	.+84     	; 0x1efc <MTIMER1_voidInit+0x178>
    1ea8:	7f c0       	rjmp	.+254    	; 0x1fa8 <MTIMER1_voidInit+0x224>
    1eaa:	2e 81       	ldd	r18, Y+6	; 0x06
    1eac:	3f 81       	ldd	r19, Y+7	; 0x07
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <MTIMER1_voidInit+0x132>
    1eb4:	5d c0       	rjmp	.+186    	; 0x1f70 <MTIMER1_voidInit+0x1ec>
    1eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	d9 f1       	breq	.+118    	; 0x1f36 <MTIMER1_voidInit+0x1b2>
    1ec0:	73 c0       	rjmp	.+230    	; 0x1fa8 <MTIMER1_voidInit+0x224>
	{
	case TOP_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1ec2:	af e4       	ldi	r26, 0x4F	; 79
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	ef e4       	ldi	r30, 0x4F	; 79
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8e 7f       	andi	r24, 0xFE	; 254
    1ece:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1ed0:	af e4       	ldi	r26, 0x4F	; 79
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ef e4       	ldi	r30, 0x4F	; 79
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8d 7f       	andi	r24, 0xFD	; 253
    1edc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ede:	ae e4       	ldi	r26, 0x4E	; 78
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	ee e4       	ldi	r30, 0x4E	; 78
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 60       	ori	r24, 0x08	; 8
    1eea:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1eec:	ae e4       	ldi	r26, 0x4E	; 78
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ee e4       	ldi	r30, 0x4E	; 78
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 61       	ori	r24, 0x10	; 16
    1ef8:	8c 93       	st	X, r24
    1efa:	56 c0       	rjmp	.+172    	; 0x1fa8 <MTIMER1_voidInit+0x224>
	case TOP_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1efc:	af e4       	ldi	r26, 0x4F	; 79
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	ef e4       	ldi	r30, 0x4F	; 79
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8e 7f       	andi	r24, 0xFE	; 254
    1f08:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1f0a:	af e4       	ldi	r26, 0x4F	; 79
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ef e4       	ldi	r30, 0x4F	; 79
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8d 7f       	andi	r24, 0xFD	; 253
    1f16:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f18:	ae e4       	ldi	r26, 0x4E	; 78
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	ee e4       	ldi	r30, 0x4E	; 78
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	88 60       	ori	r24, 0x08	; 8
    1f24:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f26:	ae e4       	ldi	r26, 0x4E	; 78
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	ee e4       	ldi	r30, 0x4E	; 78
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 7e       	andi	r24, 0xEF	; 239
    1f32:	8c 93       	st	X, r24
    1f34:	39 c0       	rjmp	.+114    	; 0x1fa8 <MTIMER1_voidInit+0x224>
	case TOP_FPWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f36:	af e4       	ldi	r26, 0x4F	; 79
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	ef e4       	ldi	r30, 0x4F	; 79
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8e 7f       	andi	r24, 0xFE	; 254
    1f42:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f44:	af e4       	ldi	r26, 0x4F	; 79
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	ef e4       	ldi	r30, 0x4F	; 79
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	82 60       	ori	r24, 0x02	; 2
    1f50:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f52:	ae e4       	ldi	r26, 0x4E	; 78
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ee e4       	ldi	r30, 0x4E	; 78
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 60       	ori	r24, 0x08	; 8
    1f5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f60:	ae e4       	ldi	r26, 0x4E	; 78
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ee e4       	ldi	r30, 0x4E	; 78
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 61       	ori	r24, 0x10	; 16
    1f6c:	8c 93       	st	X, r24
    1f6e:	1c c0       	rjmp	.+56     	; 0x1fa8 <MTIMER1_voidInit+0x224>
	case TOP_FPWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1f70:	af e4       	ldi	r26, 0x4F	; 79
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ef e4       	ldi	r30, 0x4F	; 79
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	81 60       	ori	r24, 0x01	; 1
    1f7c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f7e:	af e4       	ldi	r26, 0x4F	; 79
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ef e4       	ldi	r30, 0x4F	; 79
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	82 60       	ori	r24, 0x02	; 2
    1f8a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f8c:	ae e4       	ldi	r26, 0x4E	; 78
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ee e4       	ldi	r30, 0x4E	; 78
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    1f9a:	ae e4       	ldi	r26, 0x4E	; 78
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	ee e4       	ldi	r30, 0x4E	; 78
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 61       	ori	r24, 0x10	; 16
    1fa6:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1Prescaler)
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	3d 83       	std	Y+5, r19	; 0x05
    1fb0:	2c 83       	std	Y+4, r18	; 0x04
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <MTIMER1_voidInit+0x23a>
    1fbc:	48 c0       	rjmp	.+144    	; 0x204e <MTIMER1_voidInit+0x2ca>
    1fbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc2:	23 30       	cpi	r18, 0x03	; 3
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	54 f4       	brge	.+20     	; 0x1fdc <MTIMER1_voidInit+0x258>
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	99 f0       	breq	.+38     	; 0x1ff6 <MTIMER1_voidInit+0x272>
    1fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd4:	21 30       	cpi	r18, 0x01	; 1
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	21 f1       	breq	.+72     	; 0x2022 <MTIMER1_voidInit+0x29e>
    1fda:	7a c0       	rjmp	.+244    	; 0x20d0 <MTIMER1_voidInit+0x34c>
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <MTIMER1_voidInit+0x264>
    1fe6:	49 c0       	rjmp	.+146    	; 0x207a <MTIMER1_voidInit+0x2f6>
    1fe8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fea:	3d 81       	ldd	r19, Y+5	; 0x05
    1fec:	24 30       	cpi	r18, 0x04	; 4
    1fee:	31 05       	cpc	r19, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <MTIMER1_voidInit+0x270>
    1ff2:	59 c0       	rjmp	.+178    	; 0x20a6 <MTIMER1_voidInit+0x322>
    1ff4:	6d c0       	rjmp	.+218    	; 0x20d0 <MTIMER1_voidInit+0x34c>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    1ff6:	ae e4       	ldi	r26, 0x4E	; 78
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	ee e4       	ldi	r30, 0x4E	; 78
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2004:	ae e4       	ldi	r26, 0x4E	; 78
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	ee e4       	ldi	r30, 0x4E	; 78
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8d 7f       	andi	r24, 0xFD	; 253
    2010:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2012:	ae e4       	ldi	r26, 0x4E	; 78
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ee e4       	ldi	r30, 0x4E	; 78
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8b 7f       	andi	r24, 0xFB	; 251
    201e:	8c 93       	st	X, r24
    2020:	57 c0       	rjmp	.+174    	; 0x20d0 <MTIMER1_voidInit+0x34c>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    2022:	ae e4       	ldi	r26, 0x4E	; 78
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	ee e4       	ldi	r30, 0x4E	; 78
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8e 7f       	andi	r24, 0xFE	; 254
    202e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    2030:	ae e4       	ldi	r26, 0x4E	; 78
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e4       	ldi	r30, 0x4E	; 78
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	82 60       	ori	r24, 0x02	; 2
    203c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    203e:	ae e4       	ldi	r26, 0x4E	; 78
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	ee e4       	ldi	r30, 0x4E	; 78
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8b 7f       	andi	r24, 0xFB	; 251
    204a:	8c 93       	st	X, r24
    204c:	41 c0       	rjmp	.+130    	; 0x20d0 <MTIMER1_voidInit+0x34c>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    204e:	ae e4       	ldi	r26, 0x4E	; 78
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	ee e4       	ldi	r30, 0x4E	; 78
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	81 60       	ori	r24, 0x01	; 1
    205a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    205c:	ae e4       	ldi	r26, 0x4E	; 78
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	ee e4       	ldi	r30, 0x4E	; 78
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	82 60       	ori	r24, 0x02	; 2
    2068:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    206a:	ae e4       	ldi	r26, 0x4E	; 78
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	ee e4       	ldi	r30, 0x4E	; 78
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8b 7f       	andi	r24, 0xFB	; 251
    2076:	8c 93       	st	X, r24
    2078:	2b c0       	rjmp	.+86     	; 0x20d0 <MTIMER1_voidInit+0x34c>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    207a:	ae e4       	ldi	r26, 0x4E	; 78
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ee e4       	ldi	r30, 0x4E	; 78
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	8e 7f       	andi	r24, 0xFE	; 254
    2086:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2088:	ae e4       	ldi	r26, 0x4E	; 78
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	ee e4       	ldi	r30, 0x4E	; 78
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8d 7f       	andi	r24, 0xFD	; 253
    2094:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    2096:	ae e4       	ldi	r26, 0x4E	; 78
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	ee e4       	ldi	r30, 0x4E	; 78
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	84 60       	ori	r24, 0x04	; 4
    20a2:	8c 93       	st	X, r24
    20a4:	15 c0       	rjmp	.+42     	; 0x20d0 <MTIMER1_voidInit+0x34c>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    20a6:	ae e4       	ldi	r26, 0x4E	; 78
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	ee e4       	ldi	r30, 0x4E	; 78
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	81 60       	ori	r24, 0x01	; 1
    20b2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    20b4:	ae e4       	ldi	r26, 0x4E	; 78
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	ee e4       	ldi	r30, 0x4E	; 78
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8d 7f       	andi	r24, 0xFD	; 253
    20c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    20c2:	ae e4       	ldi	r26, 0x4E	; 78
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	ee e4       	ldi	r30, 0x4E	; 78
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	8c 93       	st	X, r24
	default:break;

	}

}
    20d0:	29 96       	adiw	r28, 0x09	; 9
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <MTIMER1_voidDisable>:
void MTIMER1_voidDisable()
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    20ea:	ae e4       	ldi	r26, 0x4E	; 78
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ee e4       	ldi	r30, 0x4E	; 78
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8e 7f       	andi	r24, 0xFE	; 254
    20f6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    20f8:	ae e4       	ldi	r26, 0x4E	; 78
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ee e4       	ldi	r30, 0x4E	; 78
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8d 7f       	andi	r24, 0xFD	; 253
    2104:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    2106:	ae e4       	ldi	r26, 0x4E	; 78
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	ee e4       	ldi	r30, 0x4E	; 78
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8b 7f       	andi	r24, 0xFB	; 251
    2112:	8c 93       	st	X, r24
}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_TopValue ,TIMER1_TOPMODES_t Copy_enuTimer1TopMode)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <MTIMER1_voidSetTopValue+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <MTIMER1_voidSetTopValue+0x8>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuTimer1TopMode)
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3d 83       	std	Y+5, r19	; 0x05
    2136:	2c 83       	std	Y+4, r18	; 0x04
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	91 05       	cpc	r25, r1
    2140:	a9 f0       	breq	.+42     	; 0x216c <MTIMER1_voidSetTopValue+0x52>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	2c f4       	brge	.+10     	; 0x2156 <MTIMER1_voidSetTopValue+0x3c>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	99 f0       	breq	.+38     	; 0x217a <MTIMER1_voidSetTopValue+0x60>
    2154:	26 c0       	rjmp	.+76     	; 0x21a2 <MTIMER1_voidSetTopValue+0x88>
    2156:	2c 81       	ldd	r18, Y+4	; 0x04
    2158:	3d 81       	ldd	r19, Y+5	; 0x05
    215a:	22 30       	cpi	r18, 0x02	; 2
    215c:	31 05       	cpc	r19, r1
    215e:	d9 f0       	breq	.+54     	; 0x2196 <MTIMER1_voidSetTopValue+0x7c>
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	79 f0       	breq	.+30     	; 0x2188 <MTIMER1_voidSetTopValue+0x6e>
    216a:	1b c0       	rjmp	.+54     	; 0x21a2 <MTIMER1_voidSetTopValue+0x88>
	{
	case TOP_CTC_ICR1 : ICR1 = Copy_TopValue ;break ;
    216c:	e6 e4       	ldi	r30, 0x46	; 70
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <MTIMER1_voidSetTopValue+0x88>
	case TOP_CTC_OCR1A : OCR1A = Copy_TopValue ;break ;
    217a:	ea e4       	ldi	r30, 0x4A	; 74
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
    2186:	0d c0       	rjmp	.+26     	; 0x21a2 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_ICR1 : ICR1 = Copy_TopValue ;break ;
    2188:	e6 e4       	ldi	r30, 0x46	; 70
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_OCR1A : OCR1A = Copy_TopValue ;break ;
    2196:	ea e4       	ldi	r30, 0x4A	; 74
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
	default:break;

	}
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_DutyCycleValue)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <MTIMER1_voidSetDutyCycle+0x6>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_DutyCycleValue ;
    21c0:	ea e4       	ldi	r30, 0x4A	; 74
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <MTIMER1_voidSetCallBack_CMP>:

void MTIMER1_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <MTIMER1_voidSetCallBack_CMP+0x6>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_PF_CMP=Copy_pf ;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	90 93 8b 00 	sts	0x008B, r25
    21ec:	80 93 8a 00 	sts	0x008A, r24
}
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <MTIMER1_voidICUInit>:

void MTIMER1_voidICUInit(TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <MTIMER1_voidICUInit+0x6>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enuTimer1Prescaler)
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	3b 83       	std	Y+3, r19	; 0x03
    2210:	2a 83       	std	Y+2, r18	; 0x02
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	91 05       	cpc	r25, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <MTIMER1_voidICUInit+0x24>
    221c:	48 c0       	rjmp	.+144    	; 0x22ae <MTIMER1_voidICUInit+0xb4>
    221e:	2a 81       	ldd	r18, Y+2	; 0x02
    2220:	3b 81       	ldd	r19, Y+3	; 0x03
    2222:	23 30       	cpi	r18, 0x03	; 3
    2224:	31 05       	cpc	r19, r1
    2226:	54 f4       	brge	.+20     	; 0x223c <MTIMER1_voidICUInit+0x42>
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	99 f0       	breq	.+38     	; 0x2256 <MTIMER1_voidICUInit+0x5c>
    2230:	2a 81       	ldd	r18, Y+2	; 0x02
    2232:	3b 81       	ldd	r19, Y+3	; 0x03
    2234:	21 30       	cpi	r18, 0x01	; 1
    2236:	31 05       	cpc	r19, r1
    2238:	21 f1       	breq	.+72     	; 0x2282 <MTIMER1_voidICUInit+0x88>
    223a:	7a c0       	rjmp	.+244    	; 0x2330 <MTIMER1_voidICUInit+0x136>
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <MTIMER1_voidICUInit+0x4e>
    2246:	49 c0       	rjmp	.+146    	; 0x22da <MTIMER1_voidICUInit+0xe0>
    2248:	2a 81       	ldd	r18, Y+2	; 0x02
    224a:	3b 81       	ldd	r19, Y+3	; 0x03
    224c:	24 30       	cpi	r18, 0x04	; 4
    224e:	31 05       	cpc	r19, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <MTIMER1_voidICUInit+0x5a>
    2252:	59 c0       	rjmp	.+178    	; 0x2306 <MTIMER1_voidICUInit+0x10c>
    2254:	6d c0       	rjmp	.+218    	; 0x2330 <MTIMER1_voidICUInit+0x136>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2256:	ae e4       	ldi	r26, 0x4E	; 78
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	ee e4       	ldi	r30, 0x4E	; 78
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2264:	ae e4       	ldi	r26, 0x4E	; 78
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ee e4       	ldi	r30, 0x4E	; 78
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	8d 7f       	andi	r24, 0xFD	; 253
    2270:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2272:	ae e4       	ldi	r26, 0x4E	; 78
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	ee e4       	ldi	r30, 0x4E	; 78
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8b 7f       	andi	r24, 0xFB	; 251
    227e:	8c 93       	st	X, r24
    2280:	57 c0       	rjmp	.+174    	; 0x2330 <MTIMER1_voidICUInit+0x136>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    2282:	ae e4       	ldi	r26, 0x4E	; 78
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ee e4       	ldi	r30, 0x4E	; 78
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8e 7f       	andi	r24, 0xFE	; 254
    228e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    2290:	ae e4       	ldi	r26, 0x4E	; 78
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ee e4       	ldi	r30, 0x4E	; 78
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	82 60       	ori	r24, 0x02	; 2
    229c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    229e:	ae e4       	ldi	r26, 0x4E	; 78
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	ee e4       	ldi	r30, 0x4E	; 78
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	8b 7f       	andi	r24, 0xFB	; 251
    22aa:	8c 93       	st	X, r24
    22ac:	41 c0       	rjmp	.+130    	; 0x2330 <MTIMER1_voidICUInit+0x136>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    22ae:	ae e4       	ldi	r26, 0x4E	; 78
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	ee e4       	ldi	r30, 0x4E	; 78
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	81 60       	ori	r24, 0x01	; 1
    22ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    22bc:	ae e4       	ldi	r26, 0x4E	; 78
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	ee e4       	ldi	r30, 0x4E	; 78
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	82 60       	ori	r24, 0x02	; 2
    22c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    22ca:	ae e4       	ldi	r26, 0x4E	; 78
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	ee e4       	ldi	r30, 0x4E	; 78
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	8b 7f       	andi	r24, 0xFB	; 251
    22d6:	8c 93       	st	X, r24
    22d8:	2b c0       	rjmp	.+86     	; 0x2330 <MTIMER1_voidICUInit+0x136>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    22da:	ae e4       	ldi	r26, 0x4E	; 78
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ee e4       	ldi	r30, 0x4E	; 78
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8e 7f       	andi	r24, 0xFE	; 254
    22e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    22e8:	ae e4       	ldi	r26, 0x4E	; 78
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ee e4       	ldi	r30, 0x4E	; 78
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8d 7f       	andi	r24, 0xFD	; 253
    22f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    22f6:	ae e4       	ldi	r26, 0x4E	; 78
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	ee e4       	ldi	r30, 0x4E	; 78
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	84 60       	ori	r24, 0x04	; 4
    2302:	8c 93       	st	X, r24
    2304:	15 c0       	rjmp	.+42     	; 0x2330 <MTIMER1_voidICUInit+0x136>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2306:	ae e4       	ldi	r26, 0x4E	; 78
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	ee e4       	ldi	r30, 0x4E	; 78
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	81 60       	ori	r24, 0x01	; 1
    2312:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2314:	ae e4       	ldi	r26, 0x4E	; 78
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ee e4       	ldi	r30, 0x4E	; 78
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	8d 7f       	andi	r24, 0xFD	; 253
    2320:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    2322:	ae e4       	ldi	r26, 0x4E	; 78
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ee e4       	ldi	r30, 0x4E	; 78
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	84 60       	ori	r24, 0x04	; 4
    232e:	8c 93       	st	X, r24
	default:break;
	}

}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <MTIMER1_voidSetICUSense>:
void MTIMER1_voidSetICUSense(u8 Copy_u8ICUSense)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <MTIMER1_voidSetICUSense+0x6>
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUSense)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3b 83       	std	Y+3, r19	; 0x03
    2352:	2a 83       	std	Y+2, r18	; 0x02
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	91 05       	cpc	r25, r1
    235c:	69 f0       	breq	.+26     	; 0x2378 <MTIMER1_voidSetICUSense+0x3c>
    235e:	2a 81       	ldd	r18, Y+2	; 0x02
    2360:	3b 81       	ldd	r19, Y+3	; 0x03
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	79 f4       	brne	.+30     	; 0x2386 <MTIMER1_voidSetICUSense+0x4a>
	{
	case ICU_RISING : SET_BIT(TCCR1B,TCCR1B_ICES1);break ;
    2368:	ae e4       	ldi	r26, 0x4E	; 78
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ee e4       	ldi	r30, 0x4E	; 78
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	80 64       	ori	r24, 0x40	; 64
    2374:	8c 93       	st	X, r24
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <MTIMER1_voidSetICUSense+0x4a>
	case ICU_FALLING : CLR_BIT(TCCR1B,TCCR1B_ICES1);break ;
    2378:	ae e4       	ldi	r26, 0x4E	; 78
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ee e4       	ldi	r30, 0x4E	; 78
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 7b       	andi	r24, 0xBF	; 191
    2384:	8c 93       	st	X, r24
	default:break;
	}
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <MTIMER1_voidEnableICUInterrupt>:

void MTIMER1_voidEnableICUInterrupt()
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    239a:	a9 e5       	ldi	r26, 0x59	; 89
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e9 e5       	ldi	r30, 0x59	; 89
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	80 62       	ori	r24, 0x20	; 32
    23a6:	8c 93       	st	X, r24
}
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <MTIMER1_voidDisableICUInterrupt>:
void MTIMER1_voidDisableICUInterrupt()
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    23b6:	a9 e5       	ldi	r26, 0x59	; 89
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e9 e5       	ldi	r30, 0x59	; 89
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8f 7d       	andi	r24, 0xDF	; 223
    23c2:	8c 93       	st	X, r24
}
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <MTIMER1_voidGetICUValue>:
u16 MTIMER1_voidGetICUValue()
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    23d2:	e6 e4       	ldi	r30, 0x46	; 70
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <MTIMER1_voidSetICUCallBack>:
void MTIMER1_voidSetICUCallBack(void (*Copy_pf)(void))
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <MTIMER1_voidSetICUCallBack+0x6>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01

	ICU_PF=Copy_pf ;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	90 93 8d 00 	sts	0x008D, r25
    23f6:	80 93 8c 00 	sts	0x008C, r24
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <__vector_6>:

/*ICU*/
void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	2f 93       	push	r18
    2410:	3f 93       	push	r19
    2412:	4f 93       	push	r20
    2414:	5f 93       	push	r21
    2416:	6f 93       	push	r22
    2418:	7f 93       	push	r23
    241a:	8f 93       	push	r24
    241c:	9f 93       	push	r25
    241e:	af 93       	push	r26
    2420:	bf 93       	push	r27
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
	if(ICU_PF!=NULL)
    242e:	80 91 8c 00 	lds	r24, 0x008C
    2432:	90 91 8d 00 	lds	r25, 0x008D
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	29 f0       	breq	.+10     	; 0x2444 <__vector_6+0x40>
	{
		ICU_PF() ;
    243a:	e0 91 8c 00 	lds	r30, 0x008C
    243e:	f0 91 8d 00 	lds	r31, 0x008D
    2442:	09 95       	icall
	}

}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	ff 91       	pop	r31
    244a:	ef 91       	pop	r30
    244c:	bf 91       	pop	r27
    244e:	af 91       	pop	r26
    2450:	9f 91       	pop	r25
    2452:	8f 91       	pop	r24
    2454:	7f 91       	pop	r23
    2456:	6f 91       	pop	r22
    2458:	5f 91       	pop	r21
    245a:	4f 91       	pop	r20
    245c:	3f 91       	pop	r19
    245e:	2f 91       	pop	r18
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <__vector_7>:
/*COMPA*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    246a:	1f 92       	push	r1
    246c:	0f 92       	push	r0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	0f 92       	push	r0
    2472:	11 24       	eor	r1, r1
    2474:	2f 93       	push	r18
    2476:	3f 93       	push	r19
    2478:	4f 93       	push	r20
    247a:	5f 93       	push	r21
    247c:	6f 93       	push	r22
    247e:	7f 93       	push	r23
    2480:	8f 93       	push	r24
    2482:	9f 93       	push	r25
    2484:	af 93       	push	r26
    2486:	bf 93       	push	r27
    2488:	ef 93       	push	r30
    248a:	ff 93       	push	r31
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_PF_CMP!=NULL)
    2494:	80 91 8a 00 	lds	r24, 0x008A
    2498:	90 91 8b 00 	lds	r25, 0x008B
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	29 f0       	breq	.+10     	; 0x24aa <__vector_7+0x40>
	{
		Timer1_PF_CMP();
    24a0:	e0 91 8a 00 	lds	r30, 0x008A
    24a4:	f0 91 8b 00 	lds	r31, 0x008B
    24a8:	09 95       	icall
	}
}
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	7f 91       	pop	r23
    24bc:	6f 91       	pop	r22
    24be:	5f 91       	pop	r21
    24c0:	4f 91       	pop	r20
    24c2:	3f 91       	pop	r19
    24c4:	2f 91       	pop	r18
    24c6:	0f 90       	pop	r0
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <MTIMER2_voidInit>:
/**************************************TIMER2 ******************************************/
void MTIMER2_voidInit()
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
	CLR_BIT(TCCR2,TCCR2_WGM21);
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_TOIE2);
#elif TIMER2_MODE==TIMER2_CTC_MODE
	CLR_BIT(TCCR2,TCCR2_WGM20);
    24d8:	a5 e4       	ldi	r26, 0x45	; 69
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e5 e4       	ldi	r30, 0x45	; 69
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 7b       	andi	r24, 0xBF	; 191
    24e4:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    24e6:	a5 e4       	ldi	r26, 0x45	; 69
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e4       	ldi	r30, 0x45	; 69
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	88 60       	ori	r24, 0x08	; 8
    24f2:	8c 93       	st	X, r24
	/*Normal Operation*/
	CLR_BIT(TCCR2,TCCR2_COM20);
    24f4:	a5 e4       	ldi	r26, 0x45	; 69
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e5 e4       	ldi	r30, 0x45	; 69
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8f 7e       	andi	r24, 0xEF	; 239
    2500:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
    2502:	a5 e4       	ldi	r26, 0x45	; 69
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e5 e4       	ldi	r30, 0x45	; 69
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	8f 7d       	andi	r24, 0xDF	; 223
    250e:	8c 93       	st	X, r24
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_OCIE2);
    2510:	a9 e5       	ldi	r26, 0x59	; 89
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e9 e5       	ldi	r30, 0x59	; 89
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	80 68       	ori	r24, 0x80	; 128
    251c:	8c 93       	st	X, r24
#if TIMER2_PRESCALER==TIMER2_NO_PRESCALER
	SET_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	CLR_BIT(TCCR2,TCCR2_CS22);
#elif TIMER2_PRESCALER==TIMER2_8_PRESCALER
	CLR_BIT(TCCR2,TCCR2_CS20);
    251e:	a5 e4       	ldi	r26, 0x45	; 69
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e4       	ldi	r30, 0x45	; 69
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8e 7f       	andi	r24, 0xFE	; 254
    252a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
    252c:	a5 e4       	ldi	r26, 0x45	; 69
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e5 e4       	ldi	r30, 0x45	; 69
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	82 60       	ori	r24, 0x02	; 2
    2538:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    253a:	a5 e4       	ldi	r26, 0x45	; 69
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e5 e4       	ldi	r30, 0x45	; 69
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8b 7f       	andi	r24, 0xFB	; 251
    2546:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
#else
#error " Wrong Timer2 Prescaler Configuration"
#endif
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <MTIMER2_voidDisable>:
void MTIMER2_voidDisable()
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_CS20);
    2556:	a5 e4       	ldi	r26, 0x45	; 69
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e5 e4       	ldi	r30, 0x45	; 69
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	8e 7f       	andi	r24, 0xFE	; 254
    2562:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    2564:	a5 e4       	ldi	r26, 0x45	; 69
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e5 e4       	ldi	r30, 0x45	; 69
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	8d 7f       	andi	r24, 0xFD	; 253
    2570:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    2572:	a5 e4       	ldi	r26, 0x45	; 69
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e5 e4       	ldi	r30, 0x45	; 69
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8b 7f       	andi	r24, 0xFB	; 251
    257e:	8c 93       	st	X, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <MTIMER2_voidPreload>:
void MTIMER2_voidPreload(u8 Copy_u8Preload)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload ;
    2592:	e4 e4       	ldi	r30, 0x44	; 68
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	80 83       	st	Z, r24
}
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <MTIMER2_voidSetDutyCycle>:
void MTIMER2_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8DutyCycle ;
    25ae:	e3 e4       	ldi	r30, 0x43	; 67
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	80 83       	st	Z, r24
}
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <MTIMER2_voidCompMatchValue>:
void MTIMER2_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	0f 92       	push	r0
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8ComMatchValue ;
    25ca:	e3 e4       	ldi	r30, 0x43	; 67
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	80 83       	st	Z, r24
}
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <MTIMER2_voidSetCallBack_OVF>:
void MTIMER2_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <MTIMER2_voidSetCallBack_OVF+0x6>
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_OVF=Copy_pf ;
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	90 93 8f 00 	sts	0x008F, r25
    25f0:	80 93 8e 00 	sts	0x008E, r24
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <MTIMER2_voidSetCallBack_CMP>:
void MTIMER2_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <MTIMER2_voidSetCallBack_CMP+0x6>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_CMP=Copy_pf ;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	90 93 91 00 	sts	0x0091, r25
    2614:	80 93 90 00 	sts	0x0090, r24
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <__vector_5>:
/*OVF*/
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    2622:	1f 92       	push	r1
    2624:	0f 92       	push	r0
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	0f 92       	push	r0
    262a:	11 24       	eor	r1, r1
    262c:	2f 93       	push	r18
    262e:	3f 93       	push	r19
    2630:	4f 93       	push	r20
    2632:	5f 93       	push	r21
    2634:	6f 93       	push	r22
    2636:	7f 93       	push	r23
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	ef 93       	push	r30
    2642:	ff 93       	push	r31
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_OVF!=NULL)
    264c:	80 91 8e 00 	lds	r24, 0x008E
    2650:	90 91 8f 00 	lds	r25, 0x008F
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	29 f0       	breq	.+10     	; 0x2662 <__vector_5+0x40>
	{
		Timer2_PF_OVF();
    2658:	e0 91 8e 00 	lds	r30, 0x008E
    265c:	f0 91 8f 00 	lds	r31, 0x008F
    2660:	09 95       	icall
	}
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	ff 91       	pop	r31
    2668:	ef 91       	pop	r30
    266a:	bf 91       	pop	r27
    266c:	af 91       	pop	r26
    266e:	9f 91       	pop	r25
    2670:	8f 91       	pop	r24
    2672:	7f 91       	pop	r23
    2674:	6f 91       	pop	r22
    2676:	5f 91       	pop	r21
    2678:	4f 91       	pop	r20
    267a:	3f 91       	pop	r19
    267c:	2f 91       	pop	r18
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <__vector_4>:
/*CMP*/
void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	2f 93       	push	r18
    2694:	3f 93       	push	r19
    2696:	4f 93       	push	r20
    2698:	5f 93       	push	r21
    269a:	6f 93       	push	r22
    269c:	7f 93       	push	r23
    269e:	8f 93       	push	r24
    26a0:	9f 93       	push	r25
    26a2:	af 93       	push	r26
    26a4:	bf 93       	push	r27
    26a6:	ef 93       	push	r30
    26a8:	ff 93       	push	r31
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_CMP!=NULL)
    26b2:	80 91 90 00 	lds	r24, 0x0090
    26b6:	90 91 91 00 	lds	r25, 0x0091
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <__vector_4+0x40>
	{

		Timer2_PF_CMP();
    26be:	e0 91 90 00 	lds	r30, 0x0090
    26c2:	f0 91 91 00 	lds	r31, 0x0091
    26c6:	09 95       	icall
	}
}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	ff 91       	pop	r31
    26ce:	ef 91       	pop	r30
    26d0:	bf 91       	pop	r27
    26d2:	af 91       	pop	r26
    26d4:	9f 91       	pop	r25
    26d6:	8f 91       	pop	r24
    26d8:	7f 91       	pop	r23
    26da:	6f 91       	pop	r22
    26dc:	5f 91       	pop	r21
    26de:	4f 91       	pop	r20
    26e0:	3f 91       	pop	r19
    26e2:	2f 91       	pop	r18
    26e4:	0f 90       	pop	r0
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	0f 90       	pop	r0
    26ea:	1f 90       	pop	r1
    26ec:	18 95       	reti

000026ee <TIMER1_void_SETICR>:
#include "SERVO_register.h"
#include "SERVO_config.h"
#include "SERVO_private.h"


void TIMER1_void_SETICR(u16 Copy_u16Top ){
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <TIMER1_void_SETICR+0x6>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
	ICR=Copy_u16Top;
    26fc:	e6 e4       	ldi	r30, 0x46	; 70
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <TIMER1_void_Init>:
void TIMER1_void_Init(void ){
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    271a:	af e4       	ldi	r26, 0x4F	; 79
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	ef e4       	ldi	r30, 0x4F	; 79
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7b       	andi	r24, 0xBF	; 191
    2726:	8c 93       	st	X, r24
SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2728:	af e4       	ldi	r26, 0x4F	; 79
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ef e4       	ldi	r30, 0x4F	; 79
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	80 68       	ori	r24, 0x80	; 128
    2734:	8c 93       	st	X, r24

CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2736:	af e4       	ldi	r26, 0x4F	; 79
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ef e4       	ldi	r30, 0x4F	; 79
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
SET_BIT(TCCR1A,TCCR1A_WGM11);
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	82 60       	ori	r24, 0x02	; 2
    2750:	8c 93       	st	X, r24
SET_BIT(TCCR1B,TCCR1B_WGM12);
    2752:	ae e4       	ldi	r26, 0x4E	; 78
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ee e4       	ldi	r30, 0x4E	; 78
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 60       	ori	r24, 0x08	; 8
    275e:	8c 93       	st	X, r24
SET_BIT(TCCR1B,TCCR1B_WGM13);
    2760:	ae e4       	ldi	r26, 0x4E	; 78
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ee e4       	ldi	r30, 0x4E	; 78
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 61       	ori	r24, 0x10	; 16
    276c:	8c 93       	st	X, r24

CLR_BIT(TCCR1B,TCCR1B_CS10);
    276e:	ae e4       	ldi	r26, 0x4E	; 78
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ee e4       	ldi	r30, 0x4E	; 78
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	8e 7f       	andi	r24, 0xFE	; 254
    277a:	8c 93       	st	X, r24
SET_BIT(TCCR1B,TCCR1B_CS11);
    277c:	ae e4       	ldi	r26, 0x4E	; 78
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ee e4       	ldi	r30, 0x4E	; 78
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	8c 93       	st	X, r24
CLR_BIT(TCCR1B,TCCR1B_CS12);
    278a:	ae e4       	ldi	r26, 0x4E	; 78
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	ee e4       	ldi	r30, 0x4E	; 78
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	8b 7f       	andi	r24, 0xFB	; 251
    2796:	8c 93       	st	X, r24

}
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <TIMER1_void_SETCopmareMatchValue>:
void TIMER1_void_SETCopmareMatchValue(u16 Copy_u16Value ){
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <TIMER1_void_SETCopmareMatchValue+0x6>
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
OCR1A=Copy_u16Value;
    27ac:	ea e4       	ldi	r30, 0x4A	; 74
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <SPI_voidInitMaster>:
#include "macros.h"
#include "SPI_config.h"
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_register.h"
void SPI_voidInitMaster(void){
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    27ca:	ad e2       	ldi	r26, 0x2D	; 45
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ed e2       	ldi	r30, 0x2D	; 45
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 61       	ori	r24, 0x10	; 16
    27d6:	8c 93       	st	X, r24
SET_BIT(SPCR,SPCR_SPR0);
    27d8:	ad e2       	ldi	r26, 0x2D	; 45
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ed e2       	ldi	r30, 0x2D	; 45
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	81 60       	ori	r24, 0x01	; 1
    27e4:	8c 93       	st	X, r24
CLR_BIT(SPCR,SPCR_SPR1);
    27e6:	ad e2       	ldi	r26, 0x2D	; 45
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ed e2       	ldi	r30, 0x2D	; 45
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8d 7f       	andi	r24, 0xFD	; 253
    27f2:	8c 93       	st	X, r24
CLR_BIT(SPSR,SPSR_SPI2X);
    27f4:	ae e2       	ldi	r26, 0x2E	; 46
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ee e2       	ldi	r30, 0x2E	; 46
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8e 7f       	andi	r24, 0xFE	; 254
    2800:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    2802:	ad e2       	ldi	r26, 0x2D	; 45
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ed e2       	ldi	r30, 0x2D	; 45
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 64       	ori	r24, 0x40	; 64
    280e:	8c 93       	st	X, r24
}
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <SPI_voidInitSlave>:

void SPI_voidInitSlave(void){
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    281e:	ad e2       	ldi	r26, 0x2D	; 45
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ed e2       	ldi	r30, 0x2D	; 45
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 7e       	andi	r24, 0xEF	; 239
    282a:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPE);
    282c:	ad e2       	ldi	r26, 0x2D	; 45
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ed e2       	ldi	r30, 0x2D	; 45
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	80 64       	ori	r24, 0x40	; 64
    2838:	8c 93       	st	X, r24
}
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <SPI_u8Tranceive>:

u8 SPI_u8Tranceive (u8 Copy_u8Data){
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <SPI_u8Tranceive+0x6>
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	89 83       	std	Y+1, r24	; 0x01
SPDR=Copy_u8Data;
    284c:	ef e2       	ldi	r30, 0x2F	; 47
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	80 83       	st	Z, r24
while (GET_BIT(SPSR,SPSR_SPIF)==0);
    2854:	ee e2       	ldi	r30, 0x2E	; 46
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z

return SPDR;
    285a:	ef e2       	ldi	r30, 0x2F	; 47
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z

}
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <main>:
//void int2(void);


u32 z;
void main()
{/*SERVO*/
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	c2 5b       	subi	r28, 0xB2	; 178
    2878:	d0 40       	sbci	r29, 0x00	; 0
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
	u16 i;

	Port_voidInit();
    2884:	0e 94 05 0c 	call	0x180a	; 0x180a <Port_voidInit>
	SPI_voidInitSlave();
    2888:	0e 94 0b 14 	call	0x2816	; 0x2816 <SPI_voidInitSlave>

	TIMER1_void_Init();
    288c:	0e 94 89 13 	call	0x2712	; 0x2712 <TIMER1_void_Init>

	//HLCD_voidInt();
	MGIE_voidEnable();
    2890:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MGIE_voidEnable>
	//CLCD_voidSendString("Press 2 for Step");
	//	_delay_ms(1000);
	while(1)
	{

		z=SPI_u8Tranceive(50);
    2894:	82 e3       	ldi	r24, 0x32	; 50
    2896:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_u8Tranceive>
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	80 93 93 00 	sts	0x0093, r24
    28a6:	90 93 94 00 	sts	0x0094, r25
    28aa:	a0 93 95 00 	sts	0x0095, r26
    28ae:	b0 93 96 00 	sts	0x0096, r27
		if (z>=50)
    28b2:	80 91 93 00 	lds	r24, 0x0093
    28b6:	90 91 94 00 	lds	r25, 0x0094
    28ba:	a0 91 95 00 	lds	r26, 0x0095
    28be:	b0 91 96 00 	lds	r27, 0x0096
    28c2:	82 33       	cpi	r24, 0x32	; 50
    28c4:	91 05       	cpc	r25, r1
    28c6:	a1 05       	cpc	r26, r1
    28c8:	b1 05       	cpc	r27, r1
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <main+0x64>
    28cc:	c3 c0       	rjmp	.+390    	; 0x2a54 <main+0x1ea>
		{


				MDIO_u8SetPortValue(DIO_PORTA,~z);
    28ce:	80 91 93 00 	lds	r24, 0x0093
    28d2:	90 91 94 00 	lds	r25, 0x0094
    28d6:	a0 91 95 00 	lds	r26, 0x0095
    28da:	b0 91 96 00 	lds	r27, 0x0096
    28de:	98 2f       	mov	r25, r24
    28e0:	90 95       	com	r25
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	69 2f       	mov	r22, r25
    28e6:	0e 94 2d 0b 	call	0x165a	; 0x165a <MDIO_u8SetPortValue>
    28ea:	fe 01       	movw	r30, r28
    28ec:	eb 55       	subi	r30, 0x5B	; 91
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 ee       	ldi	r26, 0xE0	; 224
    28f6:	b0 e4       	ldi	r27, 0x40	; 64
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2900:	8e 01       	movw	r16, r28
    2902:	0f 55       	subi	r16, 0x5F	; 95
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	eb 55       	subi	r30, 0x5B	; 91
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	f8 01       	movw	r30, r16
    2926:	80 83       	st	Z, r24
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	a2 83       	std	Z+2, r26	; 0x02
    292c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    292e:	fe 01       	movw	r30, r28
    2930:	ef 55       	subi	r30, 0x5F	; 95
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	44 f4       	brge	.+16     	; 0x295c <main+0xf2>
		__ticks = 1;
    294c:	fe 01       	movw	r30, r28
    294e:	e1 56       	subi	r30, 0x61	; 97
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	64 c0       	rjmp	.+200    	; 0x2a24 <main+0x1ba>
	else if (__tmp > 65535)
    295c:	fe 01       	movw	r30, r28
    295e:	ef 55       	subi	r30, 0x5F	; 95
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	3f ef       	ldi	r19, 0xFF	; 255
    296e:	4f e7       	ldi	r20, 0x7F	; 127
    2970:	57 e4       	ldi	r21, 0x47	; 71
    2972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2976:	18 16       	cp	r1, r24
    2978:	0c f0       	brlt	.+2      	; 0x297c <main+0x112>
    297a:	43 c0       	rjmp	.+134    	; 0x2a02 <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	fe 01       	movw	r30, r28
    297e:	eb 55       	subi	r30, 0x5B	; 91
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8e 01       	movw	r16, r28
    299c:	01 56       	subi	r16, 0x61	; 97
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	1f c0       	rjmp	.+62     	; 0x29f2 <main+0x188>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 56       	subi	r30, 0x63	; 99
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	88 ec       	ldi	r24, 0xC8	; 200
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	fe 01       	movw	r30, r28
    29c4:	e3 56       	subi	r30, 0x63	; 99
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <main+0x162>
    29d0:	fe 01       	movw	r30, r28
    29d2:	e3 56       	subi	r30, 0x63	; 99
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	de 01       	movw	r26, r28
    29dc:	a1 56       	subi	r26, 0x61	; 97
    29de:	bf 4f       	sbci	r27, 0xFF	; 255
    29e0:	fe 01       	movw	r30, r28
    29e2:	e1 56       	subi	r30, 0x61	; 97
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	11 96       	adiw	r26, 0x01	; 1
    29ee:	9c 93       	st	X, r25
    29f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	fe 01       	movw	r30, r28
    29f4:	e1 56       	subi	r30, 0x61	; 97
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	d1 f6       	brne	.-76     	; 0x29b4 <main+0x14a>
    2a00:	67 c1       	rjmp	.+718    	; 0x2cd0 <main+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	8e 01       	movw	r16, r28
    2a04:	01 56       	subi	r16, 0x61	; 97
    2a06:	1f 4f       	sbci	r17, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ef 55       	subi	r30, 0x5F	; 95
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	de 01       	movw	r26, r28
    2a26:	a5 56       	subi	r26, 0x65	; 101
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e1 56       	subi	r30, 0x61	; 97
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	9c 93       	st	X, r25
    2a38:	8e 93       	st	-X, r24
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e5 56       	subi	r30, 0x65	; 101
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <main+0x1da>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e5 56       	subi	r30, 0x65	; 101
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	3e c1       	rjmp	.+636    	; 0x2cd0 <main+0x466>
				_delay_ms(7);

		}
		else if(z<50)
    2a54:	80 91 93 00 	lds	r24, 0x0093
    2a58:	90 91 94 00 	lds	r25, 0x0094
    2a5c:	a0 91 95 00 	lds	r26, 0x0095
    2a60:	b0 91 96 00 	lds	r27, 0x0096
    2a64:	82 33       	cpi	r24, 0x32	; 50
    2a66:	91 05       	cpc	r25, r1
    2a68:	a1 05       	cpc	r26, r1
    2a6a:	b1 05       	cpc	r27, r1
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <main+0x206>
    2a6e:	30 c1       	rjmp	.+608    	; 0x2cd0 <main+0x466>
    2a70:	fe 01       	movw	r30, r28
    2a72:	e9 56       	subi	r30, 0x69	; 105
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2a7c:	b0 e4       	ldi	r27, 0x40	; 64
    2a7e:	80 83       	st	Z, r24
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	a2 83       	std	Z+2, r26	; 0x02
    2a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a86:	8e 01       	movw	r16, r28
    2a88:	0d 56       	subi	r16, 0x6D	; 109
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e9 56       	subi	r30, 0x69	; 105
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	4a ef       	ldi	r20, 0xFA	; 250
    2aa0:	54 e4       	ldi	r21, 0x44	; 68
    2aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	f8 01       	movw	r30, r16
    2aac:	80 83       	st	Z, r24
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	a2 83       	std	Z+2, r26	; 0x02
    2ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 56       	subi	r30, 0x6D	; 109
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ace:	88 23       	and	r24, r24
    2ad0:	44 f4       	brge	.+16     	; 0x2ae2 <main+0x278>
		__ticks = 1;
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ef 56       	subi	r30, 0x6F	; 111
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
    2ae0:	64 c0       	rjmp	.+200    	; 0x2baa <main+0x340>
	else if (__tmp > 65535)
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ed 56       	subi	r30, 0x6D	; 109
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	0c f0       	brlt	.+2      	; 0x2b02 <main+0x298>
    2b00:	43 c0       	rjmp	.+134    	; 0x2b88 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	fe 01       	movw	r30, r28
    2b04:	e9 56       	subi	r30, 0x69	; 105
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8e 01       	movw	r16, r28
    2b22:	0f 56       	subi	r16, 0x6F	; 111
    2b24:	1f 4f       	sbci	r17, 0xFF	; 255
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	f8 01       	movw	r30, r16
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	80 83       	st	Z, r24
    2b38:	1f c0       	rjmp	.+62     	; 0x2b78 <main+0x30e>
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e1 57       	subi	r30, 0x71	; 113
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	88 ec       	ldi	r24, 0xC8	; 200
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e1 57       	subi	r30, 0x71	; 113
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <main+0x2e8>
    2b56:	fe 01       	movw	r30, r28
    2b58:	e1 57       	subi	r30, 0x71	; 113
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b60:	de 01       	movw	r26, r28
    2b62:	af 56       	subi	r26, 0x6F	; 111
    2b64:	bf 4f       	sbci	r27, 0xFF	; 255
    2b66:	fe 01       	movw	r30, r28
    2b68:	ef 56       	subi	r30, 0x6F	; 111
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	11 96       	adiw	r26, 0x01	; 1
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ef 56       	subi	r30, 0x6F	; 111
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	d1 f6       	brne	.-76     	; 0x2b3a <main+0x2d0>
    2b86:	27 c0       	rjmp	.+78     	; 0x2bd6 <main+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	8e 01       	movw	r16, r28
    2b8a:	0f 56       	subi	r16, 0x6F	; 111
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ed 56       	subi	r30, 0x6D	; 109
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	de 01       	movw	r26, r28
    2bac:	a3 57       	subi	r26, 0x73	; 115
    2bae:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ef 56       	subi	r30, 0x6F	; 111
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	8d 93       	st	X+, r24
    2bbc:	9c 93       	st	X, r25
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e3 57       	subi	r30, 0x73	; 115
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <main+0x35e>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e3 57       	subi	r30, 0x73	; 115
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
		{
			_delay_ms(5);

			static u8 f=0;
			HSSD_voidEnable(SSD_PORTD,SSD_PIN0);
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	0e 94 f5 07 	call	0xfea	; 0xfea <HSSD_voidEnable>
			int D1=z%10 ;
    2bde:	80 91 93 00 	lds	r24, 0x0093
    2be2:	90 91 94 00 	lds	r25, 0x0094
    2be6:	a0 91 95 00 	lds	r26, 0x0095
    2bea:	b0 91 96 00 	lds	r27, 0x0096
    2bee:	2a e0       	ldi	r18, 0x0A	; 10
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e0       	ldi	r20, 0x00	; 0
    2bf4:	50 e0       	ldi	r21, 0x00	; 0
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__udivmodsi4>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	fe 01       	movw	r30, r28
    2c04:	e5 55       	subi	r30, 0x55	; 85
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
			int D2=z/10 ;
    2c0c:	80 91 93 00 	lds	r24, 0x0093
    2c10:	90 91 94 00 	lds	r25, 0x0094
    2c14:	a0 91 95 00 	lds	r26, 0x0095
    2c18:	b0 91 96 00 	lds	r27, 0x0096
    2c1c:	2a e0       	ldi	r18, 0x0A	; 10
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__udivmodsi4>
    2c2c:	da 01       	movw	r26, r20
    2c2e:	c9 01       	movw	r24, r18
    2c30:	fe 01       	movw	r30, r28
    2c32:	e7 55       	subi	r30, 0x57	; 87
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
			if (f==0)
    2c3a:	80 91 92 00 	lds	r24, 0x0092
    2c3e:	88 23       	and	r24, r24
    2c40:	91 f4       	brne	.+36     	; 0x2c66 <main+0x3fc>
			{
				HSSD_voidEnable(SSD_PORTD,SSD_PIN0);
    2c42:	83 e0       	ldi	r24, 0x03	; 3
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	0e 94 f5 07 	call	0xfea	; 0xfea <HSSD_voidEnable>
				HSSD_voidDisable(SSD_PORTD,SSD_PIN1);
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	0e 94 06 08 	call	0x100c	; 0x100c <HSSD_voidDisable>
				HSSD_voidSendNumber(D1);
    2c52:	fe 01       	movw	r30, r28
    2c54:	e5 55       	subi	r30, 0x55	; 85
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	0e 94 17 08 	call	0x102e	; 0x102e <HSSD_voidSendNumber>
				f=1 ;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 92 00 	sts	0x0092, r24
    2c64:	10 c0       	rjmp	.+32     	; 0x2c86 <main+0x41c>
			}
			else
			{
				HSSD_voidDisable(SSD_PORTD,SSD_PIN0);
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	0e 94 06 08 	call	0x100c	; 0x100c <HSSD_voidDisable>
				HSSD_voidEnable(SSD_PORTD,SSD_PIN1);
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	0e 94 f5 07 	call	0xfea	; 0xfea <HSSD_voidEnable>
				HSSD_voidSendNumber(D2);
    2c76:	fe 01       	movw	r30, r28
    2c78:	e7 55       	subi	r30, 0x57	; 87
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	0e 94 17 08 	call	0x102e	; 0x102e <HSSD_voidSendNumber>
				f=0 ;
    2c82:	10 92 92 00 	sts	0x0092, r1
			}
			//	MDIO_u8SetPortValue(DIO_PORTA,DIO_LOW);
			if ((z>35)&&(z<40))
    2c86:	80 91 93 00 	lds	r24, 0x0093
    2c8a:	90 91 94 00 	lds	r25, 0x0094
    2c8e:	a0 91 95 00 	lds	r26, 0x0095
    2c92:	b0 91 96 00 	lds	r27, 0x0096
    2c96:	84 32       	cpi	r24, 0x24	; 36
    2c98:	91 05       	cpc	r25, r1
    2c9a:	a1 05       	cpc	r26, r1
    2c9c:	b1 05       	cpc	r27, r1
    2c9e:	98 f0       	brcs	.+38     	; 0x2cc6 <main+0x45c>
    2ca0:	80 91 93 00 	lds	r24, 0x0093
    2ca4:	90 91 94 00 	lds	r25, 0x0094
    2ca8:	a0 91 95 00 	lds	r26, 0x0095
    2cac:	b0 91 96 00 	lds	r27, 0x0096
    2cb0:	88 32       	cpi	r24, 0x28	; 40
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	a1 05       	cpc	r26, r1
    2cb6:	b1 05       	cpc	r27, r1
    2cb8:	30 f4       	brcc	.+12     	; 0x2cc6 <main+0x45c>
			{
				MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	67 e0       	ldi	r22, 0x07	; 7
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    2cc4:	05 c0       	rjmp	.+10     	; 0x2cd0 <main+0x466>

			}
			else
			{
				MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    2cc6:	83 e0       	ldi	r24, 0x03	; 3
    2cc8:	67 e0       	ldi	r22, 0x07	; 7
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>

			}

		}
		switch (z){
    2cd0:	80 91 93 00 	lds	r24, 0x0093
    2cd4:	90 91 94 00 	lds	r25, 0x0094
    2cd8:	a0 91 95 00 	lds	r26, 0x0095
    2cdc:	b0 91 96 00 	lds	r27, 0x0096
    2ce0:	c1 55       	subi	r28, 0x51	; 81
    2ce2:	df 4f       	sbci	r29, 0xFF	; 255
    2ce4:	88 83       	st	Y, r24
    2ce6:	99 83       	std	Y+1, r25	; 0x01
    2ce8:	aa 83       	std	Y+2, r26	; 0x02
    2cea:	bb 83       	std	Y+3, r27	; 0x03
    2cec:	cf 5a       	subi	r28, 0xAF	; 175
    2cee:	d0 40       	sbci	r29, 0x00	; 0
    2cf0:	c1 55       	subi	r28, 0x51	; 81
    2cf2:	df 4f       	sbci	r29, 0xFF	; 255
    2cf4:	88 81       	ld	r24, Y
    2cf6:	99 81       	ldd	r25, Y+1	; 0x01
    2cf8:	aa 81       	ldd	r26, Y+2	; 0x02
    2cfa:	bb 81       	ldd	r27, Y+3	; 0x03
    2cfc:	cf 5a       	subi	r28, 0xAF	; 175
    2cfe:	d0 40       	sbci	r29, 0x00	; 0
    2d00:	83 33       	cpi	r24, 0x33	; 51
    2d02:	91 05       	cpc	r25, r1
    2d04:	a1 05       	cpc	r26, r1
    2d06:	b1 05       	cpc	r27, r1
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <main+0x4a2>
    2d0a:	ce c1       	rjmp	.+924    	; 0x30a8 <main+0x83e>
    2d0c:	c1 55       	subi	r28, 0x51	; 81
    2d0e:	df 4f       	sbci	r29, 0xFF	; 255
    2d10:	88 81       	ld	r24, Y
    2d12:	99 81       	ldd	r25, Y+1	; 0x01
    2d14:	aa 81       	ldd	r26, Y+2	; 0x02
    2d16:	bb 81       	ldd	r27, Y+3	; 0x03
    2d18:	cf 5a       	subi	r28, 0xAF	; 175
    2d1a:	d0 40       	sbci	r29, 0x00	; 0
    2d1c:	84 33       	cpi	r24, 0x34	; 52
    2d1e:	91 05       	cpc	r25, r1
    2d20:	a1 05       	cpc	r26, r1
    2d22:	b1 05       	cpc	r27, r1
    2d24:	e0 f4       	brcc	.+56     	; 0x2d5e <main+0x4f4>
    2d26:	c1 55       	subi	r28, 0x51	; 81
    2d28:	df 4f       	sbci	r29, 0xFF	; 255
    2d2a:	88 81       	ld	r24, Y
    2d2c:	99 81       	ldd	r25, Y+1	; 0x01
    2d2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d30:	bb 81       	ldd	r27, Y+3	; 0x03
    2d32:	cf 5a       	subi	r28, 0xAF	; 175
    2d34:	d0 40       	sbci	r29, 0x00	; 0
    2d36:	81 33       	cpi	r24, 0x31	; 49
    2d38:	91 05       	cpc	r25, r1
    2d3a:	a1 05       	cpc	r26, r1
    2d3c:	b1 05       	cpc	r27, r1
    2d3e:	d1 f1       	breq	.+116    	; 0x2db4 <main+0x54a>
    2d40:	c1 55       	subi	r28, 0x51	; 81
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	88 81       	ld	r24, Y
    2d46:	99 81       	ldd	r25, Y+1	; 0x01
    2d48:	aa 81       	ldd	r26, Y+2	; 0x02
    2d4a:	bb 81       	ldd	r27, Y+3	; 0x03
    2d4c:	cf 5a       	subi	r28, 0xAF	; 175
    2d4e:	d0 40       	sbci	r29, 0x00	; 0
    2d50:	82 33       	cpi	r24, 0x32	; 50
    2d52:	91 05       	cpc	r25, r1
    2d54:	a1 05       	cpc	r26, r1
    2d56:	b1 05       	cpc	r27, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <main+0x4f2>
    2d5a:	e9 c0       	rjmp	.+466    	; 0x2f2e <main+0x6c4>
    2d5c:	9b cd       	rjmp	.-1226   	; 0x2894 <main+0x2a>
    2d5e:	c1 55       	subi	r28, 0x51	; 81
    2d60:	df 4f       	sbci	r29, 0xFF	; 255
    2d62:	88 81       	ld	r24, Y
    2d64:	99 81       	ldd	r25, Y+1	; 0x01
    2d66:	aa 81       	ldd	r26, Y+2	; 0x02
    2d68:	bb 81       	ldd	r27, Y+3	; 0x03
    2d6a:	cf 5a       	subi	r28, 0xAF	; 175
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	85 33       	cpi	r24, 0x35	; 53
    2d70:	91 05       	cpc	r25, r1
    2d72:	a1 05       	cpc	r26, r1
    2d74:	b1 05       	cpc	r27, r1
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <main+0x510>
    2d78:	a3 c1       	rjmp	.+838    	; 0x30c0 <main+0x856>
    2d7a:	c1 55       	subi	r28, 0x51	; 81
    2d7c:	df 4f       	sbci	r29, 0xFF	; 255
    2d7e:	88 81       	ld	r24, Y
    2d80:	99 81       	ldd	r25, Y+1	; 0x01
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	bb 81       	ldd	r27, Y+3	; 0x03
    2d86:	cf 5a       	subi	r28, 0xAF	; 175
    2d88:	d0 40       	sbci	r29, 0x00	; 0
    2d8a:	85 33       	cpi	r24, 0x35	; 53
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	a1 05       	cpc	r26, r1
    2d90:	b1 05       	cpc	r27, r1
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <main+0x52c>
    2d94:	8f c1       	rjmp	.+798    	; 0x30b4 <main+0x84a>
    2d96:	c1 55       	subi	r28, 0x51	; 81
    2d98:	df 4f       	sbci	r29, 0xFF	; 255
    2d9a:	88 81       	ld	r24, Y
    2d9c:	99 81       	ldd	r25, Y+1	; 0x01
    2d9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2da0:	bb 81       	ldd	r27, Y+3	; 0x03
    2da2:	cf 5a       	subi	r28, 0xAF	; 175
    2da4:	d0 40       	sbci	r29, 0x00	; 0
    2da6:	86 33       	cpi	r24, 0x36	; 54
    2da8:	91 05       	cpc	r25, r1
    2daa:	a1 05       	cpc	r26, r1
    2dac:	b1 05       	cpc	r27, r1
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <main+0x548>
    2db0:	92 c4       	rjmp	.+2340   	; 0x36d6 <main+0xe6c>
    2db2:	70 cd       	rjmp	.-1312   	; 0x2894 <main+0x2a>

		case '1':
			TIMER1_void_SETICR(20000);
    2db4:	80 e2       	ldi	r24, 0x20	; 32
    2db6:	9e e4       	ldi	r25, 0x4E	; 78
    2db8:	0e 94 77 13 	call	0x26ee	; 0x26ee <TIMER1_void_SETICR>

			TIMER1_void_SETCopmareMatchValue(2500);
    2dbc:	84 ec       	ldi	r24, 0xC4	; 196
    2dbe:	99 e0       	ldi	r25, 0x09	; 9
    2dc0:	0e 94 cf 13 	call	0x279e	; 0x279e <TIMER1_void_SETCopmareMatchValue>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 57       	subi	r30, 0x77	; 119
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 e2       	ldi	r26, 0x20	; 32
    2dd0:	b1 e4       	ldi	r27, 0x41	; 65
    2dd2:	80 83       	st	Z, r24
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	a2 83       	std	Z+2, r26	; 0x02
    2dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	8e 01       	movw	r16, r28
    2ddc:	0b 57       	subi	r16, 0x7B	; 123
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 57       	subi	r30, 0x77	; 119
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a ef       	ldi	r20, 0xFA	; 250
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	f8 01       	movw	r30, r16
    2e00:	80 83       	st	Z, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	a2 83       	std	Z+2, r26	; 0x02
    2e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	eb 57       	subi	r30, 0x7B	; 123
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e8       	ldi	r20, 0x80	; 128
    2e1c:	5f e3       	ldi	r21, 0x3F	; 63
    2e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e22:	88 23       	and	r24, r24
    2e24:	44 f4       	brge	.+16     	; 0x2e36 <main+0x5cc>
		__ticks = 1;
    2e26:	fe 01       	movw	r30, r28
    2e28:	ed 57       	subi	r30, 0x7D	; 125
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
    2e34:	64 c0       	rjmp	.+200    	; 0x2efe <main+0x694>
	else if (__tmp > 65535)
    2e36:	fe 01       	movw	r30, r28
    2e38:	eb 57       	subi	r30, 0x7B	; 123
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	0c f0       	brlt	.+2      	; 0x2e56 <main+0x5ec>
    2e54:	43 c0       	rjmp	.+134    	; 0x2edc <main+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	fe 01       	movw	r30, r28
    2e58:	e7 57       	subi	r30, 0x77	; 119
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8e 01       	movw	r16, r28
    2e76:	0d 57       	subi	r16, 0x7D	; 125
    2e78:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
    2e8c:	1f c0       	rjmp	.+62     	; 0x2ecc <main+0x662>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ef 57       	subi	r30, 0x7F	; 127
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	88 ec       	ldi	r24, 0xC8	; 200
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ef 57       	subi	r30, 0x7F	; 127
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <main+0x63c>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ef 57       	subi	r30, 0x7F	; 127
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	de 01       	movw	r26, r28
    2eb6:	ad 57       	subi	r26, 0x7D	; 125
    2eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ed 57       	subi	r30, 0x7D	; 125
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	9c 93       	st	X, r25
    2eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ed 57       	subi	r30, 0x7D	; 125
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	d1 f6       	brne	.-76     	; 0x2e8e <main+0x624>
    2eda:	dc cc       	rjmp	.-1608   	; 0x2894 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2edc:	8e 01       	movw	r16, r28
    2ede:	0d 57       	subi	r16, 0x7D	; 125
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	eb 57       	subi	r30, 0x7B	; 123
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	f8 01       	movw	r30, r16
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	de 01       	movw	r26, r28
    2f00:	a1 58       	subi	r26, 0x81	; 129
    2f02:	bf 4f       	sbci	r27, 0xFF	; 255
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 57       	subi	r30, 0x7D	; 125
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	11 96       	adiw	r26, 0x01	; 1
    2f10:	9c 93       	st	X, r25
    2f12:	8e 93       	st	-X, r24
    2f14:	fe 01       	movw	r30, r28
    2f16:	e1 58       	subi	r30, 0x81	; 129
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <main+0x6b4>
    2f22:	fe 01       	movw	r30, r28
    2f24:	e1 58       	subi	r30, 0x81	; 129
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	b3 cc       	rjmp	.-1690   	; 0x2894 <main+0x2a>
			_delay_ms(10);
			break;
		case '2':
			TIMER1_void_SETICR(20000);
    2f2e:	80 e2       	ldi	r24, 0x20	; 32
    2f30:	9e e4       	ldi	r25, 0x4E	; 78
    2f32:	0e 94 77 13 	call	0x26ee	; 0x26ee <TIMER1_void_SETICR>

			TIMER1_void_SETCopmareMatchValue(500);
    2f36:	84 ef       	ldi	r24, 0xF4	; 244
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	0e 94 cf 13 	call	0x279e	; 0x279e <TIMER1_void_SETCopmareMatchValue>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e5 58       	subi	r30, 0x85	; 133
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	a0 e2       	ldi	r26, 0x20	; 32
    2f4a:	b1 e4       	ldi	r27, 0x41	; 65
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	8e 01       	movw	r16, r28
    2f56:	09 58       	subi	r16, 0x89	; 137
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e5 58       	subi	r30, 0x85	; 133
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	60 81       	ld	r22, Z
    2f62:	71 81       	ldd	r23, Z+1	; 0x01
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	93 81       	ldd	r25, Z+3	; 0x03
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	4a ef       	ldi	r20, 0xFA	; 250
    2f6e:	54 e4       	ldi	r21, 0x44	; 68
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	80 83       	st	Z, r24
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	a2 83       	std	Z+2, r26	; 0x02
    2f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f82:	fe 01       	movw	r30, r28
    2f84:	e9 58       	subi	r30, 0x89	; 137
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	44 f4       	brge	.+16     	; 0x2fb0 <main+0x746>
		__ticks = 1;
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	eb 58       	subi	r30, 0x8B	; 139
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    2fae:	64 c0       	rjmp	.+200    	; 0x3078 <main+0x80e>
	else if (__tmp > 65535)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e9 58       	subi	r30, 0x89	; 137
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	3f ef       	ldi	r19, 0xFF	; 255
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	57 e4       	ldi	r21, 0x47	; 71
    2fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	0c f0       	brlt	.+2      	; 0x2fd0 <main+0x766>
    2fce:	43 c0       	rjmp	.+134    	; 0x3056 <main+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e5 58       	subi	r30, 0x85	; 133
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	60 81       	ld	r22, Z
    2fd8:	71 81       	ldd	r23, Z+1	; 0x01
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	93 81       	ldd	r25, Z+3	; 0x03
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e2       	ldi	r20, 0x20	; 32
    2fe4:	51 e4       	ldi	r21, 0x41	; 65
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8e 01       	movw	r16, r28
    2ff0:	0b 58       	subi	r16, 0x8B	; 139
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
    3006:	1f c0       	rjmp	.+62     	; 0x3046 <main+0x7dc>
    3008:	fe 01       	movw	r30, r28
    300a:	ed 58       	subi	r30, 0x8D	; 141
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	88 ec       	ldi	r24, 0xC8	; 200
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	fe 01       	movw	r30, r28
    3018:	ed 58       	subi	r30, 0x8D	; 141
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <main+0x7b6>
    3024:	fe 01       	movw	r30, r28
    3026:	ed 58       	subi	r30, 0x8D	; 141
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302e:	de 01       	movw	r26, r28
    3030:	ab 58       	subi	r26, 0x8B	; 139
    3032:	bf 4f       	sbci	r27, 0xFF	; 255
    3034:	fe 01       	movw	r30, r28
    3036:	eb 58       	subi	r30, 0x8B	; 139
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	11 96       	adiw	r26, 0x01	; 1
    3042:	9c 93       	st	X, r25
    3044:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3046:	fe 01       	movw	r30, r28
    3048:	eb 58       	subi	r30, 0x8B	; 139
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	d1 f6       	brne	.-76     	; 0x3008 <main+0x79e>
    3054:	1f cc       	rjmp	.-1986   	; 0x2894 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	8e 01       	movw	r16, r28
    3058:	0b 58       	subi	r16, 0x8B	; 139
    305a:	1f 4f       	sbci	r17, 0xFF	; 255
    305c:	fe 01       	movw	r30, r28
    305e:	e9 58       	subi	r30, 0x89	; 137
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	f8 01       	movw	r30, r16
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
    3078:	de 01       	movw	r26, r28
    307a:	af 58       	subi	r26, 0x8F	; 143
    307c:	bf 4f       	sbci	r27, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	eb 58       	subi	r30, 0x8B	; 139
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	11 96       	adiw	r26, 0x01	; 1
    308a:	9c 93       	st	X, r25
    308c:	8e 93       	st	-X, r24
    308e:	fe 01       	movw	r30, r28
    3090:	ef 58       	subi	r30, 0x8F	; 143
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <main+0x82e>
    309c:	fe 01       	movw	r30, r28
    309e:	ef 58       	subi	r30, 0x8F	; 143
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	f6 cb       	rjmp	.-2068   	; 0x2894 <main+0x2a>
			_delay_ms(10);
			break;
		case '3':
			MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	67 e0       	ldi	r22, 0x07	; 7
    30ac:	41 e0       	ldi	r20, 0x01	; 1
    30ae:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    30b2:	f0 cb       	rjmp	.-2080   	; 0x2894 <main+0x2a>
			break;
		case '4':
			MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    30b4:	83 e0       	ldi	r24, 0x03	; 3
    30b6:	67 e0       	ldi	r22, 0x07	; 7
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    30be:	ea cb       	rjmp	.-2092   	; 0x2894 <main+0x2a>
			break;
		case '5':

			for(i=0;i<386;i++)
    30c0:	fe 01       	movw	r30, r28
    30c2:	e3 55       	subi	r30, 0x53	; 83
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	11 82       	std	Z+1, r1	; 0x01
    30c8:	10 82       	st	Z, r1
    30ca:	fa c2       	rjmp	.+1524   	; 0x36c0 <main+0xe56>
			{
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	62 e0       	ldi	r22, 0x02	; 2
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	63 e0       	ldi	r22, 0x03	; 3
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    30f4:	fe 01       	movw	r30, r28
    30f6:	e3 59       	subi	r30, 0x93	; 147
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	a0 e0       	ldi	r26, 0x00	; 0
    3100:	b0 e4       	ldi	r27, 0x40	; 64
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	8e 01       	movw	r16, r28
    310c:	07 59       	subi	r16, 0x97	; 151
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	e3 59       	subi	r30, 0x93	; 147
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	f8 01       	movw	r30, r16
    3130:	80 83       	st	Z, r24
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	a2 83       	std	Z+2, r26	; 0x02
    3136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3138:	fe 01       	movw	r30, r28
    313a:	e7 59       	subi	r30, 0x97	; 151
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	44 f4       	brge	.+16     	; 0x3166 <main+0x8fc>
		__ticks = 1;
    3156:	fe 01       	movw	r30, r28
    3158:	e9 59       	subi	r30, 0x99	; 153
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	64 c0       	rjmp	.+200    	; 0x322e <main+0x9c4>
	else if (__tmp > 65535)
    3166:	fe 01       	movw	r30, r28
    3168:	e7 59       	subi	r30, 0x97	; 151
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	0c f0       	brlt	.+2      	; 0x3186 <main+0x91c>
    3184:	43 c0       	rjmp	.+134    	; 0x320c <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	fe 01       	movw	r30, r28
    3188:	e3 59       	subi	r30, 0x93	; 147
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8e 01       	movw	r16, r28
    31a6:	09 59       	subi	r16, 0x99	; 153
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	f8 01       	movw	r30, r16
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	1f c0       	rjmp	.+62     	; 0x31fc <main+0x992>
    31be:	fe 01       	movw	r30, r28
    31c0:	eb 59       	subi	r30, 0x9B	; 155
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	fe 01       	movw	r30, r28
    31ce:	eb 59       	subi	r30, 0x9B	; 155
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <main+0x96c>
    31da:	fe 01       	movw	r30, r28
    31dc:	eb 59       	subi	r30, 0x9B	; 155
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	de 01       	movw	r26, r28
    31e6:	a9 59       	subi	r26, 0x99	; 153
    31e8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ea:	fe 01       	movw	r30, r28
    31ec:	e9 59       	subi	r30, 0x99	; 153
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	11 96       	adiw	r26, 0x01	; 1
    31f8:	9c 93       	st	X, r25
    31fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 59       	subi	r30, 0x99	; 153
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	d1 f6       	brne	.-76     	; 0x31be <main+0x954>
    320a:	27 c0       	rjmp	.+78     	; 0x325a <main+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	8e 01       	movw	r16, r28
    320e:	09 59       	subi	r16, 0x99	; 153
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e7 59       	subi	r30, 0x97	; 151
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	f8 01       	movw	r30, r16
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	de 01       	movw	r26, r28
    3230:	ad 59       	subi	r26, 0x9D	; 157
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	e9 59       	subi	r30, 0x99	; 153
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	8d 93       	st	X+, r24
    3240:	9c 93       	st	X, r25
    3242:	fe 01       	movw	r30, r28
    3244:	ed 59       	subi	r30, 0x9D	; 157
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <main+0x9e2>
    3250:	fe 01       	movw	r30, r28
    3252:	ed 59       	subi	r30, 0x9D	; 157
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	41 e0       	ldi	r20, 0x01	; 1
    326a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	62 e0       	ldi	r22, 0x02	; 2
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	63 e0       	ldi	r22, 0x03	; 3
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    3282:	fe 01       	movw	r30, r28
    3284:	e1 5a       	subi	r30, 0xA1	; 161
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 e0       	ldi	r26, 0x00	; 0
    328e:	b0 e4       	ldi	r27, 0x40	; 64
    3290:	80 83       	st	Z, r24
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	a2 83       	std	Z+2, r26	; 0x02
    3296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	8e 01       	movw	r16, r28
    329a:	05 5a       	subi	r16, 0xA5	; 165
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	fe 01       	movw	r30, r28
    32a0:	e1 5a       	subi	r30, 0xA1	; 161
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4a ef       	ldi	r20, 0xFA	; 250
    32b2:	54 e4       	ldi	r21, 0x44	; 68
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	f8 01       	movw	r30, r16
    32be:	80 83       	st	Z, r24
    32c0:	91 83       	std	Z+1, r25	; 0x01
    32c2:	a2 83       	std	Z+2, r26	; 0x02
    32c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32c6:	fe 01       	movw	r30, r28
    32c8:	e5 5a       	subi	r30, 0xA5	; 165
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	60 81       	ld	r22, Z
    32ce:	71 81       	ldd	r23, Z+1	; 0x01
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	93 81       	ldd	r25, Z+3	; 0x03
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	44 f4       	brge	.+16     	; 0x32f4 <main+0xa8a>
		__ticks = 1;
    32e4:	fe 01       	movw	r30, r28
    32e6:	e7 5a       	subi	r30, 0xA7	; 167
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	80 83       	st	Z, r24
    32f2:	64 c0       	rjmp	.+200    	; 0x33bc <main+0xb52>
	else if (__tmp > 65535)
    32f4:	fe 01       	movw	r30, r28
    32f6:	e5 5a       	subi	r30, 0xA5	; 165
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	3f ef       	ldi	r19, 0xFF	; 255
    3306:	4f e7       	ldi	r20, 0x7F	; 127
    3308:	57 e4       	ldi	r21, 0x47	; 71
    330a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330e:	18 16       	cp	r1, r24
    3310:	0c f0       	brlt	.+2      	; 0x3314 <main+0xaaa>
    3312:	43 c0       	rjmp	.+134    	; 0x339a <main+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3314:	fe 01       	movw	r30, r28
    3316:	e1 5a       	subi	r30, 0xA1	; 161
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	93 81       	ldd	r25, Z+3	; 0x03
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e2       	ldi	r20, 0x20	; 32
    3328:	51 e4       	ldi	r21, 0x41	; 65
    332a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	8e 01       	movw	r16, r28
    3334:	07 5a       	subi	r16, 0xA7	; 167
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	1f c0       	rjmp	.+62     	; 0x338a <main+0xb20>
    334c:	fe 01       	movw	r30, r28
    334e:	e9 5a       	subi	r30, 0xA9	; 169
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	88 ec       	ldi	r24, 0xC8	; 200
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
    335a:	fe 01       	movw	r30, r28
    335c:	e9 5a       	subi	r30, 0xA9	; 169
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 81       	ld	r24, Z
    3362:	91 81       	ldd	r25, Z+1	; 0x01
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <main+0xafa>
    3368:	fe 01       	movw	r30, r28
    336a:	e9 5a       	subi	r30, 0xA9	; 169
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3372:	de 01       	movw	r26, r28
    3374:	a7 5a       	subi	r26, 0xA7	; 167
    3376:	bf 4f       	sbci	r27, 0xFF	; 255
    3378:	fe 01       	movw	r30, r28
    337a:	e7 5a       	subi	r30, 0xA7	; 167
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	11 96       	adiw	r26, 0x01	; 1
    3386:	9c 93       	st	X, r25
    3388:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	fe 01       	movw	r30, r28
    338c:	e7 5a       	subi	r30, 0xA7	; 167
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	80 81       	ld	r24, Z
    3392:	91 81       	ldd	r25, Z+1	; 0x01
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	d1 f6       	brne	.-76     	; 0x334c <main+0xae2>
    3398:	27 c0       	rjmp	.+78     	; 0x33e8 <main+0xb7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339a:	8e 01       	movw	r16, r28
    339c:	07 5a       	subi	r16, 0xA7	; 167
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	fe 01       	movw	r30, r28
    33a2:	e5 5a       	subi	r30, 0xA5	; 165
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	f8 01       	movw	r30, r16
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
    33bc:	de 01       	movw	r26, r28
    33be:	ab 5a       	subi	r26, 0xAB	; 171
    33c0:	bf 4f       	sbci	r27, 0xFF	; 255
    33c2:	fe 01       	movw	r30, r28
    33c4:	e7 5a       	subi	r30, 0xA7	; 167
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	8d 93       	st	X+, r24
    33ce:	9c 93       	st	X, r25
    33d0:	fe 01       	movw	r30, r28
    33d2:	eb 5a       	subi	r30, 0xAB	; 171
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <main+0xb70>
    33de:	fe 01       	movw	r30, r28
    33e0:	eb 5a       	subi	r30, 0xAB	; 171
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	62 e0       	ldi	r22, 0x02	; 2
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	63 e0       	ldi	r22, 0x03	; 3
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    3410:	fe 01       	movw	r30, r28
    3412:	ef 5a       	subi	r30, 0xAF	; 175
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a0 e0       	ldi	r26, 0x00	; 0
    341c:	b0 e4       	ldi	r27, 0x40	; 64
    341e:	80 83       	st	Z, r24
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	a2 83       	std	Z+2, r26	; 0x02
    3424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	8e 01       	movw	r16, r28
    3428:	03 5b       	subi	r16, 0xB3	; 179
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	ef 5a       	subi	r30, 0xAF	; 175
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	4a ef       	ldi	r20, 0xFA	; 250
    3440:	54 e4       	ldi	r21, 0x44	; 68
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	80 83       	st	Z, r24
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	a2 83       	std	Z+2, r26	; 0x02
    3452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3454:	fe 01       	movw	r30, r28
    3456:	e3 5b       	subi	r30, 0xB3	; 179
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	44 f4       	brge	.+16     	; 0x3482 <main+0xc18>
		__ticks = 1;
    3472:	fe 01       	movw	r30, r28
    3474:	e5 5b       	subi	r30, 0xB5	; 181
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	64 c0       	rjmp	.+200    	; 0x354a <main+0xce0>
	else if (__tmp > 65535)
    3482:	fe 01       	movw	r30, r28
    3484:	e3 5b       	subi	r30, 0xB3	; 179
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	57 e4       	ldi	r21, 0x47	; 71
    3498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    349c:	18 16       	cp	r1, r24
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <main+0xc38>
    34a0:	43 c0       	rjmp	.+134    	; 0x3528 <main+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	fe 01       	movw	r30, r28
    34a4:	ef 5a       	subi	r30, 0xAF	; 175
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8e 01       	movw	r16, r28
    34c2:	05 5b       	subi	r16, 0xB5	; 181
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	1f c0       	rjmp	.+62     	; 0x3518 <main+0xcae>
    34da:	fe 01       	movw	r30, r28
    34dc:	e7 5b       	subi	r30, 0xB7	; 183
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	fe 01       	movw	r30, r28
    34ea:	e7 5b       	subi	r30, 0xB7	; 183
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0xc88>
    34f6:	fe 01       	movw	r30, r28
    34f8:	e7 5b       	subi	r30, 0xB7	; 183
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	de 01       	movw	r26, r28
    3502:	a5 5b       	subi	r26, 0xB5	; 181
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	e5 5b       	subi	r30, 0xB5	; 181
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 93       	st	X, r25
    3516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3518:	fe 01       	movw	r30, r28
    351a:	e5 5b       	subi	r30, 0xB5	; 181
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	d1 f6       	brne	.-76     	; 0x34da <main+0xc70>
    3526:	27 c0       	rjmp	.+78     	; 0x3576 <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	8e 01       	movw	r16, r28
    352a:	05 5b       	subi	r16, 0xB5	; 181
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	fe 01       	movw	r30, r28
    3530:	e3 5b       	subi	r30, 0xB3	; 179
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	de 01       	movw	r26, r28
    354c:	a9 5b       	subi	r26, 0xB9	; 185
    354e:	bf 4f       	sbci	r27, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e5 5b       	subi	r30, 0xB5	; 181
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	8d 93       	st	X+, r24
    355c:	9c 93       	st	X, r25
    355e:	fe 01       	movw	r30, r28
    3560:	e9 5b       	subi	r30, 0xB9	; 185
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <main+0xcfe>
    356c:	fe 01       	movw	r30, r28
    356e:	e9 5b       	subi	r30, 0xB9	; 185
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	40 e0       	ldi	r20, 0x00	; 0
    3586:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	62 e0       	ldi	r22, 0x02	; 2
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	63 e0       	ldi	r22, 0x03	; 3
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    359e:	fe 01       	movw	r30, r28
    35a0:	ed 5b       	subi	r30, 0xBD	; 189
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	b0 e4       	ldi	r27, 0x40	; 64
    35ac:	80 83       	st	Z, r24
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	a2 83       	std	Z+2, r26	; 0x02
    35b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b4:	8e 01       	movw	r16, r28
    35b6:	01 5c       	subi	r16, 0xC1	; 193
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ba:	fe 01       	movw	r30, r28
    35bc:	ed 5b       	subi	r30, 0xBD	; 189
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	60 81       	ld	r22, Z
    35c2:	71 81       	ldd	r23, Z+1	; 0x01
    35c4:	82 81       	ldd	r24, Z+2	; 0x02
    35c6:	93 81       	ldd	r25, Z+3	; 0x03
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	4a ef       	ldi	r20, 0xFA	; 250
    35ce:	54 e4       	ldi	r21, 0x44	; 68
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	f8 01       	movw	r30, r16
    35da:	80 83       	st	Z, r24
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	a2 83       	std	Z+2, r26	; 0x02
    35e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35e2:	fe 01       	movw	r30, r28
    35e4:	ff 96       	adiw	r30, 0x3f	; 63
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <main+0xd9e>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9e af       	std	Y+62, r25	; 0x3e
    3604:	8d af       	std	Y+61, r24	; 0x3d
    3606:	46 c0       	rjmp	.+140    	; 0x3694 <main+0xe2a>
	else if (__tmp > 65535)
    3608:	fe 01       	movw	r30, r28
    360a:	ff 96       	adiw	r30, 0x3f	; 63
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	3f ef       	ldi	r19, 0xFF	; 255
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	57 e4       	ldi	r21, 0x47	; 71
    361c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3620:	18 16       	cp	r1, r24
    3622:	64 f5       	brge	.+88     	; 0x367c <main+0xe12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3624:	fe 01       	movw	r30, r28
    3626:	ed 5b       	subi	r30, 0xBD	; 189
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e2       	ldi	r20, 0x20	; 32
    3638:	51 e4       	ldi	r21, 0x41	; 65
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9e af       	std	Y+62, r25	; 0x3e
    3650:	8d af       	std	Y+61, r24	; 0x3d
    3652:	0f c0       	rjmp	.+30     	; 0x3672 <main+0xe08>
    3654:	88 ec       	ldi	r24, 0xC8	; 200
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	9c af       	std	Y+60, r25	; 0x3c
    365a:	8b af       	std	Y+59, r24	; 0x3b
    365c:	8b ad       	ldd	r24, Y+59	; 0x3b
    365e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <main+0xdf6>
    3664:	9c af       	std	Y+60, r25	; 0x3c
    3666:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3668:	8d ad       	ldd	r24, Y+61	; 0x3d
    366a:	9e ad       	ldd	r25, Y+62	; 0x3e
    366c:	01 97       	sbiw	r24, 0x01	; 1
    366e:	9e af       	std	Y+62, r25	; 0x3e
    3670:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3672:	8d ad       	ldd	r24, Y+61	; 0x3d
    3674:	9e ad       	ldd	r25, Y+62	; 0x3e
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	69 f7       	brne	.-38     	; 0x3654 <main+0xdea>
    367a:	16 c0       	rjmp	.+44     	; 0x36a8 <main+0xe3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367c:	fe 01       	movw	r30, r28
    367e:	ff 96       	adiw	r30, 0x3f	; 63
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	9e af       	std	Y+62, r25	; 0x3e
    3692:	8d af       	std	Y+61, r24	; 0x3d
    3694:	8d ad       	ldd	r24, Y+61	; 0x3d
    3696:	9e ad       	ldd	r25, Y+62	; 0x3e
    3698:	9a af       	std	Y+58, r25	; 0x3a
    369a:	89 af       	std	Y+57, r24	; 0x39
    369c:	89 ad       	ldd	r24, Y+57	; 0x39
    369e:	9a ad       	ldd	r25, Y+58	; 0x3a
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <main+0xe36>
    36a4:	9a af       	std	Y+58, r25	; 0x3a
    36a6:	89 af       	std	Y+57, r24	; 0x39
		case '4':
			MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
			break;
		case '5':

			for(i=0;i<386;i++)
    36a8:	de 01       	movw	r26, r28
    36aa:	a3 55       	subi	r26, 0x53	; 83
    36ac:	bf 4f       	sbci	r27, 0xFF	; 255
    36ae:	fe 01       	movw	r30, r28
    36b0:	e3 55       	subi	r30, 0x53	; 83
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	80 81       	ld	r24, Z
    36b6:	91 81       	ldd	r25, Z+1	; 0x01
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	11 96       	adiw	r26, 0x01	; 1
    36bc:	9c 93       	st	X, r25
    36be:	8e 93       	st	-X, r24
    36c0:	fe 01       	movw	r30, r28
    36c2:	e3 55       	subi	r30, 0x53	; 83
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	f1 e0       	ldi	r31, 0x01	; 1
    36cc:	82 38       	cpi	r24, 0x82	; 130
    36ce:	9f 07       	cpc	r25, r31
    36d0:	08 f4       	brcc	.+2      	; 0x36d4 <main+0xe6a>
    36d2:	fc cc       	rjmp	.-1544   	; 0x30cc <main+0x862>
    36d4:	df c8       	rjmp	.-3650   	; 0x2894 <main+0x2a>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
				_delay_ms(2);
			} break;
		case '6':

			for(i=0;i<386;i++)
    36d6:	fe 01       	movw	r30, r28
    36d8:	e3 55       	subi	r30, 0x53	; 83
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	11 82       	std	Z+1, r1	; 0x01
    36de:	10 82       	st	Z, r1
    36e0:	24 c2       	rjmp	.+1096   	; 0x3b2a <main+0x12c0>
			{
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	40 e0       	ldi	r20, 0x00	; 0
    36e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	61 e0       	ldi	r22, 0x01	; 1
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	62 e0       	ldi	r22, 0x02	; 2
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	63 e0       	ldi	r22, 0x03	; 3
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e4       	ldi	r27, 0x40	; 64
    3712:	8d ab       	std	Y+53, r24	; 0x35
    3714:	9e ab       	std	Y+54, r25	; 0x36
    3716:	af ab       	std	Y+55, r26	; 0x37
    3718:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371a:	6d a9       	ldd	r22, Y+53	; 0x35
    371c:	7e a9       	ldd	r23, Y+54	; 0x36
    371e:	8f a9       	ldd	r24, Y+55	; 0x37
    3720:	98 ad       	ldd	r25, Y+56	; 0x38
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	4a ef       	ldi	r20, 0xFA	; 250
    3728:	54 e4       	ldi	r21, 0x44	; 68
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	89 ab       	std	Y+49, r24	; 0x31
    3734:	9a ab       	std	Y+50, r25	; 0x32
    3736:	ab ab       	std	Y+51, r26	; 0x33
    3738:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    373a:	69 a9       	ldd	r22, Y+49	; 0x31
    373c:	7a a9       	ldd	r23, Y+50	; 0x32
    373e:	8b a9       	ldd	r24, Y+51	; 0x33
    3740:	9c a9       	ldd	r25, Y+52	; 0x34
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e8       	ldi	r20, 0x80	; 128
    3748:	5f e3       	ldi	r21, 0x3F	; 63
    374a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374e:	88 23       	and	r24, r24
    3750:	2c f4       	brge	.+10     	; 0x375c <main+0xef2>
		__ticks = 1;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	98 ab       	std	Y+48, r25	; 0x30
    3758:	8f a7       	std	Y+47, r24	; 0x2f
    375a:	3f c0       	rjmp	.+126    	; 0x37da <main+0xf70>
	else if (__tmp > 65535)
    375c:	69 a9       	ldd	r22, Y+49	; 0x31
    375e:	7a a9       	ldd	r23, Y+50	; 0x32
    3760:	8b a9       	ldd	r24, Y+51	; 0x33
    3762:	9c a9       	ldd	r25, Y+52	; 0x34
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	3f ef       	ldi	r19, 0xFF	; 255
    3768:	4f e7       	ldi	r20, 0x7F	; 127
    376a:	57 e4       	ldi	r21, 0x47	; 71
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3770:	18 16       	cp	r1, r24
    3772:	4c f5       	brge	.+82     	; 0x37c6 <main+0xf5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3774:	6d a9       	ldd	r22, Y+53	; 0x35
    3776:	7e a9       	ldd	r23, Y+54	; 0x36
    3778:	8f a9       	ldd	r24, Y+55	; 0x37
    377a:	98 ad       	ldd	r25, Y+56	; 0x38
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e2       	ldi	r20, 0x20	; 32
    3782:	51 e4       	ldi	r21, 0x41	; 65
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	98 ab       	std	Y+48, r25	; 0x30
    379a:	8f a7       	std	Y+47, r24	; 0x2f
    379c:	0f c0       	rjmp	.+30     	; 0x37bc <main+0xf52>
    379e:	88 ec       	ldi	r24, 0xC8	; 200
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	9e a7       	std	Y+46, r25	; 0x2e
    37a4:	8d a7       	std	Y+45, r24	; 0x2d
    37a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    37a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <main+0xf40>
    37ae:	9e a7       	std	Y+46, r25	; 0x2e
    37b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    37b4:	98 a9       	ldd	r25, Y+48	; 0x30
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	98 ab       	std	Y+48, r25	; 0x30
    37ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    37be:	98 a9       	ldd	r25, Y+48	; 0x30
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	69 f7       	brne	.-38     	; 0x379e <main+0xf34>
    37c4:	14 c0       	rjmp	.+40     	; 0x37ee <main+0xf84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c6:	69 a9       	ldd	r22, Y+49	; 0x31
    37c8:	7a a9       	ldd	r23, Y+50	; 0x32
    37ca:	8b a9       	ldd	r24, Y+51	; 0x33
    37cc:	9c a9       	ldd	r25, Y+52	; 0x34
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	98 ab       	std	Y+48, r25	; 0x30
    37d8:	8f a7       	std	Y+47, r24	; 0x2f
    37da:	8f a5       	ldd	r24, Y+47	; 0x2f
    37dc:	98 a9       	ldd	r25, Y+48	; 0x30
    37de:	9c a7       	std	Y+44, r25	; 0x2c
    37e0:	8b a7       	std	Y+43, r24	; 0x2b
    37e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	f1 f7       	brne	.-4      	; 0x37e6 <main+0xf7c>
    37ea:	9c a7       	std	Y+44, r25	; 0x2c
    37ec:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	62 e0       	ldi	r22, 0x02	; 2
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	63 e0       	ldi	r22, 0x03	; 3
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	a0 e0       	ldi	r26, 0x00	; 0
    381c:	b0 e4       	ldi	r27, 0x40	; 64
    381e:	8f a3       	std	Y+39, r24	; 0x27
    3820:	98 a7       	std	Y+40, r25	; 0x28
    3822:	a9 a7       	std	Y+41, r26	; 0x29
    3824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	6f a1       	ldd	r22, Y+39	; 0x27
    3828:	78 a5       	ldd	r23, Y+40	; 0x28
    382a:	89 a5       	ldd	r24, Y+41	; 0x29
    382c:	9a a5       	ldd	r25, Y+42	; 0x2a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a ef       	ldi	r20, 0xFA	; 250
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8b a3       	std	Y+35, r24	; 0x23
    3840:	9c a3       	std	Y+36, r25	; 0x24
    3842:	ad a3       	std	Y+37, r26	; 0x25
    3844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3846:	6b a1       	ldd	r22, Y+35	; 0x23
    3848:	7c a1       	ldd	r23, Y+36	; 0x24
    384a:	8d a1       	ldd	r24, Y+37	; 0x25
    384c:	9e a1       	ldd	r25, Y+38	; 0x26
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e8       	ldi	r20, 0x80	; 128
    3854:	5f e3       	ldi	r21, 0x3F	; 63
    3856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385a:	88 23       	and	r24, r24
    385c:	2c f4       	brge	.+10     	; 0x3868 <main+0xffe>
		__ticks = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9a a3       	std	Y+34, r25	; 0x22
    3864:	89 a3       	std	Y+33, r24	; 0x21
    3866:	3f c0       	rjmp	.+126    	; 0x38e6 <main+0x107c>
	else if (__tmp > 65535)
    3868:	6b a1       	ldd	r22, Y+35	; 0x23
    386a:	7c a1       	ldd	r23, Y+36	; 0x24
    386c:	8d a1       	ldd	r24, Y+37	; 0x25
    386e:	9e a1       	ldd	r25, Y+38	; 0x26
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	4c f5       	brge	.+82     	; 0x38d2 <main+0x1068>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3880:	6f a1       	ldd	r22, Y+39	; 0x27
    3882:	78 a5       	ldd	r23, Y+40	; 0x28
    3884:	89 a5       	ldd	r24, Y+41	; 0x29
    3886:	9a a5       	ldd	r25, Y+42	; 0x2a
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <main+0x105e>
    38aa:	88 ec       	ldi	r24, 0xC8	; 200
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	98 a3       	std	Y+32, r25	; 0x20
    38b0:	8f 8f       	std	Y+31, r24	; 0x1f
    38b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38b4:	98 a1       	ldd	r25, Y+32	; 0x20
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <main+0x104c>
    38ba:	98 a3       	std	Y+32, r25	; 0x20
    38bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	89 a1       	ldd	r24, Y+33	; 0x21
    38c0:	9a a1       	ldd	r25, Y+34	; 0x22
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	9a a3       	std	Y+34, r25	; 0x22
    38c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ca:	9a a1       	ldd	r25, Y+34	; 0x22
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	69 f7       	brne	.-38     	; 0x38aa <main+0x1040>
    38d0:	14 c0       	rjmp	.+40     	; 0x38fa <main+0x1090>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d2:	6b a1       	ldd	r22, Y+35	; 0x23
    38d4:	7c a1       	ldd	r23, Y+36	; 0x24
    38d6:	8d a1       	ldd	r24, Y+37	; 0x25
    38d8:	9e a1       	ldd	r25, Y+38	; 0x26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9a a3       	std	Y+34, r25	; 0x22
    38e4:	89 a3       	std	Y+33, r24	; 0x21
    38e6:	89 a1       	ldd	r24, Y+33	; 0x21
    38e8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ea:	9e 8f       	std	Y+30, r25	; 0x1e
    38ec:	8d 8f       	std	Y+29, r24	; 0x1d
    38ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <main+0x1088>
    38f6:	9e 8f       	std	Y+30, r25	; 0x1e
    38f8:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	61 e0       	ldi	r22, 0x01	; 1
    3908:	41 e0       	ldi	r20, 0x01	; 1
    390a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	62 e0       	ldi	r22, 0x02	; 2
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	63 e0       	ldi	r22, 0x03	; 3
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a0 e0       	ldi	r26, 0x00	; 0
    3928:	b0 e4       	ldi	r27, 0x40	; 64
    392a:	89 8f       	std	Y+25, r24	; 0x19
    392c:	9a 8f       	std	Y+26, r25	; 0x1a
    392e:	ab 8f       	std	Y+27, r26	; 0x1b
    3930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	69 8d       	ldd	r22, Y+25	; 0x19
    3934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	4a ef       	ldi	r20, 0xFA	; 250
    3940:	54 e4       	ldi	r21, 0x44	; 68
    3942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	8d 8b       	std	Y+21, r24	; 0x15
    394c:	9e 8b       	std	Y+22, r25	; 0x16
    394e:	af 8b       	std	Y+23, r26	; 0x17
    3950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3952:	6d 89       	ldd	r22, Y+21	; 0x15
    3954:	7e 89       	ldd	r23, Y+22	; 0x16
    3956:	8f 89       	ldd	r24, Y+23	; 0x17
    3958:	98 8d       	ldd	r25, Y+24	; 0x18
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	2c f4       	brge	.+10     	; 0x3974 <main+0x110a>
		__ticks = 1;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9c 8b       	std	Y+20, r25	; 0x14
    3970:	8b 8b       	std	Y+19, r24	; 0x13
    3972:	3f c0       	rjmp	.+126    	; 0x39f2 <main+0x1188>
	else if (__tmp > 65535)
    3974:	6d 89       	ldd	r22, Y+21	; 0x15
    3976:	7e 89       	ldd	r23, Y+22	; 0x16
    3978:	8f 89       	ldd	r24, Y+23	; 0x17
    397a:	98 8d       	ldd	r25, Y+24	; 0x18
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	3f ef       	ldi	r19, 0xFF	; 255
    3980:	4f e7       	ldi	r20, 0x7F	; 127
    3982:	57 e4       	ldi	r21, 0x47	; 71
    3984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3988:	18 16       	cp	r1, r24
    398a:	4c f5       	brge	.+82     	; 0x39de <main+0x1174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398c:	69 8d       	ldd	r22, Y+25	; 0x19
    398e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	40 e2       	ldi	r20, 0x20	; 32
    399a:	51 e4       	ldi	r21, 0x41	; 65
    399c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	9c 8b       	std	Y+20, r25	; 0x14
    39b2:	8b 8b       	std	Y+19, r24	; 0x13
    39b4:	0f c0       	rjmp	.+30     	; 0x39d4 <main+0x116a>
    39b6:	88 ec       	ldi	r24, 0xC8	; 200
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9a 8b       	std	Y+18, r25	; 0x12
    39bc:	89 8b       	std	Y+17, r24	; 0x11
    39be:	89 89       	ldd	r24, Y+17	; 0x11
    39c0:	9a 89       	ldd	r25, Y+18	; 0x12
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <main+0x1158>
    39c6:	9a 8b       	std	Y+18, r25	; 0x12
    39c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ca:	8b 89       	ldd	r24, Y+19	; 0x13
    39cc:	9c 89       	ldd	r25, Y+20	; 0x14
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	9c 8b       	std	Y+20, r25	; 0x14
    39d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	69 f7       	brne	.-38     	; 0x39b6 <main+0x114c>
    39dc:	14 c0       	rjmp	.+40     	; 0x3a06 <main+0x119c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39de:	6d 89       	ldd	r22, Y+21	; 0x15
    39e0:	7e 89       	ldd	r23, Y+22	; 0x16
    39e2:	8f 89       	ldd	r24, Y+23	; 0x17
    39e4:	98 8d       	ldd	r25, Y+24	; 0x18
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
    39f2:	8b 89       	ldd	r24, Y+19	; 0x13
    39f4:	9c 89       	ldd	r25, Y+20	; 0x14
    39f6:	98 8b       	std	Y+16, r25	; 0x10
    39f8:	8f 87       	std	Y+15, r24	; 0x0f
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	98 89       	ldd	r25, Y+16	; 0x10
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <main+0x1194>
    3a02:	98 8b       	std	Y+16, r25	; 0x10
    3a04:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);

				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	41 e0       	ldi	r20, 0x01	; 1
    3a0c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	61 e0       	ldi	r22, 0x01	; 1
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	62 e0       	ldi	r22, 0x02	; 2
    3a1e:	40 e0       	ldi	r20, 0x00	; 0
    3a20:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	63 e0       	ldi	r22, 0x03	; 3
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MDIO_voidSetPinValue>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	a0 e0       	ldi	r26, 0x00	; 0
    3a34:	b0 e4       	ldi	r27, 0x40	; 64
    3a36:	8b 87       	std	Y+11, r24	; 0x0b
    3a38:	9c 87       	std	Y+12, r25	; 0x0c
    3a3a:	ad 87       	std	Y+13, r26	; 0x0d
    3a3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	4a ef       	ldi	r20, 0xFA	; 250
    3a4c:	54 e4       	ldi	r21, 0x44	; 68
    3a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	8f 83       	std	Y+7, r24	; 0x07
    3a58:	98 87       	std	Y+8, r25	; 0x08
    3a5a:	a9 87       	std	Y+9, r26	; 0x09
    3a5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a60:	78 85       	ldd	r23, Y+8	; 0x08
    3a62:	89 85       	ldd	r24, Y+9	; 0x09
    3a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e8       	ldi	r20, 0x80	; 128
    3a6c:	5f e3       	ldi	r21, 0x3F	; 63
    3a6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a72:	88 23       	and	r24, r24
    3a74:	2c f4       	brge	.+10     	; 0x3a80 <main+0x1216>
		__ticks = 1;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	9e 83       	std	Y+6, r25	; 0x06
    3a7c:	8d 83       	std	Y+5, r24	; 0x05
    3a7e:	3f c0       	rjmp	.+126    	; 0x3afe <main+0x1294>
	else if (__tmp > 65535)
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	3f ef       	ldi	r19, 0xFF	; 255
    3a8c:	4f e7       	ldi	r20, 0x7F	; 127
    3a8e:	57 e4       	ldi	r21, 0x47	; 71
    3a90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a94:	18 16       	cp	r1, r24
    3a96:	4c f5       	brge	.+82     	; 0x3aea <main+0x1280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e2       	ldi	r20, 0x20	; 32
    3aa6:	51 e4       	ldi	r21, 0x41	; 65
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	9e 83       	std	Y+6, r25	; 0x06
    3abe:	8d 83       	std	Y+5, r24	; 0x05
    3ac0:	0f c0       	rjmp	.+30     	; 0x3ae0 <main+0x1276>
    3ac2:	88 ec       	ldi	r24, 0xC8	; 200
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	9c 83       	std	Y+4, r25	; 0x04
    3ac8:	8b 83       	std	Y+3, r24	; 0x03
    3aca:	8b 81       	ldd	r24, Y+3	; 0x03
    3acc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <main+0x1264>
    3ad2:	9c 83       	std	Y+4, r25	; 0x04
    3ad4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	9e 83       	std	Y+6, r25	; 0x06
    3ade:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	69 f7       	brne	.-38     	; 0x3ac2 <main+0x1258>
    3ae8:	14 c0       	rjmp	.+40     	; 0x3b12 <main+0x12a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aea:	6f 81       	ldd	r22, Y+7	; 0x07
    3aec:	78 85       	ldd	r23, Y+8	; 0x08
    3aee:	89 85       	ldd	r24, Y+9	; 0x09
    3af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	9e 83       	std	Y+6, r25	; 0x06
    3afc:	8d 83       	std	Y+5, r24	; 0x05
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	9e 81       	ldd	r25, Y+6	; 0x06
    3b02:	9a 83       	std	Y+2, r25	; 0x02
    3b04:	89 83       	std	Y+1, r24	; 0x01
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	f1 f7       	brne	.-4      	; 0x3b0a <main+0x12a0>
    3b0e:	9a 83       	std	Y+2, r25	; 0x02
    3b10:	89 83       	std	Y+1, r24	; 0x01
				MDIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
				_delay_ms(2);
			} break;
		case '6':

			for(i=0;i<386;i++)
    3b12:	de 01       	movw	r26, r28
    3b14:	a3 55       	subi	r26, 0x53	; 83
    3b16:	bf 4f       	sbci	r27, 0xFF	; 255
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e3 55       	subi	r30, 0x53	; 83
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	11 96       	adiw	r26, 0x01	; 1
    3b26:	9c 93       	st	X, r25
    3b28:	8e 93       	st	-X, r24
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e3 55       	subi	r30, 0x53	; 83
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	21 e0       	ldi	r18, 0x01	; 1
    3b36:	82 38       	cpi	r24, 0x82	; 130
    3b38:	92 07       	cpc	r25, r18
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <main+0x12d4>
    3b3c:	d2 cd       	rjmp	.-1116   	; 0x36e2 <main+0xe78>
    3b3e:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <main+0x2a>

00003b42 <__udivmodsi4>:
    3b42:	a1 e2       	ldi	r26, 0x21	; 33
    3b44:	1a 2e       	mov	r1, r26
    3b46:	aa 1b       	sub	r26, r26
    3b48:	bb 1b       	sub	r27, r27
    3b4a:	fd 01       	movw	r30, r26
    3b4c:	0d c0       	rjmp	.+26     	; 0x3b68 <__udivmodsi4_ep>

00003b4e <__udivmodsi4_loop>:
    3b4e:	aa 1f       	adc	r26, r26
    3b50:	bb 1f       	adc	r27, r27
    3b52:	ee 1f       	adc	r30, r30
    3b54:	ff 1f       	adc	r31, r31
    3b56:	a2 17       	cp	r26, r18
    3b58:	b3 07       	cpc	r27, r19
    3b5a:	e4 07       	cpc	r30, r20
    3b5c:	f5 07       	cpc	r31, r21
    3b5e:	20 f0       	brcs	.+8      	; 0x3b68 <__udivmodsi4_ep>
    3b60:	a2 1b       	sub	r26, r18
    3b62:	b3 0b       	sbc	r27, r19
    3b64:	e4 0b       	sbc	r30, r20
    3b66:	f5 0b       	sbc	r31, r21

00003b68 <__udivmodsi4_ep>:
    3b68:	66 1f       	adc	r22, r22
    3b6a:	77 1f       	adc	r23, r23
    3b6c:	88 1f       	adc	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	1a 94       	dec	r1
    3b72:	69 f7       	brne	.-38     	; 0x3b4e <__udivmodsi4_loop>
    3b74:	60 95       	com	r22
    3b76:	70 95       	com	r23
    3b78:	80 95       	com	r24
    3b7a:	90 95       	com	r25
    3b7c:	9b 01       	movw	r18, r22
    3b7e:	ac 01       	movw	r20, r24
    3b80:	bd 01       	movw	r22, r26
    3b82:	cf 01       	movw	r24, r30
    3b84:	08 95       	ret

00003b86 <__prologue_saves__>:
    3b86:	2f 92       	push	r2
    3b88:	3f 92       	push	r3
    3b8a:	4f 92       	push	r4
    3b8c:	5f 92       	push	r5
    3b8e:	6f 92       	push	r6
    3b90:	7f 92       	push	r7
    3b92:	8f 92       	push	r8
    3b94:	9f 92       	push	r9
    3b96:	af 92       	push	r10
    3b98:	bf 92       	push	r11
    3b9a:	cf 92       	push	r12
    3b9c:	df 92       	push	r13
    3b9e:	ef 92       	push	r14
    3ba0:	ff 92       	push	r15
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	ca 1b       	sub	r28, r26
    3bb0:	db 0b       	sbc	r29, r27
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	09 94       	ijmp

00003bbe <__epilogue_restores__>:
    3bbe:	2a 88       	ldd	r2, Y+18	; 0x12
    3bc0:	39 88       	ldd	r3, Y+17	; 0x11
    3bc2:	48 88       	ldd	r4, Y+16	; 0x10
    3bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bca:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bce:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bd0:	b9 84       	ldd	r11, Y+9	; 0x09
    3bd2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bd4:	df 80       	ldd	r13, Y+7	; 0x07
    3bd6:	ee 80       	ldd	r14, Y+6	; 0x06
    3bd8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bda:	0c 81       	ldd	r16, Y+4	; 0x04
    3bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bde:	aa 81       	ldd	r26, Y+2	; 0x02
    3be0:	b9 81       	ldd	r27, Y+1	; 0x01
    3be2:	ce 0f       	add	r28, r30
    3be4:	d1 1d       	adc	r29, r1
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	ed 01       	movw	r28, r26
    3bf2:	08 95       	ret

00003bf4 <_exit>:
    3bf4:	f8 94       	cli

00003bf6 <__stop_program>:
    3bf6:	ff cf       	rjmp	.-2      	; 0x3bf6 <__stop_program>
