
final_projectAVR_master_iti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00005a64  00005af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080010e  0080010e  00005ba6  2**0
                  ALLOC
  3 .stab         00004674  00000000  00000000  00005ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000153e  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b75a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ba49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000da8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fc94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ff56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 1c 	call	0x39be	; 0x39be <main>
      8a:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 2c 	jmp	0x59a0	; 0x59a0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ef       	ldi	r22, 0xF3	; 243
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d8 2c 	jmp	0x59b0	; 0x59b0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EEPROM_voidWrite>:
#include "MTWI_interface.h"
#include "EEPROM_interface.h"


void EEPROM_voidWrite(u8 Copy_u8Data , u8 Copy_u8Address)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EEPROM_voidWrite+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
     cac:	0e 94 a0 1b 	call	0x3740	; 0x3740 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
     cb0:	80 ea       	ldi	r24, 0xA0	; 160
     cb2:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	/* Send Data */
	MTWI_voidWrite(Copy_u8Data);
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	MTWI_voidStop();
     cc2:	0e 94 0d 1c 	call	0x381a	; 0x381a <MTWI_voidStop>

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <EEPROM_voidRead>:

void EEPROM_voidRead(u8 Copy_u8Address , u8 *Copy_pu8Data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <EEPROM_voidRead+0x6>
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	7b 83       	std	Y+3, r23	; 0x03
     ce0:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
     ce2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
     ce6:	80 ea       	ldi	r24, 0xA0	; 160
     ce8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	/* Send repeated start */
	MTWI_voidStart();
     cf2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <MTWI_voidStart>
	/* send SLAVE ADDRESS with READ*/
	MTWI_voidWrite(0xA1);
     cf6:	81 ea       	ldi	r24, 0xA1	; 161
     cf8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <MTWI_voidWrite>

	/* master read data byte */
	*Copy_pu8Data = MTWI_u8ReadWithACK();
     cfc:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <MTWI_u8ReadWithACK>
     d00:	ea 81       	ldd	r30, Y+2	; 0x02
     d02:	fb 81       	ldd	r31, Y+3	; 0x03
     d04:	80 83       	st	Z, r24

	MTWI_voidStop();
     d06:	0e 94 0d 1c 	call	0x381a	; 0x381a <MTWI_voidStop>

}
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <HKPD_u8GetPressedKey>:
#include "HKPD_interface.h"
#include "HKPD_private.h"
#include <util/delay.h>

u8 HKPD_u8GetPressedKey()
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	a2 97       	sbiw	r28, 0x22	; 34
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
	u8 flag=0,Local_u8PinState,Local_u8PressedKey=NOT_PRESSED ;
     d2a:	1c 82       	std	Y+4, r1	; 0x04
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIterator,Local_u8RowIterator;
	u8 ColArr[COL_SIZE]={KPD_C0,KPD_C1,KPD_C2,KPD_C3};
     d30:	1e 82       	std	Y+6, r1	; 0x06
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	8f 83       	std	Y+7, r24	; 0x07
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	88 87       	std	Y+8, r24	; 0x08
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	89 87       	std	Y+9, r24	; 0x09
	u8 RowArr[ROW_SIZE]={KPD_R0,KPD_R1,KPD_R2,KPD_R3};
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	8a 87       	std	Y+10, r24	; 0x0a
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	8b 87       	std	Y+11, r24	; 0x0b
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	8c 87       	std	Y+12, r24	; 0x0c
     d4a:	87 e0       	ldi	r24, 0x07	; 7
     d4c:	8d 87       	std	Y+13, r24	; 0x0d
	u8 KPD_arr[ROW_SIZE][COL_SIZE]=KPD_Arr ;
     d4e:	ce 01       	movw	r24, r28
     d50:	0e 96       	adiw	r24, 0x0e	; 14
     d52:	9f 8f       	std	Y+31, r25	; 0x1f
     d54:	8e 8f       	std	Y+30, r24	; 0x1e
     d56:	ed ef       	ldi	r30, 0xFD	; 253
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	f9 a3       	std	Y+33, r31	; 0x21
     d5c:	e8 a3       	std	Y+32, r30	; 0x20
     d5e:	f0 e1       	ldi	r31, 0x10	; 16
     d60:	fa a3       	std	Y+34, r31	; 0x22
     d62:	e8 a1       	ldd	r30, Y+32	; 0x20
     d64:	f9 a1       	ldd	r31, Y+33	; 0x21
     d66:	00 80       	ld	r0, Z
     d68:	88 a1       	ldd	r24, Y+32	; 0x20
     d6a:	99 a1       	ldd	r25, Y+33	; 0x21
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	99 a3       	std	Y+33, r25	; 0x21
     d70:	88 a3       	std	Y+32, r24	; 0x20
     d72:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d74:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d76:	00 82       	st	Z, r0
     d78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	9f 8f       	std	Y+31, r25	; 0x1f
     d80:	8e 8f       	std	Y+30, r24	; 0x1e
     d82:	9a a1       	ldd	r25, Y+34	; 0x22
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	9a a3       	std	Y+34, r25	; 0x22
     d88:	ea a1       	ldd	r30, Y+34	; 0x22
     d8a:	ee 23       	and	r30, r30
     d8c:	51 f7       	brne	.-44     	; 0xd62 <HKPD_u8GetPressedKey+0x4c>


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
     d8e:	1a 82       	std	Y+2, r1	; 0x02
     d90:	6b c0       	rjmp	.+214    	; 0xe68 <HKPD_u8GetPressedKey+0x152>
	{
		MDIO_ErrorS_SetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_LOW);
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	06 96       	adiw	r24, 0x06	; 6
     d9c:	fc 01       	movw	r30, r24
     d9e:	e2 0f       	add	r30, r18
     da0:	f3 1f       	adc	r31, r19
     da2:	90 81       	ld	r25, Z
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	69 2f       	mov	r22, r25
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROW_SIZE ; Local_u8RowIterator++)
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	43 c0       	rjmp	.+134    	; 0xe38 <HKPD_u8GetPressedKey+0x122>
		{
			MDIO_ErrorS_GetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	ce 01       	movw	r24, r28
     dba:	0a 96       	adiw	r24, 0x0a	; 10
     dbc:	fc 01       	movw	r30, r24
     dbe:	e2 0f       	add	r30, r18
     dc0:	f3 1f       	adc	r31, r19
     dc2:	90 81       	ld	r25, Z
     dc4:	9e 01       	movw	r18, r28
     dc6:	2b 5f       	subi	r18, 0xFB	; 251
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	69 2f       	mov	r22, r25
     dce:	a9 01       	movw	r20, r18
     dd0:	0e 94 d5 19 	call	0x33aa	; 0x33aa <MDIO_ErrorS_GetPinValue>
			if(Local_u8PinState == PRESSED)
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	88 23       	and	r24, r24
     dd8:	61 f5       	brne	.+88     	; 0xe32 <HKPD_u8GetPressedKey+0x11c>
			{
				Local_u8PressedKey=KPD_arr[Local_u8RowIterator][Local_u8ColumnIterator] ;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	48 2f       	mov	r20, r24
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	82 0f       	add	r24, r18
     df4:	93 1f       	adc	r25, r19
     df6:	84 0f       	add	r24, r20
     df8:	95 1f       	adc	r25, r21
     dfa:	fc 01       	movw	r30, r24
     dfc:	3d 96       	adiw	r30, 0x0d	; 13
     dfe:	80 81       	ld	r24, Z
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	11 c0       	rjmp	.+34     	; 0xe26 <HKPD_u8GetPressedKey+0x110>
				while(PRESSED==Local_u8PinState)
				{
					MDIO_ErrorS_GetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState) ;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ce 01       	movw	r24, r28
     e0c:	0a 96       	adiw	r24, 0x0a	; 10
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	90 81       	ld	r25, Z
     e16:	9e 01       	movw	r18, r28
     e18:	2b 5f       	subi	r18, 0xFB	; 251
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	69 2f       	mov	r22, r25
     e20:	a9 01       	movw	r20, r18
     e22:	0e 94 d5 19 	call	0x33aa	; 0x33aa <MDIO_ErrorS_GetPinValue>
		{
			MDIO_ErrorS_GetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState);
			if(Local_u8PinState == PRESSED)
			{
				Local_u8PressedKey=KPD_arr[Local_u8RowIterator][Local_u8ColumnIterator] ;
				while(PRESSED==Local_u8PinState)
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	88 23       	and	r24, r24
     e2a:	61 f3       	breq	.-40     	; 0xe04 <HKPD_u8GetPressedKey+0xee>
				{
					MDIO_ErrorS_GetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState) ;
				}
				flag=1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	8c 83       	std	Y+4, r24	; 0x04
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <HKPD_u8GetPressedKey+0x12a>


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
	{
		MDIO_ErrorS_SetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_LOW);
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROW_SIZE ; Local_u8RowIterator++)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <HKPD_u8GetPressedKey+0x12a>
     e3e:	b9 cf       	rjmp	.-142    	; 0xdb2 <HKPD_u8GetPressedKey+0x9c>
				flag=1;
				break ;
			}

		}
		MDIO_ErrorS_SetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_HIGH);
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	ce 01       	movw	r24, r28
     e48:	06 96       	adiw	r24, 0x06	; 6
     e4a:	fc 01       	movw	r30, r24
     e4c:	e2 0f       	add	r30, r18
     e4e:	f3 1f       	adc	r31, r19
     e50:	90 81       	ld	r25, Z
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	69 2f       	mov	r22, r25
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
		if(flag==1)
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	39 f0       	breq	.+14     	; 0xe70 <HKPD_u8GetPressedKey+0x15a>
	u8 ColArr[COL_SIZE]={KPD_C0,KPD_C1,KPD_C2,KPD_C3};
	u8 RowArr[ROW_SIZE]={KPD_R0,KPD_R1,KPD_R2,KPD_R3};
	u8 KPD_arr[ROW_SIZE][COL_SIZE]=KPD_Arr ;


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	8a 83       	std	Y+2, r24	; 0x02
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	08 f4       	brcc	.+2      	; 0xe70 <HKPD_u8GetPressedKey+0x15a>
     e6e:	91 cf       	rjmp	.-222    	; 0xd92 <HKPD_u8GetPressedKey+0x7c>
		{
			break ;
		}

	}
	return Local_u8PressedKey ;
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e72:	a2 96       	adiw	r28, 0x22	; 34
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <HLCD_voidInit>:
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"


void HLCD_voidInit(){
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	c8 59       	subi	r28, 0x98	; 152
     e92:	d0 40       	sbci	r29, 0x00	; 0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	fe 01       	movw	r30, r28
     ea0:	eb 56       	subi	r30, 0x6B	; 107
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e2       	ldi	r26, 0x20	; 32
     eaa:	b2 e4       	ldi	r27, 0x42	; 66
     eac:	80 83       	st	Z, r24
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	a2 83       	std	Z+2, r26	; 0x02
     eb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb4:	8e 01       	movw	r16, r28
     eb6:	0f 56       	subi	r16, 0x6F	; 111
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	fe 01       	movw	r30, r28
     ebc:	eb 56       	subi	r30, 0x6B	; 107
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a ef       	ldi	r20, 0xFA	; 250
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	f8 01       	movw	r30, r16
     eda:	80 83       	st	Z, r24
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	a2 83       	std	Z+2, r26	; 0x02
     ee0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ee2:	fe 01       	movw	r30, r28
     ee4:	ef 56       	subi	r30, 0x6F	; 111
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	44 f4       	brge	.+16     	; 0xf10 <HLCD_voidInit+0x8c>
		__ticks = 1;
     f00:	fe 01       	movw	r30, r28
     f02:	e1 57       	subi	r30, 0x71	; 113
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
     f0e:	64 c0       	rjmp	.+200    	; 0xfd8 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
     f10:	fe 01       	movw	r30, r28
     f12:	ef 56       	subi	r30, 0x6F	; 111
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f2a:	18 16       	cp	r1, r24
     f2c:	0c f0       	brlt	.+2      	; 0xf30 <HLCD_voidInit+0xac>
     f2e:	43 c0       	rjmp	.+134    	; 0xfb6 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f30:	fe 01       	movw	r30, r28
     f32:	eb 56       	subi	r30, 0x6B	; 107
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8e 01       	movw	r16, r28
     f50:	01 57       	subi	r16, 0x71	; 113
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	1f c0       	rjmp	.+62     	; 0xfa6 <HLCD_voidInit+0x122>
     f68:	fe 01       	movw	r30, r28
     f6a:	e3 57       	subi	r30, 0x73	; 115
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	88 ec       	ldi	r24, 0xC8	; 200
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f76:	fe 01       	movw	r30, r28
     f78:	e3 57       	subi	r30, 0x73	; 115
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <HLCD_voidInit+0xfc>
     f84:	fe 01       	movw	r30, r28
     f86:	e3 57       	subi	r30, 0x73	; 115
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8e:	de 01       	movw	r26, r28
     f90:	a1 57       	subi	r26, 0x71	; 113
     f92:	bf 4f       	sbci	r27, 0xFF	; 255
     f94:	fe 01       	movw	r30, r28
     f96:	e1 57       	subi	r30, 0x71	; 113
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	9c 93       	st	X, r25
     fa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	fe 01       	movw	r30, r28
     fa8:	e1 57       	subi	r30, 0x71	; 113
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	d1 f6       	brne	.-76     	; 0xf68 <HLCD_voidInit+0xe4>
     fb4:	27 c0       	rjmp	.+78     	; 0x1004 <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb6:	8e 01       	movw	r16, r28
     fb8:	01 57       	subi	r16, 0x71	; 113
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	fe 01       	movw	r30, r28
     fbe:	ef 56       	subi	r30, 0x6F	; 111
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	f8 01       	movw	r30, r16
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	de 01       	movw	r26, r28
     fda:	a5 57       	subi	r26, 0x75	; 117
     fdc:	bf 4f       	sbci	r27, 0xFF	; 255
     fde:	fe 01       	movw	r30, r28
     fe0:	e1 57       	subi	r30, 0x71	; 113
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	8d 93       	st	X+, r24
     fea:	9c 93       	st	X, r25
     fec:	fe 01       	movw	r30, r28
     fee:	e5 57       	subi	r30, 0x75	; 117
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <HLCD_voidInit+0x172>
     ffa:	fe 01       	movw	r30, r28
     ffc:	e5 57       	subi	r30, 0x75	; 117
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
	_delay_ms(40);

	/* manual 4 bit initialization of LCD */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	64 e0       	ldi	r22, 0x04	; 4
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	65 e0       	ldi	r22, 0x05	; 5
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	63 e0       	ldi	r22, 0x03	; 3
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	64 e0       	ldi	r22, 0x04	; 4
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    104a:	fe 01       	movw	r30, r28
    104c:	e9 57       	subi	r30, 0x79	; 121
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e8       	ldi	r26, 0x80	; 128
    1056:	bf e3       	ldi	r27, 0x3F	; 63
    1058:	80 83       	st	Z, r24
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	a2 83       	std	Z+2, r26	; 0x02
    105e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1060:	8e 01       	movw	r16, r28
    1062:	0d 57       	subi	r16, 0x7D	; 125
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	fe 01       	movw	r30, r28
    1068:	e9 57       	subi	r30, 0x79	; 121
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	82 81       	ldd	r24, Z+2	; 0x02
    1072:	93 81       	ldd	r25, Z+3	; 0x03
    1074:	2b ea       	ldi	r18, 0xAB	; 171
    1076:	3a ea       	ldi	r19, 0xAA	; 170
    1078:	4a e2       	ldi	r20, 0x2A	; 42
    107a:	50 e4       	ldi	r21, 0x40	; 64
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	f8 01       	movw	r30, r16
    1086:	80 83       	st	Z, r24
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	a2 83       	std	Z+2, r26	; 0x02
    108c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    108e:	fe 01       	movw	r30, r28
    1090:	ed 57       	subi	r30, 0x7D	; 125
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	60 81       	ld	r22, Z
    1096:	71 81       	ldd	r23, Z+1	; 0x01
    1098:	82 81       	ldd	r24, Z+2	; 0x02
    109a:	93 81       	ldd	r25, Z+3	; 0x03
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	34 f4       	brge	.+12     	; 0x10b8 <HLCD_voidInit+0x234>
		__ticks = 1;
    10ac:	fe 01       	movw	r30, r28
    10ae:	ee 57       	subi	r30, 0x7E	; 126
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 83       	st	Z, r24
    10b6:	e0 c0       	rjmp	.+448    	; 0x1278 <HLCD_voidInit+0x3f4>
	else if (__tmp > 255)
    10b8:	fe 01       	movw	r30, r28
    10ba:	ed 57       	subi	r30, 0x7D	; 125
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	53 e4       	ldi	r21, 0x43	; 67
    10ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <HLCD_voidInit+0x254>
    10d6:	c0 c0       	rjmp	.+384    	; 0x1258 <HLCD_voidInit+0x3d4>
	{
		_delay_ms(__us / 1000.0);
    10d8:	fe 01       	movw	r30, r28
    10da:	e9 57       	subi	r30, 0x79	; 121
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	fe 01       	movw	r30, r28
    10f8:	e2 58       	subi	r30, 0x82	; 130
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 83       	st	Z, r24
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	a2 83       	std	Z+2, r26	; 0x02
    1102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	8e 01       	movw	r16, r28
    1106:	06 58       	subi	r16, 0x86	; 134
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	fe 01       	movw	r30, r28
    110c:	e2 58       	subi	r30, 0x82	; 130
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a ef       	ldi	r20, 0xFA	; 250
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	a2 83       	std	Z+2, r26	; 0x02
    1130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1132:	fe 01       	movw	r30, r28
    1134:	e6 58       	subi	r30, 0x86	; 134
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	44 f4       	brge	.+16     	; 0x1160 <HLCD_voidInit+0x2dc>
		__ticks = 1;
    1150:	fe 01       	movw	r30, r28
    1152:	e8 58       	subi	r30, 0x88	; 136
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	64 c0       	rjmp	.+200    	; 0x1228 <HLCD_voidInit+0x3a4>
	else if (__tmp > 65535)
    1160:	fe 01       	movw	r30, r28
    1162:	e6 58       	subi	r30, 0x86	; 134
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	0c f0       	brlt	.+2      	; 0x1180 <HLCD_voidInit+0x2fc>
    117e:	43 c0       	rjmp	.+134    	; 0x1206 <HLCD_voidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	fe 01       	movw	r30, r28
    1182:	e2 58       	subi	r30, 0x82	; 130
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8e 01       	movw	r16, r28
    11a0:	08 58       	subi	r16, 0x88	; 136
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	1f c0       	rjmp	.+62     	; 0x11f6 <HLCD_voidInit+0x372>
    11b8:	fe 01       	movw	r30, r28
    11ba:	ea 58       	subi	r30, 0x8A	; 138
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	88 ec       	ldi	r24, 0xC8	; 200
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	fe 01       	movw	r30, r28
    11c8:	ea 58       	subi	r30, 0x8A	; 138
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <HLCD_voidInit+0x34c>
    11d4:	fe 01       	movw	r30, r28
    11d6:	ea 58       	subi	r30, 0x8A	; 138
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	de 01       	movw	r26, r28
    11e0:	a8 58       	subi	r26, 0x88	; 136
    11e2:	bf 4f       	sbci	r27, 0xFF	; 255
    11e4:	fe 01       	movw	r30, r28
    11e6:	e8 58       	subi	r30, 0x88	; 136
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	9c 93       	st	X, r25
    11f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	fe 01       	movw	r30, r28
    11f8:	e8 58       	subi	r30, 0x88	; 136
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	d1 f6       	brne	.-76     	; 0x11b8 <HLCD_voidInit+0x334>
    1204:	4b c0       	rjmp	.+150    	; 0x129c <HLCD_voidInit+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	8e 01       	movw	r16, r28
    1208:	08 58       	subi	r16, 0x88	; 136
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	e6 58       	subi	r30, 0x86	; 134
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	f8 01       	movw	r30, r16
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	80 83       	st	Z, r24
    1228:	de 01       	movw	r26, r28
    122a:	ac 58       	subi	r26, 0x8C	; 140
    122c:	bf 4f       	sbci	r27, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	e8 58       	subi	r30, 0x88	; 136
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	9c 93       	st	X, r25
    123c:	8e 93       	st	-X, r24
    123e:	fe 01       	movw	r30, r28
    1240:	ec 58       	subi	r30, 0x8C	; 140
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <HLCD_voidInit+0x3c4>
    124c:	fe 01       	movw	r30, r28
    124e:	ec 58       	subi	r30, 0x8C	; 140
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	22 c0       	rjmp	.+68     	; 0x129c <HLCD_voidInit+0x418>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1258:	8e 01       	movw	r16, r28
    125a:	0e 57       	subi	r16, 0x7E	; 126
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	ed 57       	subi	r30, 0x7D	; 125
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	de 01       	movw	r26, r28
    127a:	ad 58       	subi	r26, 0x8D	; 141
    127c:	bf 4f       	sbci	r27, 0xFF	; 255
    127e:	fe 01       	movw	r30, r28
    1280:	ee 57       	subi	r30, 0x7E	; 126
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1288:	fe 01       	movw	r30, r28
    128a:	ed 58       	subi	r30, 0x8D	; 141
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	8a 95       	dec	r24
    1292:	f1 f7       	brne	.-4      	; 0x1290 <HLCD_voidInit+0x40c>
    1294:	fe 01       	movw	r30, r28
    1296:	ed 58       	subi	r30, 0x8D	; 141
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	64 e0       	ldi	r22, 0x04	; 4
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    12a6:	fe 01       	movw	r30, r28
    12a8:	e1 59       	subi	r30, 0x91	; 145
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 ea       	ldi	r26, 0xA0	; 160
    12b2:	b0 e4       	ldi	r27, 0x40	; 64
    12b4:	80 83       	st	Z, r24
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	a2 83       	std	Z+2, r26	; 0x02
    12ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	8e 01       	movw	r16, r28
    12be:	05 59       	subi	r16, 0x95	; 149
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	fe 01       	movw	r30, r28
    12c4:	e1 59       	subi	r30, 0x91	; 145
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a ef       	ldi	r20, 0xFA	; 250
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	f8 01       	movw	r30, r16
    12e2:	80 83       	st	Z, r24
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	a2 83       	std	Z+2, r26	; 0x02
    12e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ea:	fe 01       	movw	r30, r28
    12ec:	e5 59       	subi	r30, 0x95	; 149
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	44 f4       	brge	.+16     	; 0x1318 <HLCD_voidInit+0x494>
		__ticks = 1;
    1308:	fe 01       	movw	r30, r28
    130a:	e7 59       	subi	r30, 0x97	; 151
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
    1316:	64 c0       	rjmp	.+200    	; 0x13e0 <HLCD_voidInit+0x55c>
	else if (__tmp > 65535)
    1318:	fe 01       	movw	r30, r28
    131a:	e5 59       	subi	r30, 0x95	; 149
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	0c f0       	brlt	.+2      	; 0x1338 <HLCD_voidInit+0x4b4>
    1336:	43 c0       	rjmp	.+134    	; 0x13be <HLCD_voidInit+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	fe 01       	movw	r30, r28
    133a:	e1 59       	subi	r30, 0x91	; 145
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8e 01       	movw	r16, r28
    1358:	07 59       	subi	r16, 0x97	; 151
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	f8 01       	movw	r30, r16
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	1f c0       	rjmp	.+62     	; 0x13ae <HLCD_voidInit+0x52a>
    1370:	fe 01       	movw	r30, r28
    1372:	e9 59       	subi	r30, 0x99	; 153
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	88 ec       	ldi	r24, 0xC8	; 200
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    137e:	fe 01       	movw	r30, r28
    1380:	e9 59       	subi	r30, 0x99	; 153
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <HLCD_voidInit+0x504>
    138c:	fe 01       	movw	r30, r28
    138e:	e9 59       	subi	r30, 0x99	; 153
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	de 01       	movw	r26, r28
    1398:	a7 59       	subi	r26, 0x97	; 151
    139a:	bf 4f       	sbci	r27, 0xFF	; 255
    139c:	fe 01       	movw	r30, r28
    139e:	e7 59       	subi	r30, 0x97	; 151
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	fe 01       	movw	r30, r28
    13b0:	e7 59       	subi	r30, 0x97	; 151
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	d1 f6       	brne	.-76     	; 0x1370 <HLCD_voidInit+0x4ec>
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <HLCD_voidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13be:	8e 01       	movw	r16, r28
    13c0:	07 59       	subi	r16, 0x97	; 151
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	fe 01       	movw	r30, r28
    13c6:	e5 59       	subi	r30, 0x95	; 149
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	f8 01       	movw	r30, r16
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
    13e0:	de 01       	movw	r26, r28
    13e2:	ab 59       	subi	r26, 0x9B	; 155
    13e4:	bf 4f       	sbci	r27, 0xFF	; 255
    13e6:	fe 01       	movw	r30, r28
    13e8:	e7 59       	subi	r30, 0x97	; 151
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	8d 93       	st	X+, r24
    13f2:	9c 93       	st	X, r25
    13f4:	fe 01       	movw	r30, r28
    13f6:	eb 59       	subi	r30, 0x9B	; 155
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <HLCD_voidInit+0x57a>
    1402:	fe 01       	movw	r30, r28
    1404:	eb 59       	subi	r30, 0x9B	; 155
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24

	_delay_ms(5); /* min 4.1ms */

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	62 e0       	ldi	r22, 0x02	; 2
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	63 e0       	ldi	r22, 0x03	; 3
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	64 e0       	ldi	r22, 0x04	; 4
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	65 e0       	ldi	r22, 0x05	; 5
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	62 e0       	ldi	r22, 0x02	; 2
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	63 e0       	ldi	r22, 0x03	; 3
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	64 e0       	ldi	r22, 0x04	; 4
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    1452:	fe 01       	movw	r30, r28
    1454:	ef 59       	subi	r30, 0x9F	; 159
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 e8       	ldi	r26, 0x80	; 128
    145e:	bf e3       	ldi	r27, 0x3F	; 63
    1460:	80 83       	st	Z, r24
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	a2 83       	std	Z+2, r26	; 0x02
    1466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1468:	8e 01       	movw	r16, r28
    146a:	03 5a       	subi	r16, 0xA3	; 163
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	fe 01       	movw	r30, r28
    1470:	ef 59       	subi	r30, 0x9F	; 159
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	2b ea       	ldi	r18, 0xAB	; 171
    147e:	3a ea       	ldi	r19, 0xAA	; 170
    1480:	4a e2       	ldi	r20, 0x2A	; 42
    1482:	50 e4       	ldi	r21, 0x40	; 64
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	f8 01       	movw	r30, r16
    148e:	80 83       	st	Z, r24
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	a2 83       	std	Z+2, r26	; 0x02
    1494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1496:	fe 01       	movw	r30, r28
    1498:	e3 5a       	subi	r30, 0xA3	; 163
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <HLCD_voidInit+0x63c>
		__ticks = 1;
    14b4:	fe 01       	movw	r30, r28
    14b6:	e4 5a       	subi	r30, 0xA4	; 164
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 83       	st	Z, r24
    14be:	e0 c0       	rjmp	.+448    	; 0x1680 <HLCD_voidInit+0x7fc>
	else if (__tmp > 255)
    14c0:	fe 01       	movw	r30, r28
    14c2:	e3 5a       	subi	r30, 0xA3	; 163
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	53 e4       	ldi	r21, 0x43	; 67
    14d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	0c f0       	brlt	.+2      	; 0x14e0 <HLCD_voidInit+0x65c>
    14de:	c0 c0       	rjmp	.+384    	; 0x1660 <HLCD_voidInit+0x7dc>
	{
		_delay_ms(__us / 1000.0);
    14e0:	fe 01       	movw	r30, r28
    14e2:	ef 59       	subi	r30, 0x9F	; 159
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a e7       	ldi	r20, 0x7A	; 122
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	fe 01       	movw	r30, r28
    1500:	e8 5a       	subi	r30, 0xA8	; 168
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	8e 01       	movw	r16, r28
    150e:	0c 5a       	subi	r16, 0xAC	; 172
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e8 5a       	subi	r30, 0xA8	; 168
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a ef       	ldi	r20, 0xFA	; 250
    1526:	54 e4       	ldi	r21, 0x44	; 68
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    153a:	fe 01       	movw	r30, r28
    153c:	ec 5a       	subi	r30, 0xAC	; 172
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	44 f4       	brge	.+16     	; 0x1568 <HLCD_voidInit+0x6e4>
		__ticks = 1;
    1558:	fe 01       	movw	r30, r28
    155a:	ee 5a       	subi	r30, 0xAE	; 174
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	64 c0       	rjmp	.+200    	; 0x1630 <HLCD_voidInit+0x7ac>
	else if (__tmp > 65535)
    1568:	fe 01       	movw	r30, r28
    156a:	ec 5a       	subi	r30, 0xAC	; 172
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	0c f0       	brlt	.+2      	; 0x1588 <HLCD_voidInit+0x704>
    1586:	43 c0       	rjmp	.+134    	; 0x160e <HLCD_voidInit+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	fe 01       	movw	r30, r28
    158a:	e8 5a       	subi	r30, 0xA8	; 168
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8e 01       	movw	r16, r28
    15a8:	0e 5a       	subi	r16, 0xAE	; 174
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	1f c0       	rjmp	.+62     	; 0x15fe <HLCD_voidInit+0x77a>
    15c0:	fe 01       	movw	r30, r28
    15c2:	e0 5b       	subi	r30, 0xB0	; 176
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	88 ec       	ldi	r24, 0xC8	; 200
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	e0 5b       	subi	r30, 0xB0	; 176
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <HLCD_voidInit+0x754>
    15dc:	fe 01       	movw	r30, r28
    15de:	e0 5b       	subi	r30, 0xB0	; 176
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	de 01       	movw	r26, r28
    15e8:	ae 5a       	subi	r26, 0xAE	; 174
    15ea:	bf 4f       	sbci	r27, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	ee 5a       	subi	r30, 0xAE	; 174
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	fe 01       	movw	r30, r28
    1600:	ee 5a       	subi	r30, 0xAE	; 174
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	d1 f6       	brne	.-76     	; 0x15c0 <HLCD_voidInit+0x73c>
    160c:	4b c0       	rjmp	.+150    	; 0x16a4 <HLCD_voidInit+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	8e 01       	movw	r16, r28
    1610:	0e 5a       	subi	r16, 0xAE	; 174
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	fe 01       	movw	r30, r28
    1616:	ec 5a       	subi	r30, 0xAC	; 172
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	de 01       	movw	r26, r28
    1632:	a2 5b       	subi	r26, 0xB2	; 178
    1634:	bf 4f       	sbci	r27, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	ee 5a       	subi	r30, 0xAE	; 174
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
    1646:	fe 01       	movw	r30, r28
    1648:	e2 5b       	subi	r30, 0xB2	; 178
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <HLCD_voidInit+0x7cc>
    1654:	fe 01       	movw	r30, r28
    1656:	e2 5b       	subi	r30, 0xB2	; 178
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	22 c0       	rjmp	.+68     	; 0x16a4 <HLCD_voidInit+0x820>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1660:	8e 01       	movw	r16, r28
    1662:	04 5a       	subi	r16, 0xA4	; 164
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e3 5a       	subi	r30, 0xA3	; 163
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	f8 01       	movw	r30, r16
    167e:	80 83       	st	Z, r24
    1680:	de 01       	movw	r26, r28
    1682:	a3 5b       	subi	r26, 0xB3	; 179
    1684:	bf 4f       	sbci	r27, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	e4 5a       	subi	r30, 0xA4	; 164
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1690:	fe 01       	movw	r30, r28
    1692:	e3 5b       	subi	r30, 0xB3	; 179
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	8a 95       	dec	r24
    169a:	f1 f7       	brne	.-4      	; 0x1698 <HLCD_voidInit+0x814>
    169c:	fe 01       	movw	r30, r28
    169e:	e3 5b       	subi	r30, 0xB3	; 179
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	64 e0       	ldi	r22, 0x04	; 4
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    16ae:	fe 01       	movw	r30, r28
    16b0:	e7 5b       	subi	r30, 0xB7	; 183
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e8       	ldi	r26, 0x80	; 128
    16ba:	bf e3       	ldi	r27, 0x3F	; 63
    16bc:	80 83       	st	Z, r24
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	a2 83       	std	Z+2, r26	; 0x02
    16c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	8e 01       	movw	r16, r28
    16c6:	0b 5b       	subi	r16, 0xBB	; 187
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	fe 01       	movw	r30, r28
    16cc:	e7 5b       	subi	r30, 0xB7	; 183
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	f8 01       	movw	r30, r16
    16ea:	80 83       	st	Z, r24
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	a2 83       	std	Z+2, r26	; 0x02
    16f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f2:	fe 01       	movw	r30, r28
    16f4:	eb 5b       	subi	r30, 0xBB	; 187
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	44 f4       	brge	.+16     	; 0x1720 <HLCD_voidInit+0x89c>
		__ticks = 1;
    1710:	fe 01       	movw	r30, r28
    1712:	ed 5b       	subi	r30, 0xBD	; 189
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24
    171e:	64 c0       	rjmp	.+200    	; 0x17e8 <HLCD_voidInit+0x964>
	else if (__tmp > 65535)
    1720:	fe 01       	movw	r30, r28
    1722:	eb 5b       	subi	r30, 0xBB	; 187
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	0c f0       	brlt	.+2      	; 0x1740 <HLCD_voidInit+0x8bc>
    173e:	43 c0       	rjmp	.+134    	; 0x17c6 <HLCD_voidInit+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	fe 01       	movw	r30, r28
    1742:	e7 5b       	subi	r30, 0xB7	; 183
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8e 01       	movw	r16, r28
    1760:	0d 5b       	subi	r16, 0xBD	; 189
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	f8 01       	movw	r30, r16
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
    1776:	1f c0       	rjmp	.+62     	; 0x17b6 <HLCD_voidInit+0x932>
    1778:	fe 01       	movw	r30, r28
    177a:	ef 5b       	subi	r30, 0xBF	; 191
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1786:	fe 01       	movw	r30, r28
    1788:	ef 5b       	subi	r30, 0xBF	; 191
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <HLCD_voidInit+0x90c>
    1794:	fe 01       	movw	r30, r28
    1796:	ef 5b       	subi	r30, 0xBF	; 191
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	de 01       	movw	r26, r28
    17a0:	ad 5b       	subi	r26, 0xBD	; 189
    17a2:	bf 4f       	sbci	r27, 0xFF	; 255
    17a4:	fe 01       	movw	r30, r28
    17a6:	ed 5b       	subi	r30, 0xBD	; 189
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	fe 01       	movw	r30, r28
    17b8:	ed 5b       	subi	r30, 0xBD	; 189
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	d1 f6       	brne	.-76     	; 0x1778 <HLCD_voidInit+0x8f4>
    17c4:	24 c0       	rjmp	.+72     	; 0x180e <HLCD_voidInit+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	8e 01       	movw	r16, r28
    17c8:	0d 5b       	subi	r16, 0xBD	; 189
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	eb 5b       	subi	r30, 0xBB	; 187
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	f8 01       	movw	r30, r16
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	fe 01       	movw	r30, r28
    17ea:	ed 5b       	subi	r30, 0xBD	; 189
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	fe 01       	movw	r30, r28
    17f4:	ff 96       	adiw	r30, 0x3f	; 63
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	fe 01       	movw	r30, r28
    17fc:	ff 96       	adiw	r30, 0x3f	; 63
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <HLCD_voidInit+0x97e>
    1806:	fe 01       	movw	r30, r28
    1808:	ff 96       	adiw	r30, 0x3f	; 63
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24

	_delay_ms(1);

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	64 e0       	ldi	r22, 0x04	; 4
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	65 e0       	ldi	r22, 0x05	; 5
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	63 e0       	ldi	r22, 0x03	; 3
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e8       	ldi	r26, 0x80	; 128
    185a:	bf e3       	ldi	r27, 0x3F	; 63
    185c:	8b af       	std	Y+59, r24	; 0x3b
    185e:	9c af       	std	Y+60, r25	; 0x3c
    1860:	ad af       	std	Y+61, r26	; 0x3d
    1862:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1864:	6b ad       	ldd	r22, Y+59	; 0x3b
    1866:	7c ad       	ldd	r23, Y+60	; 0x3c
    1868:	8d ad       	ldd	r24, Y+61	; 0x3d
    186a:	9e ad       	ldd	r25, Y+62	; 0x3e
    186c:	2b ea       	ldi	r18, 0xAB	; 171
    186e:	3a ea       	ldi	r19, 0xAA	; 170
    1870:	4a e2       	ldi	r20, 0x2A	; 42
    1872:	50 e4       	ldi	r21, 0x40	; 64
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8f ab       	std	Y+55, r24	; 0x37
    187e:	98 af       	std	Y+56, r25	; 0x38
    1880:	a9 af       	std	Y+57, r26	; 0x39
    1882:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1884:	6f a9       	ldd	r22, Y+55	; 0x37
    1886:	78 ad       	ldd	r23, Y+56	; 0x38
    1888:	89 ad       	ldd	r24, Y+57	; 0x39
    188a:	9a ad       	ldd	r25, Y+58	; 0x3a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	1c f4       	brge	.+6      	; 0x18a2 <HLCD_voidInit+0xa1e>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	8e ab       	std	Y+54, r24	; 0x36
    18a0:	91 c0       	rjmp	.+290    	; 0x19c4 <HLCD_voidInit+0xb40>
	else if (__tmp > 255)
    18a2:	6f a9       	ldd	r22, Y+55	; 0x37
    18a4:	78 ad       	ldd	r23, Y+56	; 0x38
    18a6:	89 ad       	ldd	r24, Y+57	; 0x39
    18a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	0c f0       	brlt	.+2      	; 0x18bc <HLCD_voidInit+0xa38>
    18ba:	7b c0       	rjmp	.+246    	; 0x19b2 <HLCD_voidInit+0xb2e>
	{
		_delay_ms(__us / 1000.0);
    18bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    18be:	7c ad       	ldd	r23, Y+60	; 0x3c
    18c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8a ab       	std	Y+50, r24	; 0x32
    18d6:	9b ab       	std	Y+51, r25	; 0x33
    18d8:	ac ab       	std	Y+52, r26	; 0x34
    18da:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6a a9       	ldd	r22, Y+50	; 0x32
    18de:	7b a9       	ldd	r23, Y+51	; 0x33
    18e0:	8c a9       	ldd	r24, Y+52	; 0x34
    18e2:	9d a9       	ldd	r25, Y+53	; 0x35
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8e a7       	std	Y+46, r24	; 0x2e
    18f6:	9f a7       	std	Y+47, r25	; 0x2f
    18f8:	a8 ab       	std	Y+48, r26	; 0x30
    18fa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    18fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    18fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1900:	88 a9       	ldd	r24, Y+48	; 0x30
    1902:	99 a9       	ldd	r25, Y+49	; 0x31
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <HLCD_voidInit+0xa9a>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9d a7       	std	Y+45, r25	; 0x2d
    191a:	8c a7       	std	Y+44, r24	; 0x2c
    191c:	3f c0       	rjmp	.+126    	; 0x199c <HLCD_voidInit+0xb18>
	else if (__tmp > 65535)
    191e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1920:	7f a5       	ldd	r23, Y+47	; 0x2f
    1922:	88 a9       	ldd	r24, Y+48	; 0x30
    1924:	99 a9       	ldd	r25, Y+49	; 0x31
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <HLCD_voidInit+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6a a9       	ldd	r22, Y+50	; 0x32
    1938:	7b a9       	ldd	r23, Y+51	; 0x33
    193a:	8c a9       	ldd	r24, Y+52	; 0x34
    193c:	9d a9       	ldd	r25, Y+53	; 0x35
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9d a7       	std	Y+45, r25	; 0x2d
    195c:	8c a7       	std	Y+44, r24	; 0x2c
    195e:	0f c0       	rjmp	.+30     	; 0x197e <HLCD_voidInit+0xafa>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9b a7       	std	Y+43, r25	; 0x2b
    1966:	8a a7       	std	Y+42, r24	; 0x2a
    1968:	8a a5       	ldd	r24, Y+42	; 0x2a
    196a:	9b a5       	ldd	r25, Y+43	; 0x2b
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <HLCD_voidInit+0xae8>
    1970:	9b a7       	std	Y+43, r25	; 0x2b
    1972:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8c a5       	ldd	r24, Y+44	; 0x2c
    1976:	9d a5       	ldd	r25, Y+45	; 0x2d
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9d a7       	std	Y+45, r25	; 0x2d
    197c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1980:	9d a5       	ldd	r25, Y+45	; 0x2d
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <HLCD_voidInit+0xadc>
    1986:	24 c0       	rjmp	.+72     	; 0x19d0 <HLCD_voidInit+0xb4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6e a5       	ldd	r22, Y+46	; 0x2e
    198a:	7f a5       	ldd	r23, Y+47	; 0x2f
    198c:	88 a9       	ldd	r24, Y+48	; 0x30
    198e:	99 a9       	ldd	r25, Y+49	; 0x31
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9d a7       	std	Y+45, r25	; 0x2d
    199a:	8c a7       	std	Y+44, r24	; 0x2c
    199c:	8c a5       	ldd	r24, Y+44	; 0x2c
    199e:	9d a5       	ldd	r25, Y+45	; 0x2d
    19a0:	99 a7       	std	Y+41, r25	; 0x29
    19a2:	88 a7       	std	Y+40, r24	; 0x28
    19a4:	88 a5       	ldd	r24, Y+40	; 0x28
    19a6:	99 a5       	ldd	r25, Y+41	; 0x29
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <HLCD_voidInit+0xb24>
    19ac:	99 a7       	std	Y+41, r25	; 0x29
    19ae:	88 a7       	std	Y+40, r24	; 0x28
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <HLCD_voidInit+0xb4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b2:	6f a9       	ldd	r22, Y+55	; 0x37
    19b4:	78 ad       	ldd	r23, Y+56	; 0x38
    19b6:	89 ad       	ldd	r24, Y+57	; 0x39
    19b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8e ab       	std	Y+54, r24	; 0x36
    19c4:	8e a9       	ldd	r24, Y+54	; 0x36
    19c6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c8:	8f a1       	ldd	r24, Y+39	; 0x27
    19ca:	8a 95       	dec	r24
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <HLCD_voidInit+0xb46>
    19ce:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	64 e0       	ldi	r22, 0x04	; 4
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>


	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_LOW);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	63 e0       	ldi	r22, 0x03	; 3
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	64 e0       	ldi	r22, 0x04	; 4
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	bf e3       	ldi	r27, 0x3F	; 63
    1a28:	8b a3       	std	Y+35, r24	; 0x23
    1a2a:	9c a3       	std	Y+36, r25	; 0x24
    1a2c:	ad a3       	std	Y+37, r26	; 0x25
    1a2e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a30:	6b a1       	ldd	r22, Y+35	; 0x23
    1a32:	7c a1       	ldd	r23, Y+36	; 0x24
    1a34:	8d a1       	ldd	r24, Y+37	; 0x25
    1a36:	9e a1       	ldd	r25, Y+38	; 0x26
    1a38:	2b ea       	ldi	r18, 0xAB	; 171
    1a3a:	3a ea       	ldi	r19, 0xAA	; 170
    1a3c:	4a e2       	ldi	r20, 0x2A	; 42
    1a3e:	50 e4       	ldi	r21, 0x40	; 64
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8f 8f       	std	Y+31, r24	; 0x1f
    1a4a:	98 a3       	std	Y+32, r25	; 0x20
    1a4c:	a9 a3       	std	Y+33, r26	; 0x21
    1a4e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a50:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a52:	78 a1       	ldd	r23, Y+32	; 0x20
    1a54:	89 a1       	ldd	r24, Y+33	; 0x21
    1a56:	9a a1       	ldd	r25, Y+34	; 0x22
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	1c f4       	brge	.+6      	; 0x1a6e <HLCD_voidInit+0xbea>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a6c:	91 c0       	rjmp	.+290    	; 0x1b90 <HLCD_voidInit+0xd0c>
	else if (__tmp > 255)
    1a6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a70:	78 a1       	ldd	r23, Y+32	; 0x20
    1a72:	89 a1       	ldd	r24, Y+33	; 0x21
    1a74:	9a a1       	ldd	r25, Y+34	; 0x22
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <HLCD_voidInit+0xc04>
    1a86:	7b c0       	rjmp	.+246    	; 0x1b7e <HLCD_voidInit+0xcfa>
	{
		_delay_ms(__us / 1000.0);
    1a88:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8a 8f       	std	Y+26, r24	; 0x1a
    1aa2:	9b 8f       	std	Y+27, r25	; 0x1b
    1aa4:	ac 8f       	std	Y+28, r26	; 0x1c
    1aa6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1aaa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1aac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8e 8b       	std	Y+22, r24	; 0x16
    1ac2:	9f 8b       	std	Y+23, r25	; 0x17
    1ac4:	a8 8f       	std	Y+24, r26	; 0x18
    1ac6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ac8:	6e 89       	ldd	r22, Y+22	; 0x16
    1aca:	7f 89       	ldd	r23, Y+23	; 0x17
    1acc:	88 8d       	ldd	r24, Y+24	; 0x18
    1ace:	99 8d       	ldd	r25, Y+25	; 0x19
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <HLCD_voidInit+0xc66>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9d 8b       	std	Y+21, r25	; 0x15
    1ae6:	8c 8b       	std	Y+20, r24	; 0x14
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <HLCD_voidInit+0xce4>
	else if (__tmp > 65535)
    1aea:	6e 89       	ldd	r22, Y+22	; 0x16
    1aec:	7f 89       	ldd	r23, Y+23	; 0x17
    1aee:	88 8d       	ldd	r24, Y+24	; 0x18
    1af0:	99 8d       	ldd	r25, Y+25	; 0x19
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <HLCD_voidInit+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b04:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9d 8b       	std	Y+21, r25	; 0x15
    1b28:	8c 8b       	std	Y+20, r24	; 0x14
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <HLCD_voidInit+0xcc6>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9b 8b       	std	Y+19, r25	; 0x13
    1b32:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b34:	8a 89       	ldd	r24, Y+18	; 0x12
    1b36:	9b 89       	ldd	r25, Y+19	; 0x13
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <HLCD_voidInit+0xcb4>
    1b3c:	9b 8b       	std	Y+19, r25	; 0x13
    1b3e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8c 89       	ldd	r24, Y+20	; 0x14
    1b42:	9d 89       	ldd	r25, Y+21	; 0x15
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9d 8b       	std	Y+21, r25	; 0x15
    1b48:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b4c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <HLCD_voidInit+0xca8>
    1b52:	24 c0       	rjmp	.+72     	; 0x1b9c <HLCD_voidInit+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6e 89       	ldd	r22, Y+22	; 0x16
    1b56:	7f 89       	ldd	r23, Y+23	; 0x17
    1b58:	88 8d       	ldd	r24, Y+24	; 0x18
    1b5a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9d 8b       	std	Y+21, r25	; 0x15
    1b66:	8c 8b       	std	Y+20, r24	; 0x14
    1b68:	8c 89       	ldd	r24, Y+20	; 0x14
    1b6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b6c:	99 8b       	std	Y+17, r25	; 0x11
    1b6e:	88 8b       	std	Y+16, r24	; 0x10
    1b70:	88 89       	ldd	r24, Y+16	; 0x10
    1b72:	99 89       	ldd	r25, Y+17	; 0x11
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <HLCD_voidInit+0xcf0>
    1b78:	99 8b       	std	Y+17, r25	; 0x11
    1b7a:	88 8b       	std	Y+16, r24	; 0x10
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <HLCD_voidInit+0xd18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b80:	78 a1       	ldd	r23, Y+32	; 0x20
    1b82:	89 a1       	ldd	r24, Y+33	; 0x21
    1b84:	9a a1       	ldd	r25, Y+34	; 0x22
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b92:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	8a 95       	dec	r24
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <HLCD_voidInit+0xd12>
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	64 e0       	ldi	r22, 0x04	; 4
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	HLCD_voidSendCommand(0x02); 	/*CMD for 4bit		*/
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);		/* Enabling 2lies 5*7   */
    1bac:	88 e2       	ldi	r24, 0x28	; 40
    1bae:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0c); 	/* setting cursor on and off */
    1bb2:	8c e0       	ldi	r24, 0x0C	; 12
    1bb4:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/* Increment cursor (shift cursor to right)	*/
    1bb8:	86 e0       	ldi	r24, 0x06	; 6
    1bba:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/* Clear display screen */
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e4       	ldi	r27, 0x40	; 64
    1bcc:	8b 87       	std	Y+11, r24	; 0x0b
    1bce:	9c 87       	std	Y+12, r25	; 0x0c
    1bd0:	ad 87       	std	Y+13, r26	; 0x0d
    1bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a ef       	ldi	r20, 0xFA	; 250
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8f 83       	std	Y+7, r24	; 0x07
    1bee:	98 87       	std	Y+8, r25	; 0x08
    1bf0:	a9 87       	std	Y+9, r26	; 0x09
    1bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <HLCD_voidInit+0xd92>
		__ticks = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	3f c0       	rjmp	.+126    	; 0x1c94 <HLCD_voidInit+0xe10>
	else if (__tmp > 65535)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	57 e4       	ldi	r21, 0x47	; 71
    1c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	4c f5       	brge	.+82     	; 0x1c80 <HLCD_voidInit+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <HLCD_voidInit+0xdf2>
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <HLCD_voidInit+0xde0>
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <HLCD_voidInit+0xdd4>
    1c7e:	14 c0       	rjmp	.+40     	; 0x1ca8 <HLCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <HLCD_voidInit+0xe1c>
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1ca8:	c8 56       	subi	r28, 0x68	; 104
    1caa:	df 4f       	sbci	r29, 0xFF	; 255
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data){
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	c7 55       	subi	r28, 0x57	; 87
    1cce:	d0 40       	sbci	r29, 0x00	; 0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e9 5a       	subi	r30, 0xA9	; 169
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 83       	st	Z, r24

	/*Sending Data upper nibble*/
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>4)&1));
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e9 5a       	subi	r30, 0xA9	; 169
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	82 95       	swap	r24
    1cec:	8f 70       	andi	r24, 0x0F	; 15
    1cee:	98 2f       	mov	r25, r24
    1cf0:	91 70       	andi	r25, 0x01	; 1
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	62 e0       	ldi	r22, 0x02	; 2
    1cf6:	49 2f       	mov	r20, r25
    1cf8:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>5)&1));
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 5a       	subi	r30, 0xA9	; 169
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	82 95       	swap	r24
    1d06:	86 95       	lsr	r24
    1d08:	87 70       	andi	r24, 0x07	; 7
    1d0a:	98 2f       	mov	r25, r24
    1d0c:	91 70       	andi	r25, 0x01	; 1
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	63 e0       	ldi	r22, 0x03	; 3
    1d12:	49 2f       	mov	r20, r25
    1d14:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>6)&1));
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 5a       	subi	r30, 0xA9	; 169
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	82 95       	swap	r24
    1d22:	86 95       	lsr	r24
    1d24:	86 95       	lsr	r24
    1d26:	83 70       	andi	r24, 0x03	; 3
    1d28:	98 2f       	mov	r25, r24
    1d2a:	91 70       	andi	r25, 0x01	; 1
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	49 2f       	mov	r20, r25
    1d32:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>7)&1));
    1d36:	fe 01       	movw	r30, r28
    1d38:	e9 5a       	subi	r30, 0xA9	; 169
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	98 2f       	mov	r25, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	99 27       	eor	r25, r25
    1d44:	99 1f       	adc	r25, r25
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	65 e0       	ldi	r22, 0x05	; 5
    1d4a:	49 2f       	mov	r20, r25
    1d4c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);	/*	SET RS to send data */
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);	/*	CLR RW to Enable write */
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	63 e0       	ldi	r22, 0x03	; 3
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the data  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	64 e0       	ldi	r22, 0x04	; 4
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ed 5a       	subi	r30, 0xAD	; 173
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e8       	ldi	r26, 0x80	; 128
    1d7a:	bf e3       	ldi	r27, 0x3F	; 63
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d84:	8e 01       	movw	r16, r28
    1d86:	01 5b       	subi	r16, 0xB1	; 177
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ed 5a       	subi	r30, 0xAD	; 173
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	2b ea       	ldi	r18, 0xAB	; 171
    1d9a:	3a ea       	ldi	r19, 0xAA	; 170
    1d9c:	4a e2       	ldi	r20, 0x2A	; 42
    1d9e:	50 e4       	ldi	r21, 0x40	; 64
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 83       	st	Z, r24
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	a2 83       	std	Z+2, r26	; 0x02
    1db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db2:	fe 01       	movw	r30, r28
    1db4:	e1 5b       	subi	r30, 0xB1	; 177
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	34 f4       	brge	.+12     	; 0x1ddc <HLCD_voidSendData+0x11c>
		__ticks = 1;
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e2 5b       	subi	r30, 0xB2	; 178
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 83       	st	Z, r24
    1dda:	e0 c0       	rjmp	.+448    	; 0x1f9c <HLCD_voidSendData+0x2dc>
	else if (__tmp > 255)
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e1 5b       	subi	r30, 0xB1	; 177
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	53 e4       	ldi	r21, 0x43	; 67
    1df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	0c f0       	brlt	.+2      	; 0x1dfc <HLCD_voidSendData+0x13c>
    1dfa:	c0 c0       	rjmp	.+384    	; 0x1f7c <HLCD_voidSendData+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ed 5a       	subi	r30, 0xAD	; 173
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e6 5b       	subi	r30, 0xB6	; 182
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	8e 01       	movw	r16, r28
    1e2a:	0a 5b       	subi	r16, 0xBA	; 186
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e6 5b       	subi	r30, 0xB6	; 182
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e56:	fe 01       	movw	r30, r28
    1e58:	ea 5b       	subi	r30, 0xBA	; 186
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	44 f4       	brge	.+16     	; 0x1e84 <HLCD_voidSendData+0x1c4>
		__ticks = 1;
    1e74:	fe 01       	movw	r30, r28
    1e76:	ec 5b       	subi	r30, 0xBC	; 188
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	64 c0       	rjmp	.+200    	; 0x1f4c <HLCD_voidSendData+0x28c>
	else if (__tmp > 65535)
    1e84:	fe 01       	movw	r30, r28
    1e86:	ea 5b       	subi	r30, 0xBA	; 186
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <HLCD_voidSendData+0x1e4>
    1ea2:	43 c0       	rjmp	.+134    	; 0x1f2a <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e6 5b       	subi	r30, 0xB6	; 182
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	0c 5b       	subi	r16, 0xBC	; 188
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <HLCD_voidSendData+0x25a>
    1edc:	fe 01       	movw	r30, r28
    1ede:	ee 5b       	subi	r30, 0xBE	; 190
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	ee 5b       	subi	r30, 0xBE	; 190
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <HLCD_voidSendData+0x234>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ee 5b       	subi	r30, 0xBE	; 190
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	de 01       	movw	r26, r28
    1f04:	ac 5b       	subi	r26, 0xBC	; 188
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ec 5b       	subi	r30, 0xBC	; 188
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ec 5b       	subi	r30, 0xBC	; 188
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d1 f6       	brne	.-76     	; 0x1edc <HLCD_voidSendData+0x21c>
    1f28:	42 c0       	rjmp	.+132    	; 0x1fae <HLCD_voidSendData+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0c 5b       	subi	r16, 0xBC	; 188
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	ea 5b       	subi	r30, 0xBA	; 186
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	de 01       	movw	r26, r28
    1f4e:	a0 5c       	subi	r26, 0xC0	; 192
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	ec 5b       	subi	r30, 0xBC	; 188
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	9c 93       	st	X, r25
    1f60:	8e 93       	st	-X, r24
    1f62:	fe 01       	movw	r30, r28
    1f64:	e0 5c       	subi	r30, 0xC0	; 192
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <HLCD_voidSendData+0x2ac>
    1f70:	fe 01       	movw	r30, r28
    1f72:	e0 5c       	subi	r30, 0xC0	; 192
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	19 c0       	rjmp	.+50     	; 0x1fae <HLCD_voidSendData+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	02 5b       	subi	r16, 0xB2	; 178
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e1 5b       	subi	r30, 0xB1	; 177
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e2 5b       	subi	r30, 0xB2	; 178
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fa8:	8a 95       	dec	r24
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <HLCD_voidSendData+0x2e8>
    1fac:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	64 e0       	ldi	r22, 0x04	; 4
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a8 e4       	ldi	r26, 0x48	; 72
    1fbe:	b3 e4       	ldi	r27, 0x43	; 67
    1fc0:	8b af       	std	Y+59, r24	; 0x3b
    1fc2:	9c af       	std	Y+60, r25	; 0x3c
    1fc4:	ad af       	std	Y+61, r26	; 0x3d
    1fc6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fca:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd0:	2b ea       	ldi	r18, 0xAB	; 171
    1fd2:	3a ea       	ldi	r19, 0xAA	; 170
    1fd4:	4a e2       	ldi	r20, 0x2A	; 42
    1fd6:	50 e4       	ldi	r21, 0x40	; 64
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f ab       	std	Y+55, r24	; 0x37
    1fe2:	98 af       	std	Y+56, r25	; 0x38
    1fe4:	a9 af       	std	Y+57, r26	; 0x39
    1fe6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fe8:	6f a9       	ldd	r22, Y+55	; 0x37
    1fea:	78 ad       	ldd	r23, Y+56	; 0x38
    1fec:	89 ad       	ldd	r24, Y+57	; 0x39
    1fee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	1c f4       	brge	.+6      	; 0x2006 <HLCD_voidSendData+0x346>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	8e ab       	std	Y+54, r24	; 0x36
    2004:	91 c0       	rjmp	.+290    	; 0x2128 <HLCD_voidSendData+0x468>
	else if (__tmp > 255)
    2006:	6f a9       	ldd	r22, Y+55	; 0x37
    2008:	78 ad       	ldd	r23, Y+56	; 0x38
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	53 e4       	ldi	r21, 0x43	; 67
    2016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	0c f0       	brlt	.+2      	; 0x2020 <HLCD_voidSendData+0x360>
    201e:	7b c0       	rjmp	.+246    	; 0x2116 <HLCD_voidSendData+0x456>
	{
		_delay_ms(__us / 1000.0);
    2020:	6b ad       	ldd	r22, Y+59	; 0x3b
    2022:	7c ad       	ldd	r23, Y+60	; 0x3c
    2024:	8d ad       	ldd	r24, Y+61	; 0x3d
    2026:	9e ad       	ldd	r25, Y+62	; 0x3e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a e7       	ldi	r20, 0x7A	; 122
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8a ab       	std	Y+50, r24	; 0x32
    203a:	9b ab       	std	Y+51, r25	; 0x33
    203c:	ac ab       	std	Y+52, r26	; 0x34
    203e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6a a9       	ldd	r22, Y+50	; 0x32
    2042:	7b a9       	ldd	r23, Y+51	; 0x33
    2044:	8c a9       	ldd	r24, Y+52	; 0x34
    2046:	9d a9       	ldd	r25, Y+53	; 0x35
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8e a7       	std	Y+46, r24	; 0x2e
    205a:	9f a7       	std	Y+47, r25	; 0x2f
    205c:	a8 ab       	std	Y+48, r26	; 0x30
    205e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2060:	6e a5       	ldd	r22, Y+46	; 0x2e
    2062:	7f a5       	ldd	r23, Y+47	; 0x2f
    2064:	88 a9       	ldd	r24, Y+48	; 0x30
    2066:	99 a9       	ldd	r25, Y+49	; 0x31
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <HLCD_voidSendData+0x3c2>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9d a7       	std	Y+45, r25	; 0x2d
    207e:	8c a7       	std	Y+44, r24	; 0x2c
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <HLCD_voidSendData+0x440>
	else if (__tmp > 65535)
    2082:	6e a5       	ldd	r22, Y+46	; 0x2e
    2084:	7f a5       	ldd	r23, Y+47	; 0x2f
    2086:	88 a9       	ldd	r24, Y+48	; 0x30
    2088:	99 a9       	ldd	r25, Y+49	; 0x31
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <HLCD_voidSendData+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6a a9       	ldd	r22, Y+50	; 0x32
    209c:	7b a9       	ldd	r23, Y+51	; 0x33
    209e:	8c a9       	ldd	r24, Y+52	; 0x34
    20a0:	9d a9       	ldd	r25, Y+53	; 0x35
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9d a7       	std	Y+45, r25	; 0x2d
    20c0:	8c a7       	std	Y+44, r24	; 0x2c
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <HLCD_voidSendData+0x422>
    20c4:	88 ec       	ldi	r24, 0xC8	; 200
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9b a7       	std	Y+43, r25	; 0x2b
    20ca:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20cc:	8a a5       	ldd	r24, Y+42	; 0x2a
    20ce:	9b a5       	ldd	r25, Y+43	; 0x2b
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <HLCD_voidSendData+0x410>
    20d4:	9b a7       	std	Y+43, r25	; 0x2b
    20d6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20da:	9d a5       	ldd	r25, Y+45	; 0x2d
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9d a7       	std	Y+45, r25	; 0x2d
    20e0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <HLCD_voidSendData+0x404>
    20ea:	24 c0       	rjmp	.+72     	; 0x2134 <HLCD_voidSendData+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6e a5       	ldd	r22, Y+46	; 0x2e
    20ee:	7f a5       	ldd	r23, Y+47	; 0x2f
    20f0:	88 a9       	ldd	r24, Y+48	; 0x30
    20f2:	99 a9       	ldd	r25, Y+49	; 0x31
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9d a7       	std	Y+45, r25	; 0x2d
    20fe:	8c a7       	std	Y+44, r24	; 0x2c
    2100:	8c a5       	ldd	r24, Y+44	; 0x2c
    2102:	9d a5       	ldd	r25, Y+45	; 0x2d
    2104:	99 a7       	std	Y+41, r25	; 0x29
    2106:	88 a7       	std	Y+40, r24	; 0x28
    2108:	88 a5       	ldd	r24, Y+40	; 0x28
    210a:	99 a5       	ldd	r25, Y+41	; 0x29
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <HLCD_voidSendData+0x44c>
    2110:	99 a7       	std	Y+41, r25	; 0x29
    2112:	88 a7       	std	Y+40, r24	; 0x28
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <HLCD_voidSendData+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2116:	6f a9       	ldd	r22, Y+55	; 0x37
    2118:	78 ad       	ldd	r23, Y+56	; 0x38
    211a:	89 ad       	ldd	r24, Y+57	; 0x39
    211c:	9a ad       	ldd	r25, Y+58	; 0x3a
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8e ab       	std	Y+54, r24	; 0x36
    2128:	8e a9       	ldd	r24, Y+54	; 0x36
    212a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    212c:	8f a1       	ldd	r24, Y+39	; 0x27
    212e:	8a 95       	dec	r24
    2130:	f1 f7       	brne	.-4      	; 0x212e <HLCD_voidSendData+0x46e>
    2132:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending Data LOWER nibble */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>0)&1));
    2134:	fe 01       	movw	r30, r28
    2136:	e9 5a       	subi	r30, 0xA9	; 169
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	98 2f       	mov	r25, r24
    213e:	91 70       	andi	r25, 0x01	; 1
    2140:	83 e0       	ldi	r24, 0x03	; 3
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	49 2f       	mov	r20, r25
    2146:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>1)&1));
    214a:	fe 01       	movw	r30, r28
    214c:	e9 5a       	subi	r30, 0xA9	; 169
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	86 95       	lsr	r24
    2154:	98 2f       	mov	r25, r24
    2156:	91 70       	andi	r25, 0x01	; 1
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	49 2f       	mov	r20, r25
    215e:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>2)&1));
    2162:	fe 01       	movw	r30, r28
    2164:	e9 5a       	subi	r30, 0xA9	; 169
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	86 95       	lsr	r24
    216c:	86 95       	lsr	r24
    216e:	98 2f       	mov	r25, r24
    2170:	91 70       	andi	r25, 0x01	; 1
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	64 e0       	ldi	r22, 0x04	; 4
    2176:	49 2f       	mov	r20, r25
    2178:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>3)&1));
    217c:	fe 01       	movw	r30, r28
    217e:	e9 5a       	subi	r30, 0xA9	; 169
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	86 95       	lsr	r24
    2186:	86 95       	lsr	r24
    2188:	86 95       	lsr	r24
    218a:	98 2f       	mov	r25, r24
    218c:	91 70       	andi	r25, 0x01	; 1
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	65 e0       	ldi	r22, 0x05	; 5
    2192:	49 2f       	mov	r20, r25
    2194:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	64 e0       	ldi	r22, 0x04	; 4
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e8       	ldi	r26, 0x80	; 128
    21a8:	bf e3       	ldi	r27, 0x3F	; 63
    21aa:	8b a3       	std	Y+35, r24	; 0x23
    21ac:	9c a3       	std	Y+36, r25	; 0x24
    21ae:	ad a3       	std	Y+37, r26	; 0x25
    21b0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	2b ea       	ldi	r18, 0xAB	; 171
    21bc:	3a ea       	ldi	r19, 0xAA	; 170
    21be:	4a e2       	ldi	r20, 0x2A	; 42
    21c0:	50 e4       	ldi	r21, 0x40	; 64
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8f 8f       	std	Y+31, r24	; 0x1f
    21cc:	98 a3       	std	Y+32, r25	; 0x20
    21ce:	a9 a3       	std	Y+33, r26	; 0x21
    21d0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21d4:	78 a1       	ldd	r23, Y+32	; 0x20
    21d6:	89 a1       	ldd	r24, Y+33	; 0x21
    21d8:	9a a1       	ldd	r25, Y+34	; 0x22
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	1c f4       	brge	.+6      	; 0x21f0 <HLCD_voidSendData+0x530>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	8e 8f       	std	Y+30, r24	; 0x1e
    21ee:	91 c0       	rjmp	.+290    	; 0x2312 <HLCD_voidSendData+0x652>
	else if (__tmp > 255)
    21f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21f2:	78 a1       	ldd	r23, Y+32	; 0x20
    21f4:	89 a1       	ldd	r24, Y+33	; 0x21
    21f6:	9a a1       	ldd	r25, Y+34	; 0x22
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	0c f0       	brlt	.+2      	; 0x220a <HLCD_voidSendData+0x54a>
    2208:	7b c0       	rjmp	.+246    	; 0x2300 <HLCD_voidSendData+0x640>
	{
		_delay_ms(__us / 1000.0);
    220a:	6b a1       	ldd	r22, Y+35	; 0x23
    220c:	7c a1       	ldd	r23, Y+36	; 0x24
    220e:	8d a1       	ldd	r24, Y+37	; 0x25
    2210:	9e a1       	ldd	r25, Y+38	; 0x26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a e7       	ldi	r20, 0x7A	; 122
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8a 8f       	std	Y+26, r24	; 0x1a
    2224:	9b 8f       	std	Y+27, r25	; 0x1b
    2226:	ac 8f       	std	Y+28, r26	; 0x1c
    2228:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    222c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    222e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2230:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8e 8b       	std	Y+22, r24	; 0x16
    2244:	9f 8b       	std	Y+23, r25	; 0x17
    2246:	a8 8f       	std	Y+24, r26	; 0x18
    2248:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    224a:	6e 89       	ldd	r22, Y+22	; 0x16
    224c:	7f 89       	ldd	r23, Y+23	; 0x17
    224e:	88 8d       	ldd	r24, Y+24	; 0x18
    2250:	99 8d       	ldd	r25, Y+25	; 0x19
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	2c f4       	brge	.+10     	; 0x226c <HLCD_voidSendData+0x5ac>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9d 8b       	std	Y+21, r25	; 0x15
    2268:	8c 8b       	std	Y+20, r24	; 0x14
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <HLCD_voidSendData+0x62a>
	else if (__tmp > 65535)
    226c:	6e 89       	ldd	r22, Y+22	; 0x16
    226e:	7f 89       	ldd	r23, Y+23	; 0x17
    2270:	88 8d       	ldd	r24, Y+24	; 0x18
    2272:	99 8d       	ldd	r25, Y+25	; 0x19
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	4c f5       	brge	.+82     	; 0x22d6 <HLCD_voidSendData+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2286:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2288:	8c 8d       	ldd	r24, Y+28	; 0x1c
    228a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9d 8b       	std	Y+21, r25	; 0x15
    22aa:	8c 8b       	std	Y+20, r24	; 0x14
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <HLCD_voidSendData+0x60c>
    22ae:	88 ec       	ldi	r24, 0xC8	; 200
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9b 8b       	std	Y+19, r25	; 0x13
    22b4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b6:	8a 89       	ldd	r24, Y+18	; 0x12
    22b8:	9b 89       	ldd	r25, Y+19	; 0x13
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <HLCD_voidSendData+0x5fa>
    22be:	9b 8b       	std	Y+19, r25	; 0x13
    22c0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	8c 89       	ldd	r24, Y+20	; 0x14
    22c4:	9d 89       	ldd	r25, Y+21	; 0x15
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9d 8b       	std	Y+21, r25	; 0x15
    22ca:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	8c 89       	ldd	r24, Y+20	; 0x14
    22ce:	9d 89       	ldd	r25, Y+21	; 0x15
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <HLCD_voidSendData+0x5ee>
    22d4:	24 c0       	rjmp	.+72     	; 0x231e <HLCD_voidSendData+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	6e 89       	ldd	r22, Y+22	; 0x16
    22d8:	7f 89       	ldd	r23, Y+23	; 0x17
    22da:	88 8d       	ldd	r24, Y+24	; 0x18
    22dc:	99 8d       	ldd	r25, Y+25	; 0x19
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9d 8b       	std	Y+21, r25	; 0x15
    22e8:	8c 8b       	std	Y+20, r24	; 0x14
    22ea:	8c 89       	ldd	r24, Y+20	; 0x14
    22ec:	9d 89       	ldd	r25, Y+21	; 0x15
    22ee:	99 8b       	std	Y+17, r25	; 0x11
    22f0:	88 8b       	std	Y+16, r24	; 0x10
    22f2:	88 89       	ldd	r24, Y+16	; 0x10
    22f4:	99 89       	ldd	r25, Y+17	; 0x11
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <HLCD_voidSendData+0x636>
    22fa:	99 8b       	std	Y+17, r25	; 0x11
    22fc:	88 8b       	std	Y+16, r24	; 0x10
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <HLCD_voidSendData+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2300:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2302:	78 a1       	ldd	r23, Y+32	; 0x20
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8e 8f       	std	Y+30, r24	; 0x1e
    2312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2314:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2316:	8f 85       	ldd	r24, Y+15	; 0x0f
    2318:	8a 95       	dec	r24
    231a:	f1 f7       	brne	.-4      	; 0x2318 <HLCD_voidSendData+0x658>
    231c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	64 e0       	ldi	r22, 0x04	; 4
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e0       	ldi	r26, 0x00	; 0
    232e:	b0 e4       	ldi	r27, 0x40	; 64
    2330:	8b 87       	std	Y+11, r24	; 0x0b
    2332:	9c 87       	std	Y+12, r25	; 0x0c
    2334:	ad 87       	std	Y+13, r26	; 0x0d
    2336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6b 85       	ldd	r22, Y+11	; 0x0b
    233a:	7c 85       	ldd	r23, Y+12	; 0x0c
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8f 83       	std	Y+7, r24	; 0x07
    2352:	98 87       	std	Y+8, r25	; 0x08
    2354:	a9 87       	std	Y+9, r26	; 0x09
    2356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <HLCD_voidSendData+0x6ba>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <HLCD_voidSendData+0x738>
	else if (__tmp > 65535)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <HLCD_voidSendData+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6b 85       	ldd	r22, Y+11	; 0x0b
    2394:	7c 85       	ldd	r23, Y+12	; 0x0c
    2396:	8d 85       	ldd	r24, Y+13	; 0x0d
    2398:	9e 85       	ldd	r25, Y+14	; 0x0e
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <HLCD_voidSendData+0x71a>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <HLCD_voidSendData+0x708>
    23cc:	9c 83       	std	Y+4, r25	; 0x04
    23ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <HLCD_voidSendData+0x6fc>
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <HLCD_voidSendData+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <HLCD_voidSendData+0x744>
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    240c:	c9 5a       	subi	r28, 0xA9	; 169
    240e:	df 4f       	sbci	r29, 0xFF	; 255
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret

00002424 <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 Copy_u8Command){
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	c7 55       	subi	r28, 0x57	; 87
    2432:	d0 40       	sbci	r29, 0x00	; 0
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	fe 01       	movw	r30, r28
    2440:	e9 5a       	subi	r30, 0xA9	; 169
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 83       	st	Z, r24
	/*Sending UPPER Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>4)&1));
    2446:	fe 01       	movw	r30, r28
    2448:	e9 5a       	subi	r30, 0xA9	; 169
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	82 95       	swap	r24
    2450:	8f 70       	andi	r24, 0x0F	; 15
    2452:	98 2f       	mov	r25, r24
    2454:	91 70       	andi	r25, 0x01	; 1
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	62 e0       	ldi	r22, 0x02	; 2
    245a:	49 2f       	mov	r20, r25
    245c:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>5)&1));
    2460:	fe 01       	movw	r30, r28
    2462:	e9 5a       	subi	r30, 0xA9	; 169
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	82 95       	swap	r24
    246a:	86 95       	lsr	r24
    246c:	87 70       	andi	r24, 0x07	; 7
    246e:	98 2f       	mov	r25, r24
    2470:	91 70       	andi	r25, 0x01	; 1
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	49 2f       	mov	r20, r25
    2478:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>6)&1));
    247c:	fe 01       	movw	r30, r28
    247e:	e9 5a       	subi	r30, 0xA9	; 169
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	82 95       	swap	r24
    2486:	86 95       	lsr	r24
    2488:	86 95       	lsr	r24
    248a:	83 70       	andi	r24, 0x03	; 3
    248c:	98 2f       	mov	r25, r24
    248e:	91 70       	andi	r25, 0x01	; 1
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	49 2f       	mov	r20, r25
    2496:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>7)&1));
    249a:	fe 01       	movw	r30, r28
    249c:	e9 5a       	subi	r30, 0xA9	; 169
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	98 2f       	mov	r25, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	99 27       	eor	r25, r25
    24a8:	99 1f       	adc	r25, r25
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	49 2f       	mov	r20, r25
    24b0:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	/*	CLR RS to send command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	63 e0       	ldi	r22, 0x03	; 3
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>


	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	64 e0       	ldi	r22, 0x04	; 4
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    24d2:	fe 01       	movw	r30, r28
    24d4:	ed 5a       	subi	r30, 0xAD	; 173
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e8       	ldi	r26, 0x80	; 128
    24de:	bf e3       	ldi	r27, 0x3F	; 63
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24e8:	8e 01       	movw	r16, r28
    24ea:	01 5b       	subi	r16, 0xB1	; 177
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 5a       	subi	r30, 0xAD	; 173
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	2b ea       	ldi	r18, 0xAB	; 171
    24fe:	3a ea       	ldi	r19, 0xAA	; 170
    2500:	4a e2       	ldi	r20, 0x2A	; 42
    2502:	50 e4       	ldi	r21, 0x40	; 64
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	f8 01       	movw	r30, r16
    250e:	80 83       	st	Z, r24
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	a2 83       	std	Z+2, r26	; 0x02
    2514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2516:	fe 01       	movw	r30, r28
    2518:	e1 5b       	subi	r30, 0xB1	; 177
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	34 f4       	brge	.+12     	; 0x2540 <HLCD_voidSendCommand+0x11c>
		__ticks = 1;
    2534:	fe 01       	movw	r30, r28
    2536:	e2 5b       	subi	r30, 0xB2	; 178
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 83       	st	Z, r24
    253e:	e0 c0       	rjmp	.+448    	; 0x2700 <HLCD_voidSendCommand+0x2dc>
	else if (__tmp > 255)
    2540:	fe 01       	movw	r30, r28
    2542:	e1 5b       	subi	r30, 0xB1	; 177
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	53 e4       	ldi	r21, 0x43	; 67
    2556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	0c f0       	brlt	.+2      	; 0x2560 <HLCD_voidSendCommand+0x13c>
    255e:	c0 c0       	rjmp	.+384    	; 0x26e0 <HLCD_voidSendCommand+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5a       	subi	r30, 0xAD	; 173
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a e7       	ldi	r20, 0x7A	; 122
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	fe 01       	movw	r30, r28
    2580:	e6 5b       	subi	r30, 0xB6	; 182
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 83       	st	Z, r24
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	a2 83       	std	Z+2, r26	; 0x02
    258a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258c:	8e 01       	movw	r16, r28
    258e:	0a 5b       	subi	r16, 0xBA	; 186
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	e6 5b       	subi	r30, 0xB6	; 182
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a ef       	ldi	r20, 0xFA	; 250
    25a6:	54 e4       	ldi	r21, 0x44	; 68
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	f8 01       	movw	r30, r16
    25b2:	80 83       	st	Z, r24
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	a2 83       	std	Z+2, r26	; 0x02
    25b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ba:	fe 01       	movw	r30, r28
    25bc:	ea 5b       	subi	r30, 0xBA	; 186
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	44 f4       	brge	.+16     	; 0x25e8 <HLCD_voidSendCommand+0x1c4>
		__ticks = 1;
    25d8:	fe 01       	movw	r30, r28
    25da:	ec 5b       	subi	r30, 0xBC	; 188
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	64 c0       	rjmp	.+200    	; 0x26b0 <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    25e8:	fe 01       	movw	r30, r28
    25ea:	ea 5b       	subi	r30, 0xBA	; 186
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	0c f0       	brlt	.+2      	; 0x2608 <HLCD_voidSendCommand+0x1e4>
    2606:	43 c0       	rjmp	.+134    	; 0x268e <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	fe 01       	movw	r30, r28
    260a:	e6 5b       	subi	r30, 0xB6	; 182
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e2       	ldi	r20, 0x20	; 32
    261c:	51 e4       	ldi	r21, 0x41	; 65
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8e 01       	movw	r16, r28
    2628:	0c 5b       	subi	r16, 0xBC	; 188
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    263e:	1f c0       	rjmp	.+62     	; 0x267e <HLCD_voidSendCommand+0x25a>
    2640:	fe 01       	movw	r30, r28
    2642:	ee 5b       	subi	r30, 0xBE	; 190
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
    264e:	fe 01       	movw	r30, r28
    2650:	ee 5b       	subi	r30, 0xBE	; 190
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <HLCD_voidSendCommand+0x234>
    265c:	fe 01       	movw	r30, r28
    265e:	ee 5b       	subi	r30, 0xBE	; 190
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	de 01       	movw	r26, r28
    2668:	ac 5b       	subi	r26, 0xBC	; 188
    266a:	bf 4f       	sbci	r27, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	ec 5b       	subi	r30, 0xBC	; 188
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	11 96       	adiw	r26, 0x01	; 1
    267a:	9c 93       	st	X, r25
    267c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	fe 01       	movw	r30, r28
    2680:	ec 5b       	subi	r30, 0xBC	; 188
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	d1 f6       	brne	.-76     	; 0x2640 <HLCD_voidSendCommand+0x21c>
    268c:	42 c0       	rjmp	.+132    	; 0x2712 <HLCD_voidSendCommand+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	8e 01       	movw	r16, r28
    2690:	0c 5b       	subi	r16, 0xBC	; 188
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
    2694:	fe 01       	movw	r30, r28
    2696:	ea 5b       	subi	r30, 0xBA	; 186
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	f8 01       	movw	r30, r16
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	de 01       	movw	r26, r28
    26b2:	a0 5c       	subi	r26, 0xC0	; 192
    26b4:	bf 4f       	sbci	r27, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	ec 5b       	subi	r30, 0xBC	; 188
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
    26c6:	fe 01       	movw	r30, r28
    26c8:	e0 5c       	subi	r30, 0xC0	; 192
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <HLCD_voidSendCommand+0x2ac>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e0 5c       	subi	r30, 0xC0	; 192
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	19 c0       	rjmp	.+50     	; 0x2712 <HLCD_voidSendCommand+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e0:	8e 01       	movw	r16, r28
    26e2:	02 5b       	subi	r16, 0xB2	; 178
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	e1 5b       	subi	r30, 0xB1	; 177
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	fe 01       	movw	r30, r28
    2702:	e2 5b       	subi	r30, 0xB2	; 178
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    270a:	8f ad       	ldd	r24, Y+63	; 0x3f
    270c:	8a 95       	dec	r24
    270e:	f1 f7       	brne	.-4      	; 0x270c <HLCD_voidSendCommand+0x2e8>
    2710:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	64 e0       	ldi	r22, 0x04	; 4
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a8 e4       	ldi	r26, 0x48	; 72
    2722:	b3 e4       	ldi	r27, 0x43	; 67
    2724:	8b af       	std	Y+59, r24	; 0x3b
    2726:	9c af       	std	Y+60, r25	; 0x3c
    2728:	ad af       	std	Y+61, r26	; 0x3d
    272a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    272c:	6b ad       	ldd	r22, Y+59	; 0x3b
    272e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2730:	8d ad       	ldd	r24, Y+61	; 0x3d
    2732:	9e ad       	ldd	r25, Y+62	; 0x3e
    2734:	2b ea       	ldi	r18, 0xAB	; 171
    2736:	3a ea       	ldi	r19, 0xAA	; 170
    2738:	4a e2       	ldi	r20, 0x2A	; 42
    273a:	50 e4       	ldi	r21, 0x40	; 64
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8f ab       	std	Y+55, r24	; 0x37
    2746:	98 af       	std	Y+56, r25	; 0x38
    2748:	a9 af       	std	Y+57, r26	; 0x39
    274a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    274c:	6f a9       	ldd	r22, Y+55	; 0x37
    274e:	78 ad       	ldd	r23, Y+56	; 0x38
    2750:	89 ad       	ldd	r24, Y+57	; 0x39
    2752:	9a ad       	ldd	r25, Y+58	; 0x3a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	1c f4       	brge	.+6      	; 0x276a <HLCD_voidSendCommand+0x346>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	8e ab       	std	Y+54, r24	; 0x36
    2768:	91 c0       	rjmp	.+290    	; 0x288c <HLCD_voidSendCommand+0x468>
	else if (__tmp > 255)
    276a:	6f a9       	ldd	r22, Y+55	; 0x37
    276c:	78 ad       	ldd	r23, Y+56	; 0x38
    276e:	89 ad       	ldd	r24, Y+57	; 0x39
    2770:	9a ad       	ldd	r25, Y+58	; 0x3a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	53 e4       	ldi	r21, 0x43	; 67
    277a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	0c f0       	brlt	.+2      	; 0x2784 <HLCD_voidSendCommand+0x360>
    2782:	7b c0       	rjmp	.+246    	; 0x287a <HLCD_voidSendCommand+0x456>
	{
		_delay_ms(__us / 1000.0);
    2784:	6b ad       	ldd	r22, Y+59	; 0x3b
    2786:	7c ad       	ldd	r23, Y+60	; 0x3c
    2788:	8d ad       	ldd	r24, Y+61	; 0x3d
    278a:	9e ad       	ldd	r25, Y+62	; 0x3e
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a e7       	ldi	r20, 0x7A	; 122
    2792:	54 e4       	ldi	r21, 0x44	; 68
    2794:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	8a ab       	std	Y+50, r24	; 0x32
    279e:	9b ab       	std	Y+51, r25	; 0x33
    27a0:	ac ab       	std	Y+52, r26	; 0x34
    27a2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a4:	6a a9       	ldd	r22, Y+50	; 0x32
    27a6:	7b a9       	ldd	r23, Y+51	; 0x33
    27a8:	8c a9       	ldd	r24, Y+52	; 0x34
    27aa:	9d a9       	ldd	r25, Y+53	; 0x35
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4a ef       	ldi	r20, 0xFA	; 250
    27b2:	54 e4       	ldi	r21, 0x44	; 68
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	8e a7       	std	Y+46, r24	; 0x2e
    27be:	9f a7       	std	Y+47, r25	; 0x2f
    27c0:	a8 ab       	std	Y+48, r26	; 0x30
    27c2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    27c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    27c6:	7f a5       	ldd	r23, Y+47	; 0x2f
    27c8:	88 a9       	ldd	r24, Y+48	; 0x30
    27ca:	99 a9       	ldd	r25, Y+49	; 0x31
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	2c f4       	brge	.+10     	; 0x27e6 <HLCD_voidSendCommand+0x3c2>
		__ticks = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9d a7       	std	Y+45, r25	; 0x2d
    27e2:	8c a7       	std	Y+44, r24	; 0x2c
    27e4:	3f c0       	rjmp	.+126    	; 0x2864 <HLCD_voidSendCommand+0x440>
	else if (__tmp > 65535)
    27e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    27e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    27ea:	88 a9       	ldd	r24, Y+48	; 0x30
    27ec:	99 a9       	ldd	r25, Y+49	; 0x31
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	4c f5       	brge	.+82     	; 0x2850 <HLCD_voidSendCommand+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fe:	6a a9       	ldd	r22, Y+50	; 0x32
    2800:	7b a9       	ldd	r23, Y+51	; 0x33
    2802:	8c a9       	ldd	r24, Y+52	; 0x34
    2804:	9d a9       	ldd	r25, Y+53	; 0x35
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	51 e4       	ldi	r21, 0x41	; 65
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9d a7       	std	Y+45, r25	; 0x2d
    2824:	8c a7       	std	Y+44, r24	; 0x2c
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <HLCD_voidSendCommand+0x422>
    2828:	88 ec       	ldi	r24, 0xC8	; 200
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9b a7       	std	Y+43, r25	; 0x2b
    282e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2830:	8a a5       	ldd	r24, Y+42	; 0x2a
    2832:	9b a5       	ldd	r25, Y+43	; 0x2b
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <HLCD_voidSendCommand+0x410>
    2838:	9b a7       	std	Y+43, r25	; 0x2b
    283a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	8c a5       	ldd	r24, Y+44	; 0x2c
    283e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	9d a7       	std	Y+45, r25	; 0x2d
    2844:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	8c a5       	ldd	r24, Y+44	; 0x2c
    2848:	9d a5       	ldd	r25, Y+45	; 0x2d
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	69 f7       	brne	.-38     	; 0x2828 <HLCD_voidSendCommand+0x404>
    284e:	24 c0       	rjmp	.+72     	; 0x2898 <HLCD_voidSendCommand+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	6e a5       	ldd	r22, Y+46	; 0x2e
    2852:	7f a5       	ldd	r23, Y+47	; 0x2f
    2854:	88 a9       	ldd	r24, Y+48	; 0x30
    2856:	99 a9       	ldd	r25, Y+49	; 0x31
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9d a7       	std	Y+45, r25	; 0x2d
    2862:	8c a7       	std	Y+44, r24	; 0x2c
    2864:	8c a5       	ldd	r24, Y+44	; 0x2c
    2866:	9d a5       	ldd	r25, Y+45	; 0x2d
    2868:	99 a7       	std	Y+41, r25	; 0x29
    286a:	88 a7       	std	Y+40, r24	; 0x28
    286c:	88 a5       	ldd	r24, Y+40	; 0x28
    286e:	99 a5       	ldd	r25, Y+41	; 0x29
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <HLCD_voidSendCommand+0x44c>
    2874:	99 a7       	std	Y+41, r25	; 0x29
    2876:	88 a7       	std	Y+40, r24	; 0x28
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <HLCD_voidSendCommand+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    287a:	6f a9       	ldd	r22, Y+55	; 0x37
    287c:	78 ad       	ldd	r23, Y+56	; 0x38
    287e:	89 ad       	ldd	r24, Y+57	; 0x39
    2880:	9a ad       	ldd	r25, Y+58	; 0x3a
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	8e ab       	std	Y+54, r24	; 0x36
    288c:	8e a9       	ldd	r24, Y+54	; 0x36
    288e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2890:	8f a1       	ldd	r24, Y+39	; 0x27
    2892:	8a 95       	dec	r24
    2894:	f1 f7       	brne	.-4      	; 0x2892 <HLCD_voidSendCommand+0x46e>
    2896:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending LAST Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>0)&1));
    2898:	fe 01       	movw	r30, r28
    289a:	e9 5a       	subi	r30, 0xA9	; 169
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	98 2f       	mov	r25, r24
    28a2:	91 70       	andi	r25, 0x01	; 1
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	49 2f       	mov	r20, r25
    28aa:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>1)&1));
    28ae:	fe 01       	movw	r30, r28
    28b0:	e9 5a       	subi	r30, 0xA9	; 169
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	86 95       	lsr	r24
    28b8:	98 2f       	mov	r25, r24
    28ba:	91 70       	andi	r25, 0x01	; 1
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	63 e0       	ldi	r22, 0x03	; 3
    28c0:	49 2f       	mov	r20, r25
    28c2:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>2)&1));
    28c6:	fe 01       	movw	r30, r28
    28c8:	e9 5a       	subi	r30, 0xA9	; 169
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	86 95       	lsr	r24
    28d0:	86 95       	lsr	r24
    28d2:	98 2f       	mov	r25, r24
    28d4:	91 70       	andi	r25, 0x01	; 1
    28d6:	83 e0       	ldi	r24, 0x03	; 3
    28d8:	64 e0       	ldi	r22, 0x04	; 4
    28da:	49 2f       	mov	r20, r25
    28dc:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>3)&1));
    28e0:	fe 01       	movw	r30, r28
    28e2:	e9 5a       	subi	r30, 0xA9	; 169
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	86 95       	lsr	r24
    28ea:	86 95       	lsr	r24
    28ec:	86 95       	lsr	r24
    28ee:	98 2f       	mov	r25, r24
    28f0:	91 70       	andi	r25, 0x01	; 1
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	65 e0       	ldi	r22, 0x05	; 5
    28f6:	49 2f       	mov	r20, r25
    28f8:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 e8       	ldi	r26, 0x80	; 128
    290c:	bf e3       	ldi	r27, 0x3F	; 63
    290e:	8b a3       	std	Y+35, r24	; 0x23
    2910:	9c a3       	std	Y+36, r25	; 0x24
    2912:	ad a3       	std	Y+37, r26	; 0x25
    2914:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2916:	6b a1       	ldd	r22, Y+35	; 0x23
    2918:	7c a1       	ldd	r23, Y+36	; 0x24
    291a:	8d a1       	ldd	r24, Y+37	; 0x25
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	2b ea       	ldi	r18, 0xAB	; 171
    2920:	3a ea       	ldi	r19, 0xAA	; 170
    2922:	4a e2       	ldi	r20, 0x2A	; 42
    2924:	50 e4       	ldi	r21, 0x40	; 64
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	8f 8f       	std	Y+31, r24	; 0x1f
    2930:	98 a3       	std	Y+32, r25	; 0x20
    2932:	a9 a3       	std	Y+33, r26	; 0x21
    2934:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2936:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2938:	78 a1       	ldd	r23, Y+32	; 0x20
    293a:	89 a1       	ldd	r24, Y+33	; 0x21
    293c:	9a a1       	ldd	r25, Y+34	; 0x22
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	1c f4       	brge	.+6      	; 0x2954 <HLCD_voidSendCommand+0x530>
		__ticks = 1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8e 8f       	std	Y+30, r24	; 0x1e
    2952:	91 c0       	rjmp	.+290    	; 0x2a76 <HLCD_voidSendCommand+0x652>
	else if (__tmp > 255)
    2954:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2956:	78 a1       	ldd	r23, Y+32	; 0x20
    2958:	89 a1       	ldd	r24, Y+33	; 0x21
    295a:	9a a1       	ldd	r25, Y+34	; 0x22
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	53 e4       	ldi	r21, 0x43	; 67
    2964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	0c f0       	brlt	.+2      	; 0x296e <HLCD_voidSendCommand+0x54a>
    296c:	7b c0       	rjmp	.+246    	; 0x2a64 <HLCD_voidSendCommand+0x640>
	{
		_delay_ms(__us / 1000.0);
    296e:	6b a1       	ldd	r22, Y+35	; 0x23
    2970:	7c a1       	ldd	r23, Y+36	; 0x24
    2972:	8d a1       	ldd	r24, Y+37	; 0x25
    2974:	9e a1       	ldd	r25, Y+38	; 0x26
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a e7       	ldi	r20, 0x7A	; 122
    297c:	54 e4       	ldi	r21, 0x44	; 68
    297e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	8a 8f       	std	Y+26, r24	; 0x1a
    2988:	9b 8f       	std	Y+27, r25	; 0x1b
    298a:	ac 8f       	std	Y+28, r26	; 0x1c
    298c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2990:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2992:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2994:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a ef       	ldi	r20, 0xFA	; 250
    299c:	54 e4       	ldi	r21, 0x44	; 68
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8e 8b       	std	Y+22, r24	; 0x16
    29a8:	9f 8b       	std	Y+23, r25	; 0x17
    29aa:	a8 8f       	std	Y+24, r26	; 0x18
    29ac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    29ae:	6e 89       	ldd	r22, Y+22	; 0x16
    29b0:	7f 89       	ldd	r23, Y+23	; 0x17
    29b2:	88 8d       	ldd	r24, Y+24	; 0x18
    29b4:	99 8d       	ldd	r25, Y+25	; 0x19
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	2c f4       	brge	.+10     	; 0x29d0 <HLCD_voidSendCommand+0x5ac>
		__ticks = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9d 8b       	std	Y+21, r25	; 0x15
    29cc:	8c 8b       	std	Y+20, r24	; 0x14
    29ce:	3f c0       	rjmp	.+126    	; 0x2a4e <HLCD_voidSendCommand+0x62a>
	else if (__tmp > 65535)
    29d0:	6e 89       	ldd	r22, Y+22	; 0x16
    29d2:	7f 89       	ldd	r23, Y+23	; 0x17
    29d4:	88 8d       	ldd	r24, Y+24	; 0x18
    29d6:	99 8d       	ldd	r25, Y+25	; 0x19
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	3f ef       	ldi	r19, 0xFF	; 255
    29dc:	4f e7       	ldi	r20, 0x7F	; 127
    29de:	57 e4       	ldi	r21, 0x47	; 71
    29e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e4:	18 16       	cp	r1, r24
    29e6:	4c f5       	brge	.+82     	; 0x2a3a <HLCD_voidSendCommand+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9d 8b       	std	Y+21, r25	; 0x15
    2a0e:	8c 8b       	std	Y+20, r24	; 0x14
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <HLCD_voidSendCommand+0x60c>
    2a12:	88 ec       	ldi	r24, 0xC8	; 200
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9b 8b       	std	Y+19, r25	; 0x13
    2a18:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a1a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a1c:	9b 89       	ldd	r25, Y+19	; 0x13
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <HLCD_voidSendCommand+0x5fa>
    2a22:	9b 8b       	std	Y+19, r25	; 0x13
    2a24:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a26:	8c 89       	ldd	r24, Y+20	; 0x14
    2a28:	9d 89       	ldd	r25, Y+21	; 0x15
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	9d 8b       	std	Y+21, r25	; 0x15
    2a2e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	8c 89       	ldd	r24, Y+20	; 0x14
    2a32:	9d 89       	ldd	r25, Y+21	; 0x15
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <HLCD_voidSendCommand+0x5ee>
    2a38:	24 c0       	rjmp	.+72     	; 0x2a82 <HLCD_voidSendCommand+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3a:	6e 89       	ldd	r22, Y+22	; 0x16
    2a3c:	7f 89       	ldd	r23, Y+23	; 0x17
    2a3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2a40:	99 8d       	ldd	r25, Y+25	; 0x19
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9d 8b       	std	Y+21, r25	; 0x15
    2a4c:	8c 8b       	std	Y+20, r24	; 0x14
    2a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    2a50:	9d 89       	ldd	r25, Y+21	; 0x15
    2a52:	99 8b       	std	Y+17, r25	; 0x11
    2a54:	88 8b       	std	Y+16, r24	; 0x10
    2a56:	88 89       	ldd	r24, Y+16	; 0x10
    2a58:	99 89       	ldd	r25, Y+17	; 0x11
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <HLCD_voidSendCommand+0x636>
    2a5e:	99 8b       	std	Y+17, r25	; 0x11
    2a60:	88 8b       	std	Y+16, r24	; 0x10
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <HLCD_voidSendCommand+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a66:	78 a1       	ldd	r23, Y+32	; 0x20
    2a68:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8e 8f       	std	Y+30, r24	; 0x1e
    2a76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a78:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7c:	8a 95       	dec	r24
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <HLCD_voidSendCommand+0x658>
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	64 e0       	ldi	r22, 0x04	; 4
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e0       	ldi	r26, 0x00	; 0
    2a92:	b0 e4       	ldi	r27, 0x40	; 64
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <HLCD_voidSendCommand+0x6ba>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <HLCD_voidSendCommand+0x738>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <HLCD_voidSendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <HLCD_voidSendCommand+0x71a>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <HLCD_voidSendCommand+0x708>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <HLCD_voidSendCommand+0x6fc>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <HLCD_voidSendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <HLCD_voidSendCommand+0x744>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2b70:	c9 5a       	subi	r28, 0xA9	; 169
    2b72:	df 4f       	sbci	r29, 0xFF	; 255
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <HLCD_voidSendString>:


void HLCD_voidSendString(s8 Copy_u8Data[]){
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <HLCD_voidSendString+0x6>
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <HLCD_voidSendString+0x8>
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    2b98:	1a 82       	std	Y+2, r1	; 0x02
    2b9a:	19 82       	std	Y+1, r1	; 0x01
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    2b9e:	29 81       	ldd	r18, Y+1	; 0x01
    2ba0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e2 0f       	add	r30, r18
    2baa:	f3 1f       	adc	r31, r19
    2bac:	80 81       	ld	r24, Z
    2bae:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <HLCD_voidSendData>
		i++;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(s8 Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    2bbc:	29 81       	ldd	r18, Y+1	; 0x01
    2bbe:	3a 81       	ldd	r19, Y+2	; 0x02
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	39 f7       	brne	.-50     	; 0x2b9e <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	68 97       	sbiw	r28, 0x18	; 24
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	6d 8b       	std	Y+21, r22	; 0x15
    2bf4:	7e 8b       	std	Y+22, r23	; 0x16
    2bf6:	8f 8b       	std	Y+23, r24	; 0x17
    2bf8:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
	itoa(Copy_u32Data, s, 10);
    2bfa:	8d 89       	ldd	r24, Y+21	; 0x15
    2bfc:	9e 89       	ldd	r25, Y+22	; 0x16
    2bfe:	9e 01       	movw	r18, r28
    2c00:	2f 5f       	subi	r18, 0xFF	; 255
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	b9 01       	movw	r22, r18
    2c06:	4a e0       	ldi	r20, 0x0A	; 10
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <itoa>
	HLCD_voidSendString(s);
    2c0e:	ce 01       	movw	r24, r28
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
}
    2c16:	68 96       	adiw	r28, 0x18	; 24
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>

}
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <HLCD_voidSetCursorPosition+0x6>
    2c56:	0f 92       	push	r0
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
    2c5e:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    2c60:	80 e8       	ldi	r24, 0x80	; 128
    2c62:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	82 30       	cpi	r24, 0x02	; 2
    2c68:	19 f4       	brne	.+6      	; 0x2c70 <HLCD_voidSetCursorPosition+0x20>
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	80 64       	ori	r24, 0x40	; 64
    2c6e:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9b 81       	ldd	r25, Y+3	; 0x03
    2c74:	89 0f       	add	r24, r25
    2c76:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_voidSendCommand>
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <MADC_voidinit>:
#include  "BIT_MATH.h"
#include "M_adc_interface.h"
#include "M_adc_register.h"
#include "M_adc_config.h"
#include "M_adc_private.h"
void MADC_voidinit(void){
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2c92:	a7 e2       	ldi	r26, 0x27	; 39
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e7 e2       	ldi	r30, 0x27	; 39
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    2ca0:	a7 e2       	ldi	r26, 0x27	; 39
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e7 e2       	ldi	r30, 0x27	; 39
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	80 64       	ori	r24, 0x40	; 64
    2cac:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    2cae:	a7 e2       	ldi	r26, 0x27	; 39
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e7 e2       	ldi	r30, 0x27	; 39
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8f 7d       	andi	r24, 0xDF	; 223
    2cba:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2cbc:	a6 e2       	ldi	r26, 0x26	; 38
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e6 e2       	ldi	r30, 0x26	; 38
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	81 60       	ori	r24, 0x01	; 1
    2cc8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2cca:	a6 e2       	ldi	r26, 0x26	; 38
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e2       	ldi	r30, 0x26	; 38
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	82 60       	ori	r24, 0x02	; 2
    2cd6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2cd8:	a6 e2       	ldi	r26, 0x26	; 38
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e6 e2       	ldi	r30, 0x26	; 38
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	84 60       	ori	r24, 0x04	; 4
    2ce4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2ce6:	a6 e2       	ldi	r26, 0x26	; 38
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e6 e2       	ldi	r30, 0x26	; 38
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	80 68       	ori	r24, 0x80	; 128
    2cf2:	8c 93       	st	X, r24

}
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <MADC_u16GetValue>:
u16 MADC_u16GetValue(u8 COPY_u8channel){
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	0f 92       	push	r0
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
ADMUX&=0b11100000;
    2d06:	a7 e2       	ldi	r26, 0x27	; 39
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e7 e2       	ldi	r30, 0x27	; 39
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 7e       	andi	r24, 0xE0	; 224
    2d12:	8c 93       	st	X, r24
ADMUX|=COPY_u8channel;
    2d14:	a7 e2       	ldi	r26, 0x27	; 39
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e7 e2       	ldi	r30, 0x27	; 39
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	90 81       	ld	r25, Z
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	89 2b       	or	r24, r25
    2d22:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADCSRA_ADSC);
    2d24:	a6 e2       	ldi	r26, 0x26	; 38
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e6 e2       	ldi	r30, 0x26	; 38
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	80 64       	ori	r24, 0x40	; 64
    2d30:	8c 93       	st	X, r24
while (GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    2d32:	e6 e2       	ldi	r30, 0x26	; 38
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	82 95       	swap	r24
    2d3a:	8f 70       	andi	r24, 0x0F	; 15
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	81 70       	andi	r24, 0x01	; 1
    2d42:	90 70       	andi	r25, 0x00	; 0
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	a9 f3       	breq	.-22     	; 0x2d32 <MADC_u16GetValue+0x38>
SET_BIT(ADCSRA,ADCSRA_ADIF);
    2d48:	a6 e2       	ldi	r26, 0x26	; 38
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e6 e2       	ldi	r30, 0x26	; 38
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	80 61       	ori	r24, 0x10	; 16
    2d54:	8c 93       	st	X, r24
return ADC_DATA_REG;
    2d56:	e4 e2       	ldi	r30, 0x24	; 36
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <MAP_U16MAPPING>:
u16 MAP_U16MAPPING(u16 x_max, u16 x_min ,u16 y_max,u16 y_min,u16 y){
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	2c 97       	sbiw	r28, 0x0c	; 12
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    2d86:	7e 83       	std	Y+6, r23	; 0x06
    2d88:	6d 83       	std	Y+5, r22	; 0x05
    2d8a:	58 87       	std	Y+8, r21	; 0x08
    2d8c:	4f 83       	std	Y+7, r20	; 0x07
    2d8e:	3a 87       	std	Y+10, r19	; 0x0a
    2d90:	29 87       	std	Y+9, r18	; 0x09
    2d92:	1c 87       	std	Y+12, r17	; 0x0c
    2d94:	0b 87       	std	Y+11, r16	; 0x0b
	u16 x;
	x=((u32)((u32)(x_max-x_min)*(y-y_min))/(y_max-y_min))+(x_min);
    2d96:	2b 81       	ldd	r18, Y+3	; 0x03
    2d98:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	a9 01       	movw	r20, r18
    2da0:	48 1b       	sub	r20, r24
    2da2:	59 0b       	sbc	r21, r25
    2da4:	ca 01       	movw	r24, r20
    2da6:	7c 01       	movw	r14, r24
    2da8:	00 e0       	ldi	r16, 0x00	; 0
    2daa:	10 e0       	ldi	r17, 0x00	; 0
    2dac:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dae:	3c 85       	ldd	r19, Y+12	; 0x0c
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	a9 01       	movw	r20, r18
    2db6:	48 1b       	sub	r20, r24
    2db8:	59 0b       	sbc	r21, r25
    2dba:	ca 01       	movw	r24, r20
    2dbc:	9c 01       	movw	r18, r24
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	c8 01       	movw	r24, r16
    2dc4:	b7 01       	movw	r22, r14
    2dc6:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <__mulsi3>
    2dca:	7b 01       	movw	r14, r22
    2dcc:	8c 01       	movw	r16, r24
    2dce:	2f 81       	ldd	r18, Y+7	; 0x07
    2dd0:	38 85       	ldd	r19, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	a9 01       	movw	r20, r18
    2dd8:	48 1b       	sub	r20, r24
    2dda:	59 0b       	sbc	r21, r25
    2ddc:	ca 01       	movw	r24, r20
    2dde:	9c 01       	movw	r18, r24
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	c8 01       	movw	r24, r16
    2de6:	b7 01       	movw	r22, r14
    2de8:	0e 94 a6 2c 	call	0x594c	; 0x594c <__udivmodsi4>
    2dec:	da 01       	movw	r26, r20
    2dee:	c9 01       	movw	r24, r18
    2df0:	9c 01       	movw	r18, r24
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	82 0f       	add	r24, r18
    2df8:	93 1f       	adc	r25, r19
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
	return x;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e02:	2c 96       	adiw	r28, 0x0c	; 12
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	08 95       	ret

00002e1c <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    2e24:	ea e3       	ldi	r30, 0x3A	; 58
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	8e ef       	ldi	r24, 0xFE	; 254
    2e2a:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2e2c:	e7 e3       	ldi	r30, 0x37	; 55
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2e34:	e4 e3       	ldi	r30, 0x34	; 52
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	8c e3       	ldi	r24, 0x3C	; 60
    2e3a:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2e3c:	e1 e3       	ldi	r30, 0x31	; 49
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	8f e0       	ldi	r24, 0x0F	; 15
    2e42:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    2e44:	eb e3       	ldi	r30, 0x3B	; 59
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    2e4a:	e8 e3       	ldi	r30, 0x38	; 56
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    2e50:	e5 e3       	ldi	r30, 0x35	; 53
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 ec       	ldi	r24, 0xC0	; 192
    2e56:	80 83       	st	Z, r24
	PORTD = PORTD_INITAL_VAL;
    2e58:	e2 e3       	ldi	r30, 0x32	; 50
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 ef       	ldi	r24, 0xF0	; 240
    2e5e:	80 83       	st	Z, r24





}
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <MDIO_ErrorS_EnablePinPullUp+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <MDIO_ErrorS_EnablePinPullUp+0x8>
    2e6e:	0f 92       	push	r0
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	8a 83       	std	Y+2, r24	; 0x02
    2e76:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    2e78:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	88 30       	cpi	r24, 0x08	; 8
    2e7e:	10 f0       	brcs	.+4      	; 0x2e84 <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    2e84:	a0 e5       	ldi	r26, 0x50	; 80
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e0 e5       	ldi	r30, 0x50	; 80
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8b 7f       	andi	r24, 0xFB	; 251
    2e90:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	3d 83       	std	Y+5, r19	; 0x05
    2e9a:	2c 83       	std	Y+4, r18	; 0x04
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	51 f1       	breq	.+84     	; 0x2efa <MDIO_ErrorS_EnablePinPullUp+0x94>
    2ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eaa:	23 30       	cpi	r18, 0x03	; 3
    2eac:	31 05       	cpc	r19, r1
    2eae:	34 f4       	brge	.+12     	; 0x2ebc <MDIO_ErrorS_EnablePinPullUp+0x56>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	61 f0       	breq	.+24     	; 0x2ed2 <MDIO_ErrorS_EnablePinPullUp+0x6c>
    2eba:	5b c0       	rjmp	.+182    	; 0x2f72 <MDIO_ErrorS_EnablePinPullUp+0x10c>
    2ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec0:	23 30       	cpi	r18, 0x03	; 3
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	71 f1       	breq	.+92     	; 0x2f22 <MDIO_ErrorS_EnablePinPullUp+0xbc>
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eca:	84 30       	cpi	r24, 0x04	; 4
    2ecc:	91 05       	cpc	r25, r1
    2ece:	e9 f1       	breq	.+122    	; 0x2f4a <MDIO_ErrorS_EnablePinPullUp+0xe4>
    2ed0:	50 c0       	rjmp	.+160    	; 0x2f72 <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    2ed2:	ab e3       	ldi	r26, 0x3B	; 59
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	eb e3       	ldi	r30, 0x3B	; 59
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 2e       	mov	r0, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <MDIO_ErrorS_EnablePinPullUp+0x8a>
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	0a 94       	dec	r0
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <MDIO_ErrorS_EnablePinPullUp+0x86>
    2ef4:	84 2b       	or	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	3e c0       	rjmp	.+124    	; 0x2f76 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    2efa:	a8 e3       	ldi	r26, 0x38	; 56
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e8 e3       	ldi	r30, 0x38	; 56
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	48 2f       	mov	r20, r24
    2f06:	8b 81       	ldd	r24, Y+3	; 0x03
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	02 2e       	mov	r0, r18
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <MDIO_ErrorS_EnablePinPullUp+0xb2>
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	0a 94       	dec	r0
    2f1a:	e2 f7       	brpl	.-8      	; 0x2f14 <MDIO_ErrorS_EnablePinPullUp+0xae>
    2f1c:	84 2b       	or	r24, r20
    2f1e:	8c 93       	st	X, r24
    2f20:	2a c0       	rjmp	.+84     	; 0x2f76 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    2f22:	a5 e3       	ldi	r26, 0x35	; 53
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e5 e3       	ldi	r30, 0x35	; 53
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	48 2f       	mov	r20, r24
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <MDIO_ErrorS_EnablePinPullUp+0xda>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <MDIO_ErrorS_EnablePinPullUp+0xd6>
    2f44:	84 2b       	or	r24, r20
    2f46:	8c 93       	st	X, r24
    2f48:	16 c0       	rjmp	.+44     	; 0x2f76 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2f4a:	a2 e3       	ldi	r26, 0x32	; 50
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	e2 e3       	ldi	r30, 0x32	; 50
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	48 2f       	mov	r20, r24
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	02 2e       	mov	r0, r18
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <MDIO_ErrorS_EnablePinPullUp+0x102>
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	0a 94       	dec	r0
    2f6a:	e2 f7       	brpl	.-8      	; 0x2f64 <MDIO_ErrorS_EnablePinPullUp+0xfe>
    2f6c:	84 2b       	or	r24, r20
    2f6e:	8c 93       	st	X, r24
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    2f76:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	27 97       	sbiw	r28, 0x07	; 7
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	6a 83       	std	Y+2, r22	; 0x02
    2fa0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <MDIO_voidSetPinDirection+0x22>
    2fa8:	75 c0       	rjmp	.+234    	; 0x3094 <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	3f 83       	std	Y+7, r19	; 0x07
    2fb2:	2e 83       	std	Y+6, r18	; 0x06
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	91 05       	cpc	r25, r1
    2fbc:	61 f1       	breq	.+88     	; 0x3016 <MDIO_voidSetPinDirection+0x8e>
    2fbe:	2e 81       	ldd	r18, Y+6	; 0x06
    2fc0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fc2:	23 30       	cpi	r18, 0x03	; 3
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	34 f4       	brge	.+12     	; 0x2fd4 <MDIO_voidSetPinDirection+0x4c>
    2fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fca:	9f 81       	ldd	r25, Y+7	; 0x07
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	91 05       	cpc	r25, r1
    2fd0:	69 f0       	breq	.+26     	; 0x2fec <MDIO_voidSetPinDirection+0x64>
    2fd2:	d3 c0       	rjmp	.+422    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
    2fd4:	2e 81       	ldd	r18, Y+6	; 0x06
    2fd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2fd8:	23 30       	cpi	r18, 0x03	; 3
    2fda:	31 05       	cpc	r19, r1
    2fdc:	89 f1       	breq	.+98     	; 0x3040 <MDIO_voidSetPinDirection+0xb8>
    2fde:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe2:	84 30       	cpi	r24, 0x04	; 4
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <MDIO_voidSetPinDirection+0x62>
    2fe8:	40 c0       	rjmp	.+128    	; 0x306a <MDIO_voidSetPinDirection+0xe2>
    2fea:	c7 c0       	rjmp	.+398    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    2fec:	aa e3       	ldi	r26, 0x3A	; 58
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	ea e3       	ldi	r30, 0x3A	; 58
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	48 2f       	mov	r20, r24
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	02 2e       	mov	r0, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <MDIO_voidSetPinDirection+0x82>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	0a 94       	dec	r0
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <MDIO_voidSetPinDirection+0x7e>
    300e:	80 95       	com	r24
    3010:	84 23       	and	r24, r20
    3012:	8c 93       	st	X, r24
    3014:	b2 c0       	rjmp	.+356    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    3016:	a7 e3       	ldi	r26, 0x37	; 55
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e7 e3       	ldi	r30, 0x37	; 55
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	48 2f       	mov	r20, r24
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	02 2e       	mov	r0, r18
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <MDIO_voidSetPinDirection+0xac>
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	0a 94       	dec	r0
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <MDIO_voidSetPinDirection+0xa8>
    3038:	80 95       	com	r24
    303a:	84 23       	and	r24, r20
    303c:	8c 93       	st	X, r24
    303e:	9d c0       	rjmp	.+314    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    3040:	a4 e3       	ldi	r26, 0x34	; 52
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e4 e3       	ldi	r30, 0x34	; 52
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	48 2f       	mov	r20, r24
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	02 2e       	mov	r0, r18
    3058:	02 c0       	rjmp	.+4      	; 0x305e <MDIO_voidSetPinDirection+0xd6>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	0a 94       	dec	r0
    3060:	e2 f7       	brpl	.-8      	; 0x305a <MDIO_voidSetPinDirection+0xd2>
    3062:	80 95       	com	r24
    3064:	84 23       	and	r24, r20
    3066:	8c 93       	st	X, r24
    3068:	88 c0       	rjmp	.+272    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    306a:	a1 e3       	ldi	r26, 0x31	; 49
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e1 e3       	ldi	r30, 0x31	; 49
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	48 2f       	mov	r20, r24
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	02 2e       	mov	r0, r18
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <MDIO_voidSetPinDirection+0x100>
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	0a 94       	dec	r0
    308a:	e2 f7       	brpl	.-8      	; 0x3084 <MDIO_voidSetPinDirection+0xfc>
    308c:	80 95       	com	r24
    308e:	84 23       	and	r24, r20
    3090:	8c 93       	st	X, r24
    3092:	73 c0       	rjmp	.+230    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	81 30       	cpi	r24, 0x01	; 1
    3098:	09 f0       	breq	.+2      	; 0x309c <MDIO_voidSetPinDirection+0x114>
    309a:	6f c0       	rjmp	.+222    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	3d 83       	std	Y+5, r19	; 0x05
    30a4:	2c 83       	std	Y+4, r18	; 0x04
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	9d 81       	ldd	r25, Y+5	; 0x05
    30aa:	82 30       	cpi	r24, 0x02	; 2
    30ac:	91 05       	cpc	r25, r1
    30ae:	51 f1       	breq	.+84     	; 0x3104 <MDIO_voidSetPinDirection+0x17c>
    30b0:	2c 81       	ldd	r18, Y+4	; 0x04
    30b2:	3d 81       	ldd	r19, Y+5	; 0x05
    30b4:	23 30       	cpi	r18, 0x03	; 3
    30b6:	31 05       	cpc	r19, r1
    30b8:	34 f4       	brge	.+12     	; 0x30c6 <MDIO_voidSetPinDirection+0x13e>
    30ba:	8c 81       	ldd	r24, Y+4	; 0x04
    30bc:	9d 81       	ldd	r25, Y+5	; 0x05
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	91 05       	cpc	r25, r1
    30c2:	61 f0       	breq	.+24     	; 0x30dc <MDIO_voidSetPinDirection+0x154>
    30c4:	5a c0       	rjmp	.+180    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
    30c6:	2c 81       	ldd	r18, Y+4	; 0x04
    30c8:	3d 81       	ldd	r19, Y+5	; 0x05
    30ca:	23 30       	cpi	r18, 0x03	; 3
    30cc:	31 05       	cpc	r19, r1
    30ce:	71 f1       	breq	.+92     	; 0x312c <MDIO_voidSetPinDirection+0x1a4>
    30d0:	8c 81       	ldd	r24, Y+4	; 0x04
    30d2:	9d 81       	ldd	r25, Y+5	; 0x05
    30d4:	84 30       	cpi	r24, 0x04	; 4
    30d6:	91 05       	cpc	r25, r1
    30d8:	e9 f1       	breq	.+122    	; 0x3154 <MDIO_voidSetPinDirection+0x1cc>
    30da:	4f c0       	rjmp	.+158    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    30dc:	aa e3       	ldi	r26, 0x3A	; 58
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	ea e3       	ldi	r30, 0x3A	; 58
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	48 2f       	mov	r20, r24
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	02 2e       	mov	r0, r18
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <MDIO_voidSetPinDirection+0x172>
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	0a 94       	dec	r0
    30fc:	e2 f7       	brpl	.-8      	; 0x30f6 <MDIO_voidSetPinDirection+0x16e>
    30fe:	84 2b       	or	r24, r20
    3100:	8c 93       	st	X, r24
    3102:	3b c0       	rjmp	.+118    	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    3104:	a7 e3       	ldi	r26, 0x37	; 55
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e7 e3       	ldi	r30, 0x37	; 55
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	48 2f       	mov	r20, r24
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 2e       	mov	r0, r18
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <MDIO_voidSetPinDirection+0x19a>
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	0a 94       	dec	r0
    3124:	e2 f7       	brpl	.-8      	; 0x311e <MDIO_voidSetPinDirection+0x196>
    3126:	84 2b       	or	r24, r20
    3128:	8c 93       	st	X, r24
    312a:	27 c0       	rjmp	.+78     	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    312c:	a4 e3       	ldi	r26, 0x34	; 52
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e4 e3       	ldi	r30, 0x34	; 52
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	48 2f       	mov	r20, r24
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	02 2e       	mov	r0, r18
    3144:	02 c0       	rjmp	.+4      	; 0x314a <MDIO_voidSetPinDirection+0x1c2>
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	0a 94       	dec	r0
    314c:	e2 f7       	brpl	.-8      	; 0x3146 <MDIO_voidSetPinDirection+0x1be>
    314e:	84 2b       	or	r24, r20
    3150:	8c 93       	st	X, r24
    3152:	13 c0       	rjmp	.+38     	; 0x317a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    3154:	a1 e3       	ldi	r26, 0x31	; 49
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e1 e3       	ldi	r30, 0x31	; 49
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	48 2f       	mov	r20, r24
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	02 2e       	mov	r0, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <MDIO_voidSetPinDirection+0x1ea>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <MDIO_voidSetPinDirection+0x1e6>
    3176:	84 2b       	or	r24, r20
    3178:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    317a:	27 96       	adiw	r28, 0x07	; 7
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	28 97       	sbiw	r28, 0x08	; 8
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	8a 83       	std	Y+2, r24	; 0x02
    31a2:	6b 83       	std	Y+3, r22	; 0x03
    31a4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    31a6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	88 30       	cpi	r24, 0x08	; 8
    31ac:	10 f0       	brcs	.+4      	; 0x31b2 <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	88 23       	and	r24, r24
    31b6:	09 f0       	breq	.+2      	; 0x31ba <MDIO_ErrorS_SetPinValue+0x2e>
    31b8:	78 c0       	rjmp	.+240    	; 0x32aa <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	38 87       	std	Y+8, r19	; 0x08
    31c2:	2f 83       	std	Y+7, r18	; 0x07
    31c4:	8f 81       	ldd	r24, Y+7	; 0x07
    31c6:	98 85       	ldd	r25, Y+8	; 0x08
    31c8:	82 30       	cpi	r24, 0x02	; 2
    31ca:	91 05       	cpc	r25, r1
    31cc:	61 f1       	breq	.+88     	; 0x3226 <MDIO_ErrorS_SetPinValue+0x9a>
    31ce:	2f 81       	ldd	r18, Y+7	; 0x07
    31d0:	38 85       	ldd	r19, Y+8	; 0x08
    31d2:	23 30       	cpi	r18, 0x03	; 3
    31d4:	31 05       	cpc	r19, r1
    31d6:	34 f4       	brge	.+12     	; 0x31e4 <MDIO_ErrorS_SetPinValue+0x58>
    31d8:	8f 81       	ldd	r24, Y+7	; 0x07
    31da:	98 85       	ldd	r25, Y+8	; 0x08
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	91 05       	cpc	r25, r1
    31e0:	69 f0       	breq	.+26     	; 0x31fc <MDIO_ErrorS_SetPinValue+0x70>
    31e2:	60 c0       	rjmp	.+192    	; 0x32a4 <MDIO_ErrorS_SetPinValue+0x118>
    31e4:	2f 81       	ldd	r18, Y+7	; 0x07
    31e6:	38 85       	ldd	r19, Y+8	; 0x08
    31e8:	23 30       	cpi	r18, 0x03	; 3
    31ea:	31 05       	cpc	r19, r1
    31ec:	89 f1       	breq	.+98     	; 0x3250 <MDIO_ErrorS_SetPinValue+0xc4>
    31ee:	8f 81       	ldd	r24, Y+7	; 0x07
    31f0:	98 85       	ldd	r25, Y+8	; 0x08
    31f2:	84 30       	cpi	r24, 0x04	; 4
    31f4:	91 05       	cpc	r25, r1
    31f6:	09 f4       	brne	.+2      	; 0x31fa <MDIO_ErrorS_SetPinValue+0x6e>
    31f8:	40 c0       	rjmp	.+128    	; 0x327a <MDIO_ErrorS_SetPinValue+0xee>
    31fa:	54 c0       	rjmp	.+168    	; 0x32a4 <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    31fc:	ab e3       	ldi	r26, 0x3B	; 59
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	eb e3       	ldi	r30, 0x3B	; 59
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	48 2f       	mov	r20, r24
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	02 2e       	mov	r0, r18
    3214:	02 c0       	rjmp	.+4      	; 0x321a <MDIO_ErrorS_SetPinValue+0x8e>
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	0a 94       	dec	r0
    321c:	e2 f7       	brpl	.-8      	; 0x3216 <MDIO_ErrorS_SetPinValue+0x8a>
    321e:	80 95       	com	r24
    3220:	84 23       	and	r24, r20
    3222:	8c 93       	st	X, r24
    3224:	b8 c0       	rjmp	.+368    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    3226:	a8 e3       	ldi	r26, 0x38	; 56
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e8 e3       	ldi	r30, 0x38	; 56
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	48 2f       	mov	r20, r24
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	02 2e       	mov	r0, r18
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <MDIO_ErrorS_SetPinValue+0xb8>
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	0a 94       	dec	r0
    3246:	e2 f7       	brpl	.-8      	; 0x3240 <MDIO_ErrorS_SetPinValue+0xb4>
    3248:	80 95       	com	r24
    324a:	84 23       	and	r24, r20
    324c:	8c 93       	st	X, r24
    324e:	a3 c0       	rjmp	.+326    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    3250:	a5 e3       	ldi	r26, 0x35	; 53
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	e5 e3       	ldi	r30, 0x35	; 53
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	48 2f       	mov	r20, r24
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	02 2e       	mov	r0, r18
    3268:	02 c0       	rjmp	.+4      	; 0x326e <MDIO_ErrorS_SetPinValue+0xe2>
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	0a 94       	dec	r0
    3270:	e2 f7       	brpl	.-8      	; 0x326a <MDIO_ErrorS_SetPinValue+0xde>
    3272:	80 95       	com	r24
    3274:	84 23       	and	r24, r20
    3276:	8c 93       	st	X, r24
    3278:	8e c0       	rjmp	.+284    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    327a:	a2 e3       	ldi	r26, 0x32	; 50
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e2 e3       	ldi	r30, 0x32	; 50
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	48 2f       	mov	r20, r24
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	02 2e       	mov	r0, r18
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <MDIO_ErrorS_SetPinValue+0x10c>
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	0a 94       	dec	r0
    329a:	e2 f7       	brpl	.-8      	; 0x3294 <MDIO_ErrorS_SetPinValue+0x108>
    329c:	80 95       	com	r24
    329e:	84 23       	and	r24, r20
    32a0:	8c 93       	st	X, r24
    32a2:	79 c0       	rjmp	.+242    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	76 c0       	rjmp	.+236    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	81 30       	cpi	r24, 0x01	; 1
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <MDIO_ErrorS_SetPinValue+0x126>
    32b0:	72 c0       	rjmp	.+228    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	3e 83       	std	Y+6, r19	; 0x06
    32ba:	2d 83       	std	Y+5, r18	; 0x05
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	82 30       	cpi	r24, 0x02	; 2
    32c2:	91 05       	cpc	r25, r1
    32c4:	51 f1       	breq	.+84     	; 0x331a <MDIO_ErrorS_SetPinValue+0x18e>
    32c6:	2d 81       	ldd	r18, Y+5	; 0x05
    32c8:	3e 81       	ldd	r19, Y+6	; 0x06
    32ca:	23 30       	cpi	r18, 0x03	; 3
    32cc:	31 05       	cpc	r19, r1
    32ce:	34 f4       	brge	.+12     	; 0x32dc <MDIO_ErrorS_SetPinValue+0x150>
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	81 30       	cpi	r24, 0x01	; 1
    32d6:	91 05       	cpc	r25, r1
    32d8:	61 f0       	breq	.+24     	; 0x32f2 <MDIO_ErrorS_SetPinValue+0x166>
    32da:	5b c0       	rjmp	.+182    	; 0x3392 <MDIO_ErrorS_SetPinValue+0x206>
    32dc:	2d 81       	ldd	r18, Y+5	; 0x05
    32de:	3e 81       	ldd	r19, Y+6	; 0x06
    32e0:	23 30       	cpi	r18, 0x03	; 3
    32e2:	31 05       	cpc	r19, r1
    32e4:	71 f1       	breq	.+92     	; 0x3342 <MDIO_ErrorS_SetPinValue+0x1b6>
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	84 30       	cpi	r24, 0x04	; 4
    32ec:	91 05       	cpc	r25, r1
    32ee:	e9 f1       	breq	.+122    	; 0x336a <MDIO_ErrorS_SetPinValue+0x1de>
    32f0:	50 c0       	rjmp	.+160    	; 0x3392 <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    32f2:	ab e3       	ldi	r26, 0x3B	; 59
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	eb e3       	ldi	r30, 0x3B	; 59
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	48 2f       	mov	r20, r24
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	02 2e       	mov	r0, r18
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <MDIO_ErrorS_SetPinValue+0x184>
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	0a 94       	dec	r0
    3312:	e2 f7       	brpl	.-8      	; 0x330c <MDIO_ErrorS_SetPinValue+0x180>
    3314:	84 2b       	or	r24, r20
    3316:	8c 93       	st	X, r24
    3318:	3e c0       	rjmp	.+124    	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    331a:	a8 e3       	ldi	r26, 0x38	; 56
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e8 e3       	ldi	r30, 0x38	; 56
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <MDIO_ErrorS_SetPinValue+0x1ac>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <MDIO_ErrorS_SetPinValue+0x1a8>
    333c:	84 2b       	or	r24, r20
    333e:	8c 93       	st	X, r24
    3340:	2a c0       	rjmp	.+84     	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    3342:	a5 e3       	ldi	r26, 0x35	; 53
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e5 e3       	ldi	r30, 0x35	; 53
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	48 2f       	mov	r20, r24
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	02 2e       	mov	r0, r18
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <MDIO_ErrorS_SetPinValue+0x1d4>
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	0a 94       	dec	r0
    3362:	e2 f7       	brpl	.-8      	; 0x335c <MDIO_ErrorS_SetPinValue+0x1d0>
    3364:	84 2b       	or	r24, r20
    3366:	8c 93       	st	X, r24
    3368:	16 c0       	rjmp	.+44     	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    336a:	a2 e3       	ldi	r26, 0x32	; 50
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e2 e3       	ldi	r30, 0x32	; 50
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	48 2f       	mov	r20, r24
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	02 2e       	mov	r0, r18
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <MDIO_ErrorS_SetPinValue+0x1fc>
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	0a 94       	dec	r0
    338a:	e2 f7       	brpl	.-8      	; 0x3384 <MDIO_ErrorS_SetPinValue+0x1f8>
    338c:	84 2b       	or	r24, r20
    338e:	8c 93       	st	X, r24
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    3396:	89 81       	ldd	r24, Y+1	; 0x01
}
    3398:	28 96       	adiw	r28, 0x08	; 8
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	27 97       	sbiw	r28, 0x07	; 7
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	8a 83       	std	Y+2, r24	; 0x02
    33c0:	6b 83       	std	Y+3, r22	; 0x03
    33c2:	5d 83       	std	Y+5, r21	; 0x05
    33c4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    33c6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	88 30       	cpi	r24, 0x08	; 8
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	3f 83       	std	Y+7, r19	; 0x07
    33da:	2e 83       	std	Y+6, r18	; 0x06
    33dc:	4e 81       	ldd	r20, Y+6	; 0x06
    33de:	5f 81       	ldd	r21, Y+7	; 0x07
    33e0:	42 30       	cpi	r20, 0x02	; 2
    33e2:	51 05       	cpc	r21, r1
    33e4:	59 f1       	breq	.+86     	; 0x343c <MDIO_ErrorS_GetPinValue+0x92>
    33e6:	8e 81       	ldd	r24, Y+6	; 0x06
    33e8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ea:	83 30       	cpi	r24, 0x03	; 3
    33ec:	91 05       	cpc	r25, r1
    33ee:	34 f4       	brge	.+12     	; 0x33fc <MDIO_ErrorS_GetPinValue+0x52>
    33f0:	2e 81       	ldd	r18, Y+6	; 0x06
    33f2:	3f 81       	ldd	r19, Y+7	; 0x07
    33f4:	21 30       	cpi	r18, 0x01	; 1
    33f6:	31 05       	cpc	r19, r1
    33f8:	69 f0       	breq	.+26     	; 0x3414 <MDIO_ErrorS_GetPinValue+0x6a>
    33fa:	5c c0       	rjmp	.+184    	; 0x34b4 <MDIO_ErrorS_GetPinValue+0x10a>
    33fc:	4e 81       	ldd	r20, Y+6	; 0x06
    33fe:	5f 81       	ldd	r21, Y+7	; 0x07
    3400:	43 30       	cpi	r20, 0x03	; 3
    3402:	51 05       	cpc	r21, r1
    3404:	79 f1       	breq	.+94     	; 0x3464 <MDIO_ErrorS_GetPinValue+0xba>
    3406:	8e 81       	ldd	r24, Y+6	; 0x06
    3408:	9f 81       	ldd	r25, Y+7	; 0x07
    340a:	84 30       	cpi	r24, 0x04	; 4
    340c:	91 05       	cpc	r25, r1
    340e:	09 f4       	brne	.+2      	; 0x3412 <MDIO_ErrorS_GetPinValue+0x68>
    3410:	3d c0       	rjmp	.+122    	; 0x348c <MDIO_ErrorS_GetPinValue+0xe2>
    3412:	50 c0       	rjmp	.+160    	; 0x34b4 <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    3414:	e9 e3       	ldi	r30, 0x39	; 57
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	88 2f       	mov	r24, r24
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	a9 01       	movw	r20, r18
    3426:	02 c0       	rjmp	.+4      	; 0x342c <MDIO_ErrorS_GetPinValue+0x82>
    3428:	55 95       	asr	r21
    342a:	47 95       	ror	r20
    342c:	8a 95       	dec	r24
    342e:	e2 f7       	brpl	.-8      	; 0x3428 <MDIO_ErrorS_GetPinValue+0x7e>
    3430:	ca 01       	movw	r24, r20
    3432:	81 70       	andi	r24, 0x01	; 1
    3434:	ec 81       	ldd	r30, Y+4	; 0x04
    3436:	fd 81       	ldd	r31, Y+5	; 0x05
    3438:	80 83       	st	Z, r24
    343a:	3e c0       	rjmp	.+124    	; 0x34b8 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    343c:	e6 e3       	ldi	r30, 0x36	; 54
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	28 2f       	mov	r18, r24
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	88 2f       	mov	r24, r24
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	a9 01       	movw	r20, r18
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <MDIO_ErrorS_GetPinValue+0xaa>
    3450:	55 95       	asr	r21
    3452:	47 95       	ror	r20
    3454:	8a 95       	dec	r24
    3456:	e2 f7       	brpl	.-8      	; 0x3450 <MDIO_ErrorS_GetPinValue+0xa6>
    3458:	ca 01       	movw	r24, r20
    345a:	81 70       	andi	r24, 0x01	; 1
    345c:	ec 81       	ldd	r30, Y+4	; 0x04
    345e:	fd 81       	ldd	r31, Y+5	; 0x05
    3460:	80 83       	st	Z, r24
    3462:	2a c0       	rjmp	.+84     	; 0x34b8 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    3464:	e3 e3       	ldi	r30, 0x33	; 51
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	88 2f       	mov	r24, r24
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	a9 01       	movw	r20, r18
    3476:	02 c0       	rjmp	.+4      	; 0x347c <MDIO_ErrorS_GetPinValue+0xd2>
    3478:	55 95       	asr	r21
    347a:	47 95       	ror	r20
    347c:	8a 95       	dec	r24
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <MDIO_ErrorS_GetPinValue+0xce>
    3480:	ca 01       	movw	r24, r20
    3482:	81 70       	andi	r24, 0x01	; 1
    3484:	ec 81       	ldd	r30, Y+4	; 0x04
    3486:	fd 81       	ldd	r31, Y+5	; 0x05
    3488:	80 83       	st	Z, r24
    348a:	16 c0       	rjmp	.+44     	; 0x34b8 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    348c:	e0 e3       	ldi	r30, 0x30	; 48
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	a9 01       	movw	r20, r18
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <MDIO_ErrorS_GetPinValue+0xfa>
    34a0:	55 95       	asr	r21
    34a2:	47 95       	ror	r20
    34a4:	8a 95       	dec	r24
    34a6:	e2 f7       	brpl	.-8      	; 0x34a0 <MDIO_ErrorS_GetPinValue+0xf6>
    34a8:	ca 01       	movw	r24, r20
    34aa:	81 70       	andi	r24, 0x01	; 1
    34ac:	ec 81       	ldd	r30, Y+4	; 0x04
    34ae:	fd 81       	ldd	r31, Y+5	; 0x05
    34b0:	80 83       	st	Z, r24
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    34b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    34ba:	27 96       	adiw	r28, 0x07	; 7
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	00 d0       	rcall	.+0      	; 0x34d2 <MDIO_ErrorS_SetPortValue+0x6>
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <MDIO_ErrorS_SetPortValue+0x8>
    34d4:	0f 92       	push	r0
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	8a 83       	std	Y+2, r24	; 0x02
    34dc:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    34de:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	3d 83       	std	Y+5, r19	; 0x05
    34e8:	2c 83       	std	Y+4, r18	; 0x04
    34ea:	8c 81       	ldd	r24, Y+4	; 0x04
    34ec:	9d 81       	ldd	r25, Y+5	; 0x05
    34ee:	82 30       	cpi	r24, 0x02	; 2
    34f0:	91 05       	cpc	r25, r1
    34f2:	d9 f0       	breq	.+54     	; 0x352a <MDIO_ErrorS_SetPortValue+0x5e>
    34f4:	2c 81       	ldd	r18, Y+4	; 0x04
    34f6:	3d 81       	ldd	r19, Y+5	; 0x05
    34f8:	23 30       	cpi	r18, 0x03	; 3
    34fa:	31 05       	cpc	r19, r1
    34fc:	34 f4       	brge	.+12     	; 0x350a <MDIO_ErrorS_SetPortValue+0x3e>
    34fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3500:	9d 81       	ldd	r25, Y+5	; 0x05
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	91 05       	cpc	r25, r1
    3506:	61 f0       	breq	.+24     	; 0x3520 <MDIO_ErrorS_SetPortValue+0x54>
    3508:	1f c0       	rjmp	.+62     	; 0x3548 <MDIO_ErrorS_SetPortValue+0x7c>
    350a:	2c 81       	ldd	r18, Y+4	; 0x04
    350c:	3d 81       	ldd	r19, Y+5	; 0x05
    350e:	23 30       	cpi	r18, 0x03	; 3
    3510:	31 05       	cpc	r19, r1
    3512:	81 f0       	breq	.+32     	; 0x3534 <MDIO_ErrorS_SetPortValue+0x68>
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	84 30       	cpi	r24, 0x04	; 4
    351a:	91 05       	cpc	r25, r1
    351c:	81 f0       	breq	.+32     	; 0x353e <MDIO_ErrorS_SetPortValue+0x72>
    351e:	14 c0       	rjmp	.+40     	; 0x3548 <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    3520:	eb e3       	ldi	r30, 0x3B	; 59
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	80 83       	st	Z, r24
    3528:	11 c0       	rjmp	.+34     	; 0x354c <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    352a:	e8 e3       	ldi	r30, 0x38	; 56
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	80 83       	st	Z, r24
    3532:	0c c0       	rjmp	.+24     	; 0x354c <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    3534:	e5 e3       	ldi	r30, 0x35	; 53
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	80 83       	st	Z, r24
    353c:	07 c0       	rjmp	.+14     	; 0x354c <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    353e:	e2 e3       	ldi	r30, 0x32	; 50
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	80 83       	st	Z, r24
    3546:	02 c0       	rjmp	.+4      	; 0x354c <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    354c:	89 81       	ldd	r24, Y+1	; 0x01


}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	00 d0       	rcall	.+0      	; 0x3564 <MDIO_ErrorS_GetPortValue+0x6>
    3564:	00 d0       	rcall	.+0      	; 0x3566 <MDIO_ErrorS_GetPortValue+0x8>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <MDIO_ErrorS_GetPortValue+0xa>
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	8a 83       	std	Y+2, r24	; 0x02
    356e:	7c 83       	std	Y+4, r23	; 0x04
    3570:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3572:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	3e 83       	std	Y+6, r19	; 0x06
    357c:	2d 83       	std	Y+5, r18	; 0x05
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	91 05       	cpc	r25, r1
    3586:	e9 f0       	breq	.+58     	; 0x35c2 <MDIO_ErrorS_GetPortValue+0x64>
    3588:	2d 81       	ldd	r18, Y+5	; 0x05
    358a:	3e 81       	ldd	r19, Y+6	; 0x06
    358c:	23 30       	cpi	r18, 0x03	; 3
    358e:	31 05       	cpc	r19, r1
    3590:	34 f4       	brge	.+12     	; 0x359e <MDIO_ErrorS_GetPortValue+0x40>
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	91 05       	cpc	r25, r1
    359a:	61 f0       	breq	.+24     	; 0x35b4 <MDIO_ErrorS_GetPortValue+0x56>
    359c:	27 c0       	rjmp	.+78     	; 0x35ec <MDIO_ErrorS_GetPortValue+0x8e>
    359e:	2d 81       	ldd	r18, Y+5	; 0x05
    35a0:	3e 81       	ldd	r19, Y+6	; 0x06
    35a2:	23 30       	cpi	r18, 0x03	; 3
    35a4:	31 05       	cpc	r19, r1
    35a6:	a1 f0       	breq	.+40     	; 0x35d0 <MDIO_ErrorS_GetPortValue+0x72>
    35a8:	8d 81       	ldd	r24, Y+5	; 0x05
    35aa:	9e 81       	ldd	r25, Y+6	; 0x06
    35ac:	84 30       	cpi	r24, 0x04	; 4
    35ae:	91 05       	cpc	r25, r1
    35b0:	b1 f0       	breq	.+44     	; 0x35de <MDIO_ErrorS_GetPortValue+0x80>
    35b2:	1c c0       	rjmp	.+56     	; 0x35ec <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    35b4:	e9 e3       	ldi	r30, 0x39	; 57
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	eb 81       	ldd	r30, Y+3	; 0x03
    35bc:	fc 81       	ldd	r31, Y+4	; 0x04
    35be:	80 83       	st	Z, r24
    35c0:	17 c0       	rjmp	.+46     	; 0x35f0 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    35c2:	e6 e3       	ldi	r30, 0x36	; 54
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	80 81       	ld	r24, Z
    35c8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ca:	fc 81       	ldd	r31, Y+4	; 0x04
    35cc:	80 83       	st	Z, r24
    35ce:	10 c0       	rjmp	.+32     	; 0x35f0 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    35d0:	e3 e3       	ldi	r30, 0x33	; 51
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	eb 81       	ldd	r30, Y+3	; 0x03
    35d8:	fc 81       	ldd	r31, Y+4	; 0x04
    35da:	80 83       	st	Z, r24
    35dc:	09 c0       	rjmp	.+18     	; 0x35f0 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    35de:	e0 e3       	ldi	r30, 0x30	; 48
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	eb 81       	ldd	r30, Y+3	; 0x03
    35e6:	fc 81       	ldd	r31, Y+4	; 0x04
    35e8:	80 83       	st	Z, r24
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    35f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    35f2:	26 96       	adiw	r28, 0x06	; 6
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	08 95       	ret

00003604 <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    3604:	df 93       	push	r29
    3606:	cf 93       	push	r28
    3608:	00 d0       	rcall	.+0      	; 0x360a <MDIO_ErrorS_TogPinValue+0x6>
    360a:	00 d0       	rcall	.+0      	; 0x360c <MDIO_ErrorS_TogPinValue+0x8>
    360c:	0f 92       	push	r0
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
    3612:	8a 83       	std	Y+2, r24	; 0x02
    3614:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3616:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	3d 83       	std	Y+5, r19	; 0x05
    3620:	2c 83       	std	Y+4, r18	; 0x04
    3622:	8c 81       	ldd	r24, Y+4	; 0x04
    3624:	9d 81       	ldd	r25, Y+5	; 0x05
    3626:	82 30       	cpi	r24, 0x02	; 2
    3628:	91 05       	cpc	r25, r1
    362a:	51 f1       	breq	.+84     	; 0x3680 <MDIO_ErrorS_TogPinValue+0x7c>
    362c:	2c 81       	ldd	r18, Y+4	; 0x04
    362e:	3d 81       	ldd	r19, Y+5	; 0x05
    3630:	23 30       	cpi	r18, 0x03	; 3
    3632:	31 05       	cpc	r19, r1
    3634:	34 f4       	brge	.+12     	; 0x3642 <MDIO_ErrorS_TogPinValue+0x3e>
    3636:	8c 81       	ldd	r24, Y+4	; 0x04
    3638:	9d 81       	ldd	r25, Y+5	; 0x05
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	91 05       	cpc	r25, r1
    363e:	61 f0       	breq	.+24     	; 0x3658 <MDIO_ErrorS_TogPinValue+0x54>
    3640:	5b c0       	rjmp	.+182    	; 0x36f8 <MDIO_ErrorS_TogPinValue+0xf4>
    3642:	2c 81       	ldd	r18, Y+4	; 0x04
    3644:	3d 81       	ldd	r19, Y+5	; 0x05
    3646:	23 30       	cpi	r18, 0x03	; 3
    3648:	31 05       	cpc	r19, r1
    364a:	71 f1       	breq	.+92     	; 0x36a8 <MDIO_ErrorS_TogPinValue+0xa4>
    364c:	8c 81       	ldd	r24, Y+4	; 0x04
    364e:	9d 81       	ldd	r25, Y+5	; 0x05
    3650:	84 30       	cpi	r24, 0x04	; 4
    3652:	91 05       	cpc	r25, r1
    3654:	e9 f1       	breq	.+122    	; 0x36d0 <MDIO_ErrorS_TogPinValue+0xcc>
    3656:	50 c0       	rjmp	.+160    	; 0x36f8 <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    3658:	ab e3       	ldi	r26, 0x3B	; 59
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	eb e3       	ldi	r30, 0x3B	; 59
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	48 2f       	mov	r20, r24
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	02 2e       	mov	r0, r18
    3670:	02 c0       	rjmp	.+4      	; 0x3676 <MDIO_ErrorS_TogPinValue+0x72>
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	0a 94       	dec	r0
    3678:	e2 f7       	brpl	.-8      	; 0x3672 <MDIO_ErrorS_TogPinValue+0x6e>
    367a:	84 27       	eor	r24, r20
    367c:	8c 93       	st	X, r24
    367e:	3e c0       	rjmp	.+124    	; 0x36fc <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    3680:	a8 e3       	ldi	r26, 0x38	; 56
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e8 e3       	ldi	r30, 0x38	; 56
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	48 2f       	mov	r20, r24
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	02 2e       	mov	r0, r18
    3698:	02 c0       	rjmp	.+4      	; 0x369e <MDIO_ErrorS_TogPinValue+0x9a>
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	0a 94       	dec	r0
    36a0:	e2 f7       	brpl	.-8      	; 0x369a <MDIO_ErrorS_TogPinValue+0x96>
    36a2:	84 27       	eor	r24, r20
    36a4:	8c 93       	st	X, r24
    36a6:	2a c0       	rjmp	.+84     	; 0x36fc <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    36a8:	a5 e3       	ldi	r26, 0x35	; 53
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e5 e3       	ldi	r30, 0x35	; 53
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	48 2f       	mov	r20, r24
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	02 2e       	mov	r0, r18
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <MDIO_ErrorS_TogPinValue+0xc2>
    36c2:	88 0f       	add	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	0a 94       	dec	r0
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <MDIO_ErrorS_TogPinValue+0xbe>
    36ca:	84 27       	eor	r24, r20
    36cc:	8c 93       	st	X, r24
    36ce:	16 c0       	rjmp	.+44     	; 0x36fc <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    36d0:	a2 e3       	ldi	r26, 0x32	; 50
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	e2 e3       	ldi	r30, 0x32	; 50
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	80 81       	ld	r24, Z
    36da:	48 2f       	mov	r20, r24
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	02 2e       	mov	r0, r18
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <MDIO_ErrorS_TogPinValue+0xea>
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	0a 94       	dec	r0
    36f0:	e2 f7       	brpl	.-8      	; 0x36ea <MDIO_ErrorS_TogPinValue+0xe6>
    36f2:	84 27       	eor	r24, r20
    36f4:	8c 93       	st	X, r24
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <MTWI_voidInit>:
#include "MTWI_config.h"



void MTWI_voidInit(void)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
	/* Set Master | Slave Address */
	TWAR = MY_ADDRESS << 1;
    3716:	e2 e2       	ldi	r30, 0x22	; 34
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	80 83       	st	Z, r24
	/*Set PRESCALER Value */
#if TWI_PRESCALER == TWI_DIV_1
	TWSR = 0b00000000;
    371e:	e1 e2       	ldi	r30, 0x21	; 33
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	10 82       	st	Z, r1
#elif TWI_PRESCALER == TWI_DIV_64
	TWSR = 0b00000011;

#endif
	/*Set PRESCALER TWBR Value */
	TWBR = TWBR_VALUE;
    3724:	e0 e2       	ldi	r30, 0x20	; 32
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	82 e0       	ldi	r24, 0x02	; 2
    372a:	80 83       	st	Z, r24


	/*Set TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    372c:	a6 e5       	ldi	r26, 0x56	; 86
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e6 e5       	ldi	r30, 0x56	; 86
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	84 60       	ori	r24, 0x04	; 4
    3738:	8c 93       	st	X, r24
}
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <MTWI_voidStart>:

void MTWI_voidStart(void)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
	/* set TWSTA to start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    3748:	a6 e5       	ldi	r26, 0x56	; 86
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	e6 e5       	ldi	r30, 0x56	; 86
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	80 62       	ori	r24, 0x20	; 32
    3754:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    3756:	a6 e5       	ldi	r26, 0x56	; 86
    3758:	b0 e0       	ldi	r27, 0x00	; 0
    375a:	e6 e5       	ldi	r30, 0x56	; 86
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3764:	a6 e5       	ldi	r26, 0x56	; 86
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	e6 e5       	ldi	r30, 0x56	; 86
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	84 60       	ori	r24, 0x04	; 4
    3770:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    3772:	e6 e5       	ldi	r30, 0x56	; 86
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	88 23       	and	r24, r24
    377a:	dc f7       	brge	.-10     	; 0x3772 <MTWI_voidStart+0x32>


}
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <MTWI_voidWrite>:

void MTWI_voidWrite(u8 Copy_u8Data)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	0f 92       	push	r0
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	89 83       	std	Y+1, r24	; 0x01
	/* Set Data | Address to TWDR */
	TWDR = Copy_u8Data;
    378e:	e3 e2       	ldi	r30, 0x23	; 35
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	80 83       	st	Z, r24

	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    3796:	a6 e5       	ldi	r26, 0x56	; 86
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	e6 e5       	ldi	r30, 0x56	; 86
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 81       	ld	r24, Z
    37a0:	8f 7d       	andi	r24, 0xDF	; 223
    37a2:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    37a4:	a6 e5       	ldi	r26, 0x56	; 86
    37a6:	b0 e0       	ldi	r27, 0x00	; 0
    37a8:	e6 e5       	ldi	r30, 0x56	; 86
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	80 81       	ld	r24, Z
    37ae:	80 68       	ori	r24, 0x80	; 128
    37b0:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    37b2:	a6 e5       	ldi	r26, 0x56	; 86
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e6 e5       	ldi	r30, 0x56	; 86
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	84 60       	ori	r24, 0x04	; 4
    37be:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    37c0:	e6 e5       	ldi	r30, 0x56	; 86
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	88 23       	and	r24, r24
    37c8:	dc f7       	brge	.-10     	; 0x37c0 <MTWI_voidWrite+0x3e>

}
    37ca:	0f 90       	pop	r0
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <MTWI_u8ReadWithACK>:

u8 MTWI_u8ReadWithACK(void)
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    37da:	a6 e5       	ldi	r26, 0x56	; 86
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e6 e5       	ldi	r30, 0x56	; 86
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	8f 7d       	andi	r24, 0xDF	; 223
    37e6:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    37e8:	a6 e5       	ldi	r26, 0x56	; 86
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	e6 e5       	ldi	r30, 0x56	; 86
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	80 68       	ori	r24, 0x80	; 128
    37f4:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    37f6:	a6 e5       	ldi	r26, 0x56	; 86
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	e6 e5       	ldi	r30, 0x56	; 86
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 81       	ld	r24, Z
    3800:	84 60       	ori	r24, 0x04	; 4
    3802:	8c 93       	st	X, r24



	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    3804:	e6 e5       	ldi	r30, 0x56	; 86
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	88 23       	and	r24, r24
    380c:	dc f7       	brge	.-10     	; 0x3804 <MTWI_u8ReadWithACK+0x32>

	return TWDR;
    380e:	e3 e2       	ldi	r30, 0x23	; 35
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
}
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <MTWI_voidStop>:

void MTWI_voidStop(void)
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
	/* Set TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    3822:	a6 e5       	ldi	r26, 0x56	; 86
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	e6 e5       	ldi	r30, 0x56	; 86
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	80 81       	ld	r24, Z
    382c:	80 61       	ori	r24, 0x10	; 16
    382e:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    3830:	a6 e5       	ldi	r26, 0x56	; 86
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	e6 e5       	ldi	r30, 0x56	; 86
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	80 68       	ori	r24, 0x80	; 128
    383c:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    383e:	a6 e5       	ldi	r26, 0x56	; 86
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	e6 e5       	ldi	r30, 0x56	; 86
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	84 60       	ori	r24, 0x04	; 4
    384a:	8c 93       	st	X, r24

}
    384c:	cf 91       	pop	r28
    384e:	df 91       	pop	r29
    3850:	08 95       	ret

00003852 <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void)
{
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    385a:	e1 e2       	ldi	r30, 0x21	; 33
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	88 7f       	andi	r24, 0xF8	; 248
}
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <UART_voidInit>:
#include "MUART_Driver_iti_interface.h"
#include "MUART_Driver_iti_register.h"
#include "MUART_Driver_iti_config.h"
#include "MUART_Driver_iti_private.h"

void UART_voidInit(void){
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
	UBRRL=51;
    3872:	e9 e2       	ldi	r30, 0x29	; 41
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	83 e3       	ldi	r24, 0x33	; 51
    3878:	80 83       	st	Z, r24

u8 Local_u8Temp=0;
    387a:	19 82       	std	Y+1, r1	; 0x01
SET_BIT(UCSRB,UCSRB_RXEN);
    387c:	aa e2       	ldi	r26, 0x2A	; 42
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	ea e2       	ldi	r30, 0x2A	; 42
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	80 61       	ori	r24, 0x10	; 16
    3888:	8c 93       	st	X, r24
SET_BIT(UCSRB,UCSRB_TXEN);
    388a:	aa e2       	ldi	r26, 0x2A	; 42
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	ea e2       	ldi	r30, 0x2A	; 42
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	88 60       	ori	r24, 0x08	; 8
    3896:	8c 93       	st	X, r24
CLR_BIT(UCSRB,UCSRB_UCSZ2);
    3898:	aa e2       	ldi	r26, 0x2A	; 42
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	ea e2       	ldi	r30, 0x2A	; 42
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	8b 7f       	andi	r24, 0xFB	; 251
    38a4:	8c 93       	st	X, r24
SET_BIT(Local_u8Temp,UCSRC_URSEL);
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	80 68       	ori	r24, 0x80	; 128
    38aa:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_u8Temp,UCSRC_UMSEL);
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	8f 7b       	andi	r24, 0xBF	; 191
    38b0:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_u8Temp,UCSRC_USBS);
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	87 7f       	andi	r24, 0xF7	; 247
    38b6:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_u8Temp,UCSRC_UCSZ0);
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	82 60       	ori	r24, 0x02	; 2
    38bc:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_u8Temp,UCSRC_UCSZ1);
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	84 60       	ori	r24, 0x04	; 4
    38c2:	89 83       	std	Y+1, r24	; 0x01
UCSRC=Local_u8Temp;
    38c4:	e0 e4       	ldi	r30, 0x40	; 64
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	80 83       	st	Z, r24

}
    38cc:	0f 90       	pop	r0
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <UART_voidTransmit>:
void UART_voidTransmit(u8 Copy_u8Data){
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	00 d0       	rcall	.+0      	; 0x38da <UART_voidTransmit+0x6>
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UCSRA_UDRE)==0);
    38e0:	eb e2       	ldi	r30, 0x2B	; 43
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
UDR=Copy_u8Data;
    38e6:	ec e2       	ldi	r30, 0x2C	; 44
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	80 83       	st	Z, r24

}
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <UART_u8Recive>:
u8 UART_u8Recive(void){
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,UCSRA_RXC)==0);
    3902:	eb e2       	ldi	r30, 0x2B	; 43
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	80 81       	ld	r24, Z
		return UDR;
    3908:	ec e2       	ldi	r30, 0x2C	; 44
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
}
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <SPI_voidInitMaster>:
#include "MACROS.h"
#include "SPI_config.h"
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_register.h"
void SPI_voidInitMaster(void){
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    391e:	ad e2       	ldi	r26, 0x2D	; 45
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	ed e2       	ldi	r30, 0x2D	; 45
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	80 61       	ori	r24, 0x10	; 16
    392a:	8c 93       	st	X, r24
SET_BIT(SPCR,SPCR_SPR0);
    392c:	ad e2       	ldi	r26, 0x2D	; 45
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	ed e2       	ldi	r30, 0x2D	; 45
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	81 60       	ori	r24, 0x01	; 1
    3938:	8c 93       	st	X, r24
CLR_BIT(SPCR,SPCR_SPR1);
    393a:	ad e2       	ldi	r26, 0x2D	; 45
    393c:	b0 e0       	ldi	r27, 0x00	; 0
    393e:	ed e2       	ldi	r30, 0x2D	; 45
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	8d 7f       	andi	r24, 0xFD	; 253
    3946:	8c 93       	st	X, r24
CLR_BIT(SPSR,SPSR_SPI2X);
    3948:	ae e2       	ldi	r26, 0x2E	; 46
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	ee e2       	ldi	r30, 0x2E	; 46
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	8e 7f       	andi	r24, 0xFE	; 254
    3954:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    3956:	ad e2       	ldi	r26, 0x2D	; 45
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	ed e2       	ldi	r30, 0x2D	; 45
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 64       	ori	r24, 0x40	; 64
    3962:	8c 93       	st	X, r24
}
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <SPI_voidInitSlave>:

void SPI_voidInitSlave(void){
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    3972:	ad e2       	ldi	r26, 0x2D	; 45
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	ed e2       	ldi	r30, 0x2D	; 45
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	8f 7e       	andi	r24, 0xEF	; 239
    397e:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPE);
    3980:	ad e2       	ldi	r26, 0x2D	; 45
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	ed e2       	ldi	r30, 0x2D	; 45
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	80 64       	ori	r24, 0x40	; 64
    398c:	8c 93       	st	X, r24
}
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	08 95       	ret

00003994 <SPI_u8Tranceive>:

u8 SPI_u8Tranceive (u8 Copy_u8Data){
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <SPI_u8Tranceive+0x6>
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	89 83       	std	Y+1, r24	; 0x01
SPDR=Copy_u8Data;
    39a0:	ef e2       	ldi	r30, 0x2F	; 47
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	80 83       	st	Z, r24
while (GET_BIT(SPSR,SPSR_SPIF)==0);
    39a8:	ee e2       	ldi	r30, 0x2E	; 46
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z

return SPDR;
    39ae:	ef e2       	ldi	r30, 0x2F	; 47
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z

}
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <main>:





int main(void) {
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	ca 5b       	subi	r28, 0xBA	; 186
    39cc:	d0 40       	sbci	r29, 0x00	; 0
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
	int z ;
	u16 key;
	u16 ADC_u16Reading;
	u16 ADC_u16MAPPED;

	Port_voidInit();
    39d8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <Port_voidInit>
	HLCD_voidInit();
    39dc:	0e 94 42 07 	call	0xe84	; 0xe84 <HLCD_voidInit>
	UART_voidInit();
    39e0:	0e 94 34 1c 	call	0x3868	; 0x3868 <UART_voidInit>
	MADC_voidinit();
    39e4:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <MADC_voidinit>


	u8 f=0,Key,Pass_Counter=0,flag=0;
    39e8:	fe 01       	movw	r30, r28
    39ea:	ee 54       	subi	r30, 0x4E	; 78
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	10 82       	st	Z, r1
    39f0:	fe 01       	movw	r30, r28
    39f2:	e0 55       	subi	r30, 0x50	; 80
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	10 82       	st	Z, r1
    39f8:	fe 01       	movw	r30, r28
    39fa:	e1 55       	subi	r30, 0x51	; 81
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	10 82       	st	Z, r1
	u16 i=10000;
    3a00:	fe 01       	movw	r30, r28
    3a02:	e3 55       	subi	r30, 0x53	; 83
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 e1       	ldi	r24, 0x10	; 16
    3a08:	97 e2       	ldi	r25, 0x27	; 39
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
	u16 ID=0 ;
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e5 55       	subi	r30, 0x55	; 85
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	11 82       	std	Z+1, r1	; 0x01
    3a16:	10 82       	st	Z, r1
	u16 Pass=0 ;
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e7 55       	subi	r30, 0x57	; 87
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	11 82       	std	Z+1, r1	; 0x01
    3a20:	10 82       	st	Z, r1

	Port_voidInit();
    3a22:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <Port_voidInit>
	HLCD_voidInit();
    3a26:	0e 94 42 07 	call	0xe84	; 0xe84 <HLCD_voidInit>
	MTWI_voidInit();
    3a2a:	0e 94 87 1b 	call	0x370e	; 0x370e <MTWI_voidInit>

	/*Protection*/
	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	40 e0       	ldi	r20, 0x00	; 0
    3a34:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>

	while(1)
	{
		HLCD_voidSetCursorPosition(1,0);
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("1.Open Smart Sys");
    3a40:	80 e6       	ldi	r24, 0x60	; 96
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
		HLCD_voidSetCursorPosition(2,0);
    3a48:	82 e0       	ldi	r24, 0x02	; 2
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("# For More");
    3a50:	81 e7       	ldi	r24, 0x71	; 113
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
		Key=HKPD_u8GetPressedKey();
    3a58:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	ef 54       	subi	r30, 0x4F	; 79
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 83       	st	Z, r24

		if(Key != NOT_PRESSED )
    3a64:	fe 01       	movw	r30, r28
    3a66:	ef 54       	subi	r30, 0x4F	; 79
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a6e:	21 f3       	breq	.-56     	; 0x3a38 <main+0x7a>
		{
			if (Key=='#')
    3a70:	fe 01       	movw	r30, r28
    3a72:	ef 54       	subi	r30, 0x4F	; 79
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	83 32       	cpi	r24, 0x23	; 35
    3a7a:	f9 f4       	brne	.+62     	; 0x3aba <main+0xfc>
			{
				HLCD_voidClearDisplay();
    3a7c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("2.Edit Pass");
    3a88:	8c e7       	ldi	r24, 0x7C	; 124
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
				HLCD_voidSetCursorPosition(2,0);
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("3.Add User");
    3a98:	88 e8       	ldi	r24, 0x88	; 136
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
				do
				{
					Key=HKPD_u8GetPressedKey();
    3aa0:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ef 54       	subi	r30, 0x4F	; 79
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	80 83       	st	Z, r24
				}while(Key == NOT_PRESSED);
    3aac:	fe 01       	movw	r30, r28
    3aae:	ef 54       	subi	r30, 0x4F	; 79
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ab6:	a1 f3       	breq	.-24     	; 0x3aa0 <main+0xe2>
    3ab8:	bf cf       	rjmp	.-130    	; 0x3a38 <main+0x7a>
			}
			else if(Key==1)
    3aba:	fe 01       	movw	r30, r28
    3abc:	ef 54       	subi	r30, 0x4F	; 79
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	80 81       	ld	r24, Z
    3ac2:	81 30       	cpi	r24, 0x01	; 1
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <main+0x10a>
    3ac6:	dd c5       	rjmp	.+3002   	; 0x4682 <main+0xcc4>
			{
				HLCD_voidClearDisplay();
    3ac8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	60 e0       	ldi	r22, 0x00	; 0
    3ad0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Enter ID :");
    3ad4:	83 e9       	ldi	r24, 0x93	; 147
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
				i=10000;
    3adc:	fe 01       	movw	r30, r28
    3ade:	e3 55       	subi	r30, 0x53	; 83
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 e1       	ldi	r24, 0x10	; 16
    3ae4:	97 e2       	ldi	r25, 0x27	; 39
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24
				ID=0;
    3aea:	fe 01       	movw	r30, r28
    3aec:	e5 55       	subi	r30, 0x55	; 85
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	11 82       	std	Z+1, r1	; 0x01
    3af2:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    3af4:	fe 01       	movw	r30, r28
    3af6:	ee 54       	subi	r30, 0x4E	; 78
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	10 82       	st	Z, r1
    3afc:	51 c0       	rjmp	.+162    	; 0x3ba0 <main+0x1e2>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    3afe:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    3b02:	fe 01       	movw	r30, r28
    3b04:	ef 54       	subi	r30, 0x4F	; 79
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ef 54       	subi	r30, 0x4F	; 79
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 81       	ld	r24, Z
    3b12:	8f 3f       	cpi	r24, 0xFF	; 255
    3b14:	a1 f3       	breq	.-24     	; 0x3afe <main+0x140>
					HLCD_voidSendInt(Key);
    3b16:	fe 01       	movw	r30, r28
    3b18:	ef 54       	subi	r30, 0x4F	; 79
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 81       	ld	r24, Z
    3b1e:	88 2f       	mov	r24, r24
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	a0 e0       	ldi	r26, 0x00	; 0
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
					i/=10;
    3b2e:	8e 01       	movw	r16, r28
    3b30:	03 55       	subi	r16, 0x53	; 83
    3b32:	1f 4f       	sbci	r17, 0xFF	; 255
    3b34:	fe 01       	movw	r30, r28
    3b36:	e3 55       	subi	r30, 0x53	; 83
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	91 81       	ldd	r25, Z+1	; 0x01
    3b3e:	2a e0       	ldi	r18, 0x0A	; 10
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	b9 01       	movw	r22, r18
    3b44:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    3b48:	cb 01       	movw	r24, r22
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
					ID += ( Key*i );
    3b50:	fe 01       	movw	r30, r28
    3b52:	ef 54       	subi	r30, 0x4F	; 79
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	80 81       	ld	r24, Z
    3b58:	28 2f       	mov	r18, r24
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e3 55       	subi	r30, 0x53	; 83
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	a9 01       	movw	r20, r18
    3b68:	48 9f       	mul	r20, r24
    3b6a:	90 01       	movw	r18, r0
    3b6c:	49 9f       	mul	r20, r25
    3b6e:	30 0d       	add	r19, r0
    3b70:	58 9f       	mul	r21, r24
    3b72:	30 0d       	add	r19, r0
    3b74:	11 24       	eor	r1, r1
    3b76:	de 01       	movw	r26, r28
    3b78:	a5 55       	subi	r26, 0x55	; 85
    3b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e5 55       	subi	r30, 0x55	; 85
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	82 0f       	add	r24, r18
    3b88:	93 1f       	adc	r25, r19
    3b8a:	8d 93       	st	X+, r24
    3b8c:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Enter ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    3b8e:	de 01       	movw	r26, r28
    3b90:	ae 54       	subi	r26, 0x4E	; 78
    3b92:	bf 4f       	sbci	r27, 0xFF	; 255
    3b94:	fe 01       	movw	r30, r28
    3b96:	ee 54       	subi	r30, 0x4E	; 78
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 81       	ld	r24, Z
    3b9c:	8f 5f       	subi	r24, 0xFF	; 255
    3b9e:	8c 93       	st	X, r24
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	ee 54       	subi	r30, 0x4E	; 78
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 81       	ld	r24, Z
    3ba8:	84 30       	cpi	r24, 0x04	; 4
    3baa:	08 f4       	brcc	.+2      	; 0x3bae <main+0x1f0>
    3bac:	a8 cf       	rjmp	.-176    	; 0x3afe <main+0x140>
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );

				}
				Check_ID(ID);
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e5 55       	subi	r30, 0x55	; 85
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	0e 94 c1 2b 	call	0x5782	; 0x5782 <Check_ID>
				if(flag_User != 0)
    3bbc:	80 91 0e 01 	lds	r24, 0x010E
    3bc0:	88 23       	and	r24, r24
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <main+0x208>
    3bc4:	a3 c4       	rjmp	.+2374   	; 0x450c <main+0xb4e>
				{
					HLCD_voidClearDisplay();
    3bc6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Pass : ");
    3bca:	8e e9       	ldi	r24, 0x9E	; 158
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	eb 55       	subi	r30, 0x5B	; 91
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	aa e7       	ldi	r26, 0x7A	; 122
    3bde:	b4 e4       	ldi	r27, 0x44	; 68
    3be0:	80 83       	st	Z, r24
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	a2 83       	std	Z+2, r26	; 0x02
    3be6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be8:	8e 01       	movw	r16, r28
    3bea:	0f 55       	subi	r16, 0x5F	; 95
    3bec:	1f 4f       	sbci	r17, 0xFF	; 255
    3bee:	fe 01       	movw	r30, r28
    3bf0:	eb 55       	subi	r30, 0x5B	; 91
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4a ef       	ldi	r20, 0xFA	; 250
    3c02:	54 e4       	ldi	r21, 0x44	; 68
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	80 83       	st	Z, r24
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	a2 83       	std	Z+2, r26	; 0x02
    3c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c16:	fe 01       	movw	r30, r28
    3c18:	ef 55       	subi	r30, 0x5F	; 95
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	82 81       	ldd	r24, Z+2	; 0x02
    3c22:	93 81       	ldd	r25, Z+3	; 0x03
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	40 e8       	ldi	r20, 0x80	; 128
    3c2a:	5f e3       	ldi	r21, 0x3F	; 63
    3c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c30:	88 23       	and	r24, r24
    3c32:	44 f4       	brge	.+16     	; 0x3c44 <main+0x286>
		__ticks = 1;
    3c34:	fe 01       	movw	r30, r28
    3c36:	e1 56       	subi	r30, 0x61	; 97
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	91 83       	std	Z+1, r25	; 0x01
    3c40:	80 83       	st	Z, r24
    3c42:	64 c0       	rjmp	.+200    	; 0x3d0c <main+0x34e>
	else if (__tmp > 65535)
    3c44:	fe 01       	movw	r30, r28
    3c46:	ef 55       	subi	r30, 0x5F	; 95
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	0c f0       	brlt	.+2      	; 0x3c64 <main+0x2a6>
    3c62:	43 c0       	rjmp	.+134    	; 0x3cea <main+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c64:	fe 01       	movw	r30, r28
    3c66:	eb 55       	subi	r30, 0x5B	; 91
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	60 81       	ld	r22, Z
    3c6c:	71 81       	ldd	r23, Z+1	; 0x01
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	93 81       	ldd	r25, Z+3	; 0x03
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	40 e2       	ldi	r20, 0x20	; 32
    3c78:	51 e4       	ldi	r21, 0x41	; 65
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	8e 01       	movw	r16, r28
    3c84:	01 56       	subi	r16, 0x61	; 97
    3c86:	1f 4f       	sbci	r17, 0xFF	; 255
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	f8 01       	movw	r30, r16
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
    3c9a:	1f c0       	rjmp	.+62     	; 0x3cda <main+0x31c>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e3 56       	subi	r30, 0x63	; 99
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	88 ec       	ldi	r24, 0xC8	; 200
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	fe 01       	movw	r30, r28
    3cac:	e3 56       	subi	r30, 0x63	; 99
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	80 81       	ld	r24, Z
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	f1 f7       	brne	.-4      	; 0x3cb4 <main+0x2f6>
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e3 56       	subi	r30, 0x63	; 99
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc2:	de 01       	movw	r26, r28
    3cc4:	a1 56       	subi	r26, 0x61	; 97
    3cc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e1 56       	subi	r30, 0x61	; 97
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	80 81       	ld	r24, Z
    3cd0:	91 81       	ldd	r25, Z+1	; 0x01
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	11 96       	adiw	r26, 0x01	; 1
    3cd6:	9c 93       	st	X, r25
    3cd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e1 56       	subi	r30, 0x61	; 97
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	d1 f6       	brne	.-76     	; 0x3c9c <main+0x2de>
    3ce8:	28 c0       	rjmp	.+80     	; 0x3d3a <main+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cea:	8e 01       	movw	r16, r28
    3cec:	01 56       	subi	r16, 0x61	; 97
    3cee:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ef 55       	subi	r30, 0x5F	; 95
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	60 81       	ld	r22, Z
    3cf8:	71 81       	ldd	r23, Z+1	; 0x01
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	f8 01       	movw	r30, r16
    3d08:	91 83       	std	Z+1, r25	; 0x01
    3d0a:	80 83       	st	Z, r24
    3d0c:	de 01       	movw	r26, r28
    3d0e:	a5 56       	subi	r26, 0x65	; 101
    3d10:	bf 4f       	sbci	r27, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	e1 56       	subi	r30, 0x61	; 97
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	9c 93       	st	X, r25
    3d20:	8e 93       	st	-X, r24
    3d22:	fe 01       	movw	r30, r28
    3d24:	e5 56       	subi	r30, 0x65	; 101
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <main+0x36e>
    3d30:	fe 01       	movw	r30, r28
    3d32:	e5 56       	subi	r30, 0x65	; 101
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	91 83       	std	Z+1, r25	; 0x01
    3d38:	80 83       	st	Z, r24
					_delay_ms(1000);
					i=10000;
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e3 55       	subi	r30, 0x53	; 83
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	80 e1       	ldi	r24, 0x10	; 16
    3d42:	97 e2       	ldi	r25, 0x27	; 39
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24

					for(f=0 ; f<4 ; f++)
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ee 54       	subi	r30, 0x4E	; 78
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	10 82       	st	Z, r1
    3d50:	51 c0       	rjmp	.+162    	; 0x3df4 <main+0x436>
					{
						do
						{
							Key=HKPD_u8GetPressedKey();
    3d52:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    3d56:	fe 01       	movw	r30, r28
    3d58:	ef 54       	subi	r30, 0x4F	; 79
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 83       	st	Z, r24
						}while(Key == NOT_PRESSED);
    3d5e:	fe 01       	movw	r30, r28
    3d60:	ef 54       	subi	r30, 0x4F	; 79
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 81       	ld	r24, Z
    3d66:	8f 3f       	cpi	r24, 0xFF	; 255
    3d68:	a1 f3       	breq	.-24     	; 0x3d52 <main+0x394>
						HLCD_voidSendInt(Key);
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ef 54       	subi	r30, 0x4F	; 79
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	88 2f       	mov	r24, r24
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	a0 e0       	ldi	r26, 0x00	; 0
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
						i/=10;
    3d82:	8e 01       	movw	r16, r28
    3d84:	03 55       	subi	r16, 0x53	; 83
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 55       	subi	r30, 0x53	; 83
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	91 81       	ldd	r25, Z+1	; 0x01
    3d92:	2a e0       	ldi	r18, 0x0A	; 10
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	b9 01       	movw	r22, r18
    3d98:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	f8 01       	movw	r30, r16
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
						Pass += ( Key*i );
    3da4:	fe 01       	movw	r30, r28
    3da6:	ef 54       	subi	r30, 0x4F	; 79
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 81       	ld	r24, Z
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	fe 01       	movw	r30, r28
    3db2:	e3 55       	subi	r30, 0x53	; 83
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 81       	ld	r24, Z
    3db8:	91 81       	ldd	r25, Z+1	; 0x01
    3dba:	a9 01       	movw	r20, r18
    3dbc:	48 9f       	mul	r20, r24
    3dbe:	90 01       	movw	r18, r0
    3dc0:	49 9f       	mul	r20, r25
    3dc2:	30 0d       	add	r19, r0
    3dc4:	58 9f       	mul	r21, r24
    3dc6:	30 0d       	add	r19, r0
    3dc8:	11 24       	eor	r1, r1
    3dca:	de 01       	movw	r26, r28
    3dcc:	a7 55       	subi	r26, 0x57	; 87
    3dce:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e7 55       	subi	r30, 0x57	; 87
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	91 81       	ldd	r25, Z+1	; 0x01
    3dda:	82 0f       	add	r24, r18
    3ddc:	93 1f       	adc	r25, r19
    3dde:	8d 93       	st	X+, r24
    3de0:	9c 93       	st	X, r25
					HLCD_voidClearDisplay();
					HLCD_voidSendString("Pass : ");
					_delay_ms(1000);
					i=10000;

					for(f=0 ; f<4 ; f++)
    3de2:	de 01       	movw	r26, r28
    3de4:	ae 54       	subi	r26, 0x4E	; 78
    3de6:	bf 4f       	sbci	r27, 0xFF	; 255
    3de8:	fe 01       	movw	r30, r28
    3dea:	ee 54       	subi	r30, 0x4E	; 78
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 81       	ld	r24, Z
    3df0:	8f 5f       	subi	r24, 0xFF	; 255
    3df2:	8c 93       	st	X, r24
    3df4:	fe 01       	movw	r30, r28
    3df6:	ee 54       	subi	r30, 0x4E	; 78
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	84 30       	cpi	r24, 0x04	; 4
    3dfe:	08 f4       	brcc	.+2      	; 0x3e02 <main+0x444>
    3e00:	a8 cf       	rjmp	.-176    	; 0x3d52 <main+0x394>
						HLCD_voidSendInt(Key);
						i/=10;
						Pass += ( Key*i );

					}
					Check_Pass(Pass);
    3e02:	fe 01       	movw	r30, r28
    3e04:	e7 55       	subi	r30, 0x57	; 87
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <Check_Pass>
					if(flag_CorrectPass==1)
    3e10:	80 91 10 01 	lds	r24, 0x0110
    3e14:	81 30       	cpi	r24, 0x01	; 1
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <main+0x45c>
    3e18:	bd c0       	rjmp	.+378    	; 0x3f94 <main+0x5d6>
					{
						flag_CorrectPass=0 ;
    3e1a:	10 92 10 01 	sts	0x0110, r1
						HLCD_voidClearDisplay();
    3e1e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						HLCD_voidSendString("welcome  : ");
    3e22:	86 ea       	ldi	r24, 0xA6	; 166
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e9 56       	subi	r30, 0x69	; 105
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	aa e7       	ldi	r26, 0x7A	; 122
    3e36:	b4 e4       	ldi	r27, 0x44	; 68
    3e38:	80 83       	st	Z, r24
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	a2 83       	std	Z+2, r26	; 0x02
    3e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	8e 01       	movw	r16, r28
    3e42:	0d 56       	subi	r16, 0x6D	; 109
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
    3e46:	fe 01       	movw	r30, r28
    3e48:	e9 56       	subi	r30, 0x69	; 105
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	60 81       	ld	r22, Z
    3e4e:	71 81       	ldd	r23, Z+1	; 0x01
    3e50:	82 81       	ldd	r24, Z+2	; 0x02
    3e52:	93 81       	ldd	r25, Z+3	; 0x03
    3e54:	20 e0       	ldi	r18, 0x00	; 0
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	4a ef       	ldi	r20, 0xFA	; 250
    3e5a:	54 e4       	ldi	r21, 0x44	; 68
    3e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e60:	dc 01       	movw	r26, r24
    3e62:	cb 01       	movw	r24, r22
    3e64:	f8 01       	movw	r30, r16
    3e66:	80 83       	st	Z, r24
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	a2 83       	std	Z+2, r26	; 0x02
    3e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e6e:	fe 01       	movw	r30, r28
    3e70:	ed 56       	subi	r30, 0x6D	; 109
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e8       	ldi	r20, 0x80	; 128
    3e82:	5f e3       	ldi	r21, 0x3F	; 63
    3e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e88:	88 23       	and	r24, r24
    3e8a:	44 f4       	brge	.+16     	; 0x3e9c <main+0x4de>
		__ticks = 1;
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	ef 56       	subi	r30, 0x6F	; 111
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	80 83       	st	Z, r24
    3e9a:	64 c0       	rjmp	.+200    	; 0x3f64 <main+0x5a6>
	else if (__tmp > 65535)
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ed 56       	subi	r30, 0x6D	; 109
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	60 81       	ld	r22, Z
    3ea4:	71 81       	ldd	r23, Z+1	; 0x01
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	93 81       	ldd	r25, Z+3	; 0x03
    3eaa:	20 e0       	ldi	r18, 0x00	; 0
    3eac:	3f ef       	ldi	r19, 0xFF	; 255
    3eae:	4f e7       	ldi	r20, 0x7F	; 127
    3eb0:	57 e4       	ldi	r21, 0x47	; 71
    3eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eb6:	18 16       	cp	r1, r24
    3eb8:	0c f0       	brlt	.+2      	; 0x3ebc <main+0x4fe>
    3eba:	43 c0       	rjmp	.+134    	; 0x3f42 <main+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	e9 56       	subi	r30, 0x69	; 105
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	60 81       	ld	r22, Z
    3ec4:	71 81       	ldd	r23, Z+1	; 0x01
    3ec6:	82 81       	ldd	r24, Z+2	; 0x02
    3ec8:	93 81       	ldd	r25, Z+3	; 0x03
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	40 e2       	ldi	r20, 0x20	; 32
    3ed0:	51 e4       	ldi	r21, 0x41	; 65
    3ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	8e 01       	movw	r16, r28
    3edc:	0f 56       	subi	r16, 0x6F	; 111
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	f8 01       	movw	r30, r16
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	80 83       	st	Z, r24
    3ef2:	1f c0       	rjmp	.+62     	; 0x3f32 <main+0x574>
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e1 57       	subi	r30, 0x71	; 113
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	88 ec       	ldi	r24, 0xC8	; 200
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	fe 01       	movw	r30, r28
    3f04:	e1 57       	subi	r30, 0x71	; 113
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	80 81       	ld	r24, Z
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <main+0x54e>
    3f10:	fe 01       	movw	r30, r28
    3f12:	e1 57       	subi	r30, 0x71	; 113
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1a:	de 01       	movw	r26, r28
    3f1c:	af 56       	subi	r26, 0x6F	; 111
    3f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f20:	fe 01       	movw	r30, r28
    3f22:	ef 56       	subi	r30, 0x6F	; 111
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	11 96       	adiw	r26, 0x01	; 1
    3f2e:	9c 93       	st	X, r25
    3f30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f32:	fe 01       	movw	r30, r28
    3f34:	ef 56       	subi	r30, 0x6F	; 111
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	d1 f6       	brne	.-76     	; 0x3ef4 <main+0x536>
    3f40:	7b cd       	rjmp	.-1290   	; 0x3a38 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f42:	8e 01       	movw	r16, r28
    3f44:	0f 56       	subi	r16, 0x6F	; 111
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
    3f48:	fe 01       	movw	r30, r28
    3f4a:	ed 56       	subi	r30, 0x6D	; 109
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	f8 01       	movw	r30, r16
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	de 01       	movw	r26, r28
    3f66:	a3 57       	subi	r26, 0x73	; 115
    3f68:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	ef 56       	subi	r30, 0x6F	; 111
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	11 96       	adiw	r26, 0x01	; 1
    3f76:	9c 93       	st	X, r25
    3f78:	8e 93       	st	-X, r24
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e3 57       	subi	r30, 0x73	; 115
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <main+0x5c6>
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e3 57       	subi	r30, 0x73	; 115
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	52 cd       	rjmp	.-1372   	; 0x3a38 <main+0x7a>
						_delay_ms(1000);
					}
					else
					{
						HLCD_voidClearDisplay();
    3f94:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						for(Pass_Counter=0 ; Pass_Counter<3 ; Pass_Counter++)
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e0 55       	subi	r30, 0x50	; 80
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	10 82       	st	Z, r1
    3fa0:	ad c2       	rjmp	.+1370   	; 0x44fc <main+0xb3e>
						{
							i=10000;
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e3 55       	subi	r30, 0x53	; 83
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 e1       	ldi	r24, 0x10	; 16
    3faa:	97 e2       	ldi	r25, 0x27	; 39
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	80 83       	st	Z, r24
							Pass=0;
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e7 55       	subi	r30, 0x57	; 87
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	11 82       	std	Z+1, r1	; 0x01
    3fb8:	10 82       	st	Z, r1
							HLCD_voidSendString("Wrong Pass");
    3fba:	82 eb       	ldi	r24, 0xB2	; 178
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 57       	subi	r30, 0x77	; 119
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	aa ef       	ldi	r26, 0xFA	; 250
    3fce:	b3 e4       	ldi	r27, 0x43	; 67
    3fd0:	80 83       	st	Z, r24
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	a2 83       	std	Z+2, r26	; 0x02
    3fd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd8:	8e 01       	movw	r16, r28
    3fda:	0b 57       	subi	r16, 0x7B	; 123
    3fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e7 57       	subi	r30, 0x77	; 119
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	4a ef       	ldi	r20, 0xFA	; 250
    3ff2:	54 e4       	ldi	r21, 0x44	; 68
    3ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	f8 01       	movw	r30, r16
    3ffe:	80 83       	st	Z, r24
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	a2 83       	std	Z+2, r26	; 0x02
    4004:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4006:	fe 01       	movw	r30, r28
    4008:	eb 57       	subi	r30, 0x7B	; 123
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	60 81       	ld	r22, Z
    400e:	71 81       	ldd	r23, Z+1	; 0x01
    4010:	82 81       	ldd	r24, Z+2	; 0x02
    4012:	93 81       	ldd	r25, Z+3	; 0x03
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	5f e3       	ldi	r21, 0x3F	; 63
    401c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4020:	88 23       	and	r24, r24
    4022:	44 f4       	brge	.+16     	; 0x4034 <main+0x676>
		__ticks = 1;
    4024:	fe 01       	movw	r30, r28
    4026:	ed 57       	subi	r30, 0x7D	; 125
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
    4032:	64 c0       	rjmp	.+200    	; 0x40fc <main+0x73e>
	else if (__tmp > 65535)
    4034:	fe 01       	movw	r30, r28
    4036:	eb 57       	subi	r30, 0x7B	; 123
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	60 81       	ld	r22, Z
    403c:	71 81       	ldd	r23, Z+1	; 0x01
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	93 81       	ldd	r25, Z+3	; 0x03
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	3f ef       	ldi	r19, 0xFF	; 255
    4046:	4f e7       	ldi	r20, 0x7F	; 127
    4048:	57 e4       	ldi	r21, 0x47	; 71
    404a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404e:	18 16       	cp	r1, r24
    4050:	0c f0       	brlt	.+2      	; 0x4054 <main+0x696>
    4052:	43 c0       	rjmp	.+134    	; 0x40da <main+0x71c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4054:	fe 01       	movw	r30, r28
    4056:	e7 57       	subi	r30, 0x77	; 119
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	60 81       	ld	r22, Z
    405c:	71 81       	ldd	r23, Z+1	; 0x01
    405e:	82 81       	ldd	r24, Z+2	; 0x02
    4060:	93 81       	ldd	r25, Z+3	; 0x03
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e2       	ldi	r20, 0x20	; 32
    4068:	51 e4       	ldi	r21, 0x41	; 65
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	8e 01       	movw	r16, r28
    4074:	0d 57       	subi	r16, 0x7D	; 125
    4076:	1f 4f       	sbci	r17, 0xFF	; 255
    4078:	bc 01       	movw	r22, r24
    407a:	cd 01       	movw	r24, r26
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	f8 01       	movw	r30, r16
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	80 83       	st	Z, r24
    408a:	1f c0       	rjmp	.+62     	; 0x40ca <main+0x70c>
    408c:	fe 01       	movw	r30, r28
    408e:	ef 57       	subi	r30, 0x7F	; 127
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	88 ec       	ldi	r24, 0xC8	; 200
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	fe 01       	movw	r30, r28
    409c:	ef 57       	subi	r30, 0x7F	; 127
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	80 81       	ld	r24, Z
    40a2:	91 81       	ldd	r25, Z+1	; 0x01
    40a4:	01 97       	sbiw	r24, 0x01	; 1
    40a6:	f1 f7       	brne	.-4      	; 0x40a4 <main+0x6e6>
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 57       	subi	r30, 0x7F	; 127
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b2:	de 01       	movw	r26, r28
    40b4:	ad 57       	subi	r26, 0x7D	; 125
    40b6:	bf 4f       	sbci	r27, 0xFF	; 255
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 57       	subi	r30, 0x7D	; 125
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	11 96       	adiw	r26, 0x01	; 1
    40c6:	9c 93       	st	X, r25
    40c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ca:	fe 01       	movw	r30, r28
    40cc:	ed 57       	subi	r30, 0x7D	; 125
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	d1 f6       	brne	.-76     	; 0x408c <main+0x6ce>
    40d8:	27 c0       	rjmp	.+78     	; 0x4128 <main+0x76a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40da:	8e 01       	movw	r16, r28
    40dc:	0d 57       	subi	r16, 0x7D	; 125
    40de:	1f 4f       	sbci	r17, 0xFF	; 255
    40e0:	fe 01       	movw	r30, r28
    40e2:	eb 57       	subi	r30, 0x7B	; 123
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	60 81       	ld	r22, Z
    40e8:	71 81       	ldd	r23, Z+1	; 0x01
    40ea:	82 81       	ldd	r24, Z+2	; 0x02
    40ec:	93 81       	ldd	r25, Z+3	; 0x03
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	f8 01       	movw	r30, r16
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	80 83       	st	Z, r24
    40fc:	de 01       	movw	r26, r28
    40fe:	a1 58       	subi	r26, 0x81	; 129
    4100:	bf 4f       	sbci	r27, 0xFF	; 255
    4102:	fe 01       	movw	r30, r28
    4104:	ed 57       	subi	r30, 0x7D	; 125
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	80 81       	ld	r24, Z
    410a:	91 81       	ldd	r25, Z+1	; 0x01
    410c:	8d 93       	st	X+, r24
    410e:	9c 93       	st	X, r25
    4110:	fe 01       	movw	r30, r28
    4112:	e1 58       	subi	r30, 0x81	; 129
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <main+0x75c>
    411e:	fe 01       	movw	r30, r28
    4120:	e1 58       	subi	r30, 0x81	; 129
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	80 83       	st	Z, r24
							_delay_ms(500);
							HLCD_voidClearDisplay();
    4128:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
							HLCD_voidSendString("Pass : ");
    412c:	8e e9       	ldi	r24, 0x9E	; 158
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
							for(f=0 ; f<4 ; f++)
    4134:	fe 01       	movw	r30, r28
    4136:	ee 54       	subi	r30, 0x4E	; 78
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	10 82       	st	Z, r1
    413c:	51 c0       	rjmp	.+162    	; 0x41e0 <main+0x822>
							{
								do
								{
									Key=HKPD_u8GetPressedKey();
    413e:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    4142:	fe 01       	movw	r30, r28
    4144:	ef 54       	subi	r30, 0x4F	; 79
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	80 83       	st	Z, r24
								}while(Key == NOT_PRESSED);
    414a:	fe 01       	movw	r30, r28
    414c:	ef 54       	subi	r30, 0x4F	; 79
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	80 81       	ld	r24, Z
    4152:	8f 3f       	cpi	r24, 0xFF	; 255
    4154:	a1 f3       	breq	.-24     	; 0x413e <main+0x780>
								HLCD_voidSendInt(Key);
    4156:	fe 01       	movw	r30, r28
    4158:	ef 54       	subi	r30, 0x4F	; 79
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	80 81       	ld	r24, Z
    415e:	88 2f       	mov	r24, r24
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	a0 e0       	ldi	r26, 0x00	; 0
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
								i/=10;
    416e:	8e 01       	movw	r16, r28
    4170:	03 55       	subi	r16, 0x53	; 83
    4172:	1f 4f       	sbci	r17, 0xFF	; 255
    4174:	fe 01       	movw	r30, r28
    4176:	e3 55       	subi	r30, 0x53	; 83
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	2a e0       	ldi	r18, 0x0A	; 10
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	b9 01       	movw	r22, r18
    4184:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    4188:	cb 01       	movw	r24, r22
    418a:	f8 01       	movw	r30, r16
    418c:	91 83       	std	Z+1, r25	; 0x01
    418e:	80 83       	st	Z, r24
								Pass += ( Key*i );
    4190:	fe 01       	movw	r30, r28
    4192:	ef 54       	subi	r30, 0x4F	; 79
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	80 81       	ld	r24, Z
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	fe 01       	movw	r30, r28
    419e:	e3 55       	subi	r30, 0x53	; 83
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	91 81       	ldd	r25, Z+1	; 0x01
    41a6:	a9 01       	movw	r20, r18
    41a8:	48 9f       	mul	r20, r24
    41aa:	90 01       	movw	r18, r0
    41ac:	49 9f       	mul	r20, r25
    41ae:	30 0d       	add	r19, r0
    41b0:	58 9f       	mul	r21, r24
    41b2:	30 0d       	add	r19, r0
    41b4:	11 24       	eor	r1, r1
    41b6:	de 01       	movw	r26, r28
    41b8:	a7 55       	subi	r26, 0x57	; 87
    41ba:	bf 4f       	sbci	r27, 0xFF	; 255
    41bc:	fe 01       	movw	r30, r28
    41be:	e7 55       	subi	r30, 0x57	; 87
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	80 81       	ld	r24, Z
    41c4:	91 81       	ldd	r25, Z+1	; 0x01
    41c6:	82 0f       	add	r24, r18
    41c8:	93 1f       	adc	r25, r19
    41ca:	8d 93       	st	X+, r24
    41cc:	9c 93       	st	X, r25
							Pass=0;
							HLCD_voidSendString("Wrong Pass");
							_delay_ms(500);
							HLCD_voidClearDisplay();
							HLCD_voidSendString("Pass : ");
							for(f=0 ; f<4 ; f++)
    41ce:	de 01       	movw	r26, r28
    41d0:	ae 54       	subi	r26, 0x4E	; 78
    41d2:	bf 4f       	sbci	r27, 0xFF	; 255
    41d4:	fe 01       	movw	r30, r28
    41d6:	ee 54       	subi	r30, 0x4E	; 78
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	8f 5f       	subi	r24, 0xFF	; 255
    41de:	8c 93       	st	X, r24
    41e0:	fe 01       	movw	r30, r28
    41e2:	ee 54       	subi	r30, 0x4E	; 78
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	84 30       	cpi	r24, 0x04	; 4
    41ea:	08 f4       	brcc	.+2      	; 0x41ee <main+0x830>
    41ec:	a8 cf       	rjmp	.-176    	; 0x413e <main+0x780>
								}while(Key == NOT_PRESSED);
								HLCD_voidSendInt(Key);
								i/=10;
								Pass += ( Key*i );
							}
							Check_Pass(Pass);
    41ee:	fe 01       	movw	r30, r28
    41f0:	e7 55       	subi	r30, 0x57	; 87
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 81       	ld	r24, Z
    41f6:	91 81       	ldd	r25, Z+1	; 0x01
    41f8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <Check_Pass>
							if(flag_CorrectPass==1)
    41fc:	80 91 10 01 	lds	r24, 0x0110
    4200:	81 30       	cpi	r24, 0x01	; 1
    4202:	09 f0       	breq	.+2      	; 0x4206 <main+0x848>
    4204:	bd c0       	rjmp	.+378    	; 0x4380 <main+0x9c2>
							{
								flag_CorrectPass=0 ;
    4206:	10 92 10 01 	sts	0x0110, r1
								HLCD_voidClearDisplay();
    420a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
								HLCD_voidSendString("welcome  : ");
    420e:	86 ea       	ldi	r24, 0xA6	; 166
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    4216:	fe 01       	movw	r30, r28
    4218:	e5 58       	subi	r30, 0x85	; 133
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	aa e7       	ldi	r26, 0x7A	; 122
    4222:	b4 e4       	ldi	r27, 0x44	; 68
    4224:	80 83       	st	Z, r24
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	a2 83       	std	Z+2, r26	; 0x02
    422a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422c:	8e 01       	movw	r16, r28
    422e:	09 58       	subi	r16, 0x89	; 137
    4230:	1f 4f       	sbci	r17, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	e5 58       	subi	r30, 0x85	; 133
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	60 81       	ld	r22, Z
    423a:	71 81       	ldd	r23, Z+1	; 0x01
    423c:	82 81       	ldd	r24, Z+2	; 0x02
    423e:	93 81       	ldd	r25, Z+3	; 0x03
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	4a ef       	ldi	r20, 0xFA	; 250
    4246:	54 e4       	ldi	r21, 0x44	; 68
    4248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	f8 01       	movw	r30, r16
    4252:	80 83       	st	Z, r24
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	a2 83       	std	Z+2, r26	; 0x02
    4258:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    425a:	fe 01       	movw	r30, r28
    425c:	e9 58       	subi	r30, 0x89	; 137
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	60 81       	ld	r22, Z
    4262:	71 81       	ldd	r23, Z+1	; 0x01
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	93 81       	ldd	r25, Z+3	; 0x03
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	40 e8       	ldi	r20, 0x80	; 128
    426e:	5f e3       	ldi	r21, 0x3F	; 63
    4270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4274:	88 23       	and	r24, r24
    4276:	44 f4       	brge	.+16     	; 0x4288 <main+0x8ca>
		__ticks = 1;
    4278:	fe 01       	movw	r30, r28
    427a:	eb 58       	subi	r30, 0x8B	; 139
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
    4286:	64 c0       	rjmp	.+200    	; 0x4350 <main+0x992>
	else if (__tmp > 65535)
    4288:	fe 01       	movw	r30, r28
    428a:	e9 58       	subi	r30, 0x89	; 137
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	4f e7       	ldi	r20, 0x7F	; 127
    429c:	57 e4       	ldi	r21, 0x47	; 71
    429e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a2:	18 16       	cp	r1, r24
    42a4:	0c f0       	brlt	.+2      	; 0x42a8 <main+0x8ea>
    42a6:	43 c0       	rjmp	.+134    	; 0x432e <main+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a8:	fe 01       	movw	r30, r28
    42aa:	e5 58       	subi	r30, 0x85	; 133
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e2       	ldi	r20, 0x20	; 32
    42bc:	51 e4       	ldi	r21, 0x41	; 65
    42be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	8e 01       	movw	r16, r28
    42c8:	0b 58       	subi	r16, 0x8B	; 139
    42ca:	1f 4f       	sbci	r17, 0xFF	; 255
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	f8 01       	movw	r30, r16
    42da:	91 83       	std	Z+1, r25	; 0x01
    42dc:	80 83       	st	Z, r24
    42de:	1f c0       	rjmp	.+62     	; 0x431e <main+0x960>
    42e0:	fe 01       	movw	r30, r28
    42e2:	ed 58       	subi	r30, 0x8D	; 141
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	88 ec       	ldi	r24, 0xC8	; 200
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
    42ee:	fe 01       	movw	r30, r28
    42f0:	ed 58       	subi	r30, 0x8D	; 141
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	80 81       	ld	r24, Z
    42f6:	91 81       	ldd	r25, Z+1	; 0x01
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	f1 f7       	brne	.-4      	; 0x42f8 <main+0x93a>
    42fc:	fe 01       	movw	r30, r28
    42fe:	ed 58       	subi	r30, 0x8D	; 141
    4300:	ff 4f       	sbci	r31, 0xFF	; 255
    4302:	91 83       	std	Z+1, r25	; 0x01
    4304:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4306:	de 01       	movw	r26, r28
    4308:	ab 58       	subi	r26, 0x8B	; 139
    430a:	bf 4f       	sbci	r27, 0xFF	; 255
    430c:	fe 01       	movw	r30, r28
    430e:	eb 58       	subi	r30, 0x8B	; 139
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	80 81       	ld	r24, Z
    4314:	91 81       	ldd	r25, Z+1	; 0x01
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	9c 93       	st	X, r25
    431c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    431e:	fe 01       	movw	r30, r28
    4320:	eb 58       	subi	r30, 0x8B	; 139
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	00 97       	sbiw	r24, 0x00	; 0
    432a:	d1 f6       	brne	.-76     	; 0x42e0 <main+0x922>
    432c:	85 cb       	rjmp	.-2294   	; 0x3a38 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    432e:	8e 01       	movw	r16, r28
    4330:	0b 58       	subi	r16, 0x8B	; 139
    4332:	1f 4f       	sbci	r17, 0xFF	; 255
    4334:	fe 01       	movw	r30, r28
    4336:	e9 58       	subi	r30, 0x89	; 137
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	60 81       	ld	r22, Z
    433c:	71 81       	ldd	r23, Z+1	; 0x01
    433e:	82 81       	ldd	r24, Z+2	; 0x02
    4340:	93 81       	ldd	r25, Z+3	; 0x03
    4342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	f8 01       	movw	r30, r16
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
    4350:	de 01       	movw	r26, r28
    4352:	af 58       	subi	r26, 0x8F	; 143
    4354:	bf 4f       	sbci	r27, 0xFF	; 255
    4356:	fe 01       	movw	r30, r28
    4358:	eb 58       	subi	r30, 0x8B	; 139
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	11 96       	adiw	r26, 0x01	; 1
    4362:	9c 93       	st	X, r25
    4364:	8e 93       	st	-X, r24
    4366:	fe 01       	movw	r30, r28
    4368:	ef 58       	subi	r30, 0x8F	; 143
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	91 81       	ldd	r25, Z+1	; 0x01
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	f1 f7       	brne	.-4      	; 0x4370 <main+0x9b2>
    4374:	fe 01       	movw	r30, r28
    4376:	ef 58       	subi	r30, 0x8F	; 143
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	91 83       	std	Z+1, r25	; 0x01
    437c:	80 83       	st	Z, r24
    437e:	5c cb       	rjmp	.-2376   	; 0x3a38 <main+0x7a>
								_delay_ms(1000);
								break;
    4380:	fe 01       	movw	r30, r28
    4382:	e3 59       	subi	r30, 0x93	; 147
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	aa ef       	ldi	r26, 0xFA	; 250
    438c:	b3 e4       	ldi	r27, 0x43	; 67
    438e:	80 83       	st	Z, r24
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	a2 83       	std	Z+2, r26	; 0x02
    4394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4396:	8e 01       	movw	r16, r28
    4398:	07 59       	subi	r16, 0x97	; 151
    439a:	1f 4f       	sbci	r17, 0xFF	; 255
    439c:	fe 01       	movw	r30, r28
    439e:	e3 59       	subi	r30, 0x93	; 147
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a ef       	ldi	r20, 0xFA	; 250
    43b0:	54 e4       	ldi	r21, 0x44	; 68
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	f8 01       	movw	r30, r16
    43bc:	80 83       	st	Z, r24
    43be:	91 83       	std	Z+1, r25	; 0x01
    43c0:	a2 83       	std	Z+2, r26	; 0x02
    43c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43c4:	fe 01       	movw	r30, r28
    43c6:	e7 59       	subi	r30, 0x97	; 151
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	44 f4       	brge	.+16     	; 0x43f2 <main+0xa34>
		__ticks = 1;
    43e2:	fe 01       	movw	r30, r28
    43e4:	e9 59       	subi	r30, 0x99	; 153
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	91 83       	std	Z+1, r25	; 0x01
    43ee:	80 83       	st	Z, r24
    43f0:	64 c0       	rjmp	.+200    	; 0x44ba <main+0xafc>
	else if (__tmp > 65535)
    43f2:	fe 01       	movw	r30, r28
    43f4:	e7 59       	subi	r30, 0x97	; 151
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	60 81       	ld	r22, Z
    43fa:	71 81       	ldd	r23, Z+1	; 0x01
    43fc:	82 81       	ldd	r24, Z+2	; 0x02
    43fe:	93 81       	ldd	r25, Z+3	; 0x03
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	3f ef       	ldi	r19, 0xFF	; 255
    4404:	4f e7       	ldi	r20, 0x7F	; 127
    4406:	57 e4       	ldi	r21, 0x47	; 71
    4408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    440c:	18 16       	cp	r1, r24
    440e:	0c f0       	brlt	.+2      	; 0x4412 <main+0xa54>
    4410:	43 c0       	rjmp	.+134    	; 0x4498 <main+0xada>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4412:	fe 01       	movw	r30, r28
    4414:	e3 59       	subi	r30, 0x93	; 147
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	60 81       	ld	r22, Z
    441a:	71 81       	ldd	r23, Z+1	; 0x01
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e2       	ldi	r20, 0x20	; 32
    4426:	51 e4       	ldi	r21, 0x41	; 65
    4428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	8e 01       	movw	r16, r28
    4432:	09 59       	subi	r16, 0x99	; 153
    4434:	1f 4f       	sbci	r17, 0xFF	; 255
    4436:	bc 01       	movw	r22, r24
    4438:	cd 01       	movw	r24, r26
    443a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	f8 01       	movw	r30, r16
    4444:	91 83       	std	Z+1, r25	; 0x01
    4446:	80 83       	st	Z, r24
    4448:	1f c0       	rjmp	.+62     	; 0x4488 <main+0xaca>
    444a:	fe 01       	movw	r30, r28
    444c:	eb 59       	subi	r30, 0x9B	; 155
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	88 ec       	ldi	r24, 0xC8	; 200
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	80 83       	st	Z, r24
    4458:	fe 01       	movw	r30, r28
    445a:	eb 59       	subi	r30, 0x9B	; 155
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	80 81       	ld	r24, Z
    4460:	91 81       	ldd	r25, Z+1	; 0x01
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	f1 f7       	brne	.-4      	; 0x4462 <main+0xaa4>
    4466:	fe 01       	movw	r30, r28
    4468:	eb 59       	subi	r30, 0x9B	; 155
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4470:	de 01       	movw	r26, r28
    4472:	a9 59       	subi	r26, 0x99	; 153
    4474:	bf 4f       	sbci	r27, 0xFF	; 255
    4476:	fe 01       	movw	r30, r28
    4478:	e9 59       	subi	r30, 0x99	; 153
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	80 81       	ld	r24, Z
    447e:	91 81       	ldd	r25, Z+1	; 0x01
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	11 96       	adiw	r26, 0x01	; 1
    4484:	9c 93       	st	X, r25
    4486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4488:	fe 01       	movw	r30, r28
    448a:	e9 59       	subi	r30, 0x99	; 153
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	d1 f6       	brne	.-76     	; 0x444a <main+0xa8c>
    4496:	27 c0       	rjmp	.+78     	; 0x44e6 <main+0xb28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4498:	8e 01       	movw	r16, r28
    449a:	09 59       	subi	r16, 0x99	; 153
    449c:	1f 4f       	sbci	r17, 0xFF	; 255
    449e:	fe 01       	movw	r30, r28
    44a0:	e7 59       	subi	r30, 0x97	; 151
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	f8 01       	movw	r30, r16
    44b6:	91 83       	std	Z+1, r25	; 0x01
    44b8:	80 83       	st	Z, r24
    44ba:	de 01       	movw	r26, r28
    44bc:	ad 59       	subi	r26, 0x9D	; 157
    44be:	bf 4f       	sbci	r27, 0xFF	; 255
    44c0:	fe 01       	movw	r30, r28
    44c2:	e9 59       	subi	r30, 0x99	; 153
    44c4:	ff 4f       	sbci	r31, 0xFF	; 255
    44c6:	80 81       	ld	r24, Z
    44c8:	91 81       	ldd	r25, Z+1	; 0x01
    44ca:	8d 93       	st	X+, r24
    44cc:	9c 93       	st	X, r25
    44ce:	fe 01       	movw	r30, r28
    44d0:	ed 59       	subi	r30, 0x9D	; 157
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	80 81       	ld	r24, Z
    44d6:	91 81       	ldd	r25, Z+1	; 0x01
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	f1 f7       	brne	.-4      	; 0x44d8 <main+0xb1a>
    44dc:	fe 01       	movw	r30, r28
    44de:	ed 59       	subi	r30, 0x9D	; 157
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	80 83       	st	Z, r24

							}
							_delay_ms(500);
							HLCD_voidClearDisplay();
    44e6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						_delay_ms(1000);
					}
					else
					{
						HLCD_voidClearDisplay();
						for(Pass_Counter=0 ; Pass_Counter<3 ; Pass_Counter++)
    44ea:	de 01       	movw	r26, r28
    44ec:	a0 55       	subi	r26, 0x50	; 80
    44ee:	bf 4f       	sbci	r27, 0xFF	; 255
    44f0:	fe 01       	movw	r30, r28
    44f2:	e0 55       	subi	r30, 0x50	; 80
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	80 81       	ld	r24, Z
    44f8:	8f 5f       	subi	r24, 0xFF	; 255
    44fa:	8c 93       	st	X, r24
    44fc:	fe 01       	movw	r30, r28
    44fe:	e0 55       	subi	r30, 0x50	; 80
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	83 30       	cpi	r24, 0x03	; 3
    4506:	08 f4       	brcc	.+2      	; 0x450a <main+0xb4c>
    4508:	4c cd       	rjmp	.-1384   	; 0x3fa2 <main+0x5e4>
    450a:	96 ca       	rjmp	.-2772   	; 0x3a38 <main+0x7a>
						}
					}
				}
				else
				{
					HLCD_voidClearDisplay();
    450c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Wrong Id");
    4510:	8d eb       	ldi	r24, 0xBD	; 189
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    4518:	fe 01       	movw	r30, r28
    451a:	e1 5a       	subi	r30, 0xA1	; 161
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	aa ef       	ldi	r26, 0xFA	; 250
    4524:	b3 e4       	ldi	r27, 0x43	; 67
    4526:	80 83       	st	Z, r24
    4528:	91 83       	std	Z+1, r25	; 0x01
    452a:	a2 83       	std	Z+2, r26	; 0x02
    452c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452e:	8e 01       	movw	r16, r28
    4530:	05 5a       	subi	r16, 0xA5	; 165
    4532:	1f 4f       	sbci	r17, 0xFF	; 255
    4534:	fe 01       	movw	r30, r28
    4536:	e1 5a       	subi	r30, 0xA1	; 161
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	4a ef       	ldi	r20, 0xFA	; 250
    4548:	54 e4       	ldi	r21, 0x44	; 68
    454a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	f8 01       	movw	r30, r16
    4554:	80 83       	st	Z, r24
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	a2 83       	std	Z+2, r26	; 0x02
    455a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    455c:	fe 01       	movw	r30, r28
    455e:	e5 5a       	subi	r30, 0xA5	; 165
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	60 81       	ld	r22, Z
    4564:	71 81       	ldd	r23, Z+1	; 0x01
    4566:	82 81       	ldd	r24, Z+2	; 0x02
    4568:	93 81       	ldd	r25, Z+3	; 0x03
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e8       	ldi	r20, 0x80	; 128
    4570:	5f e3       	ldi	r21, 0x3F	; 63
    4572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4576:	88 23       	and	r24, r24
    4578:	44 f4       	brge	.+16     	; 0x458a <main+0xbcc>
		__ticks = 1;
    457a:	fe 01       	movw	r30, r28
    457c:	e7 5a       	subi	r30, 0xA7	; 167
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	91 83       	std	Z+1, r25	; 0x01
    4586:	80 83       	st	Z, r24
    4588:	64 c0       	rjmp	.+200    	; 0x4652 <main+0xc94>
	else if (__tmp > 65535)
    458a:	fe 01       	movw	r30, r28
    458c:	e5 5a       	subi	r30, 0xA5	; 165
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	3f ef       	ldi	r19, 0xFF	; 255
    459c:	4f e7       	ldi	r20, 0x7F	; 127
    459e:	57 e4       	ldi	r21, 0x47	; 71
    45a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a4:	18 16       	cp	r1, r24
    45a6:	0c f0       	brlt	.+2      	; 0x45aa <main+0xbec>
    45a8:	43 c0       	rjmp	.+134    	; 0x4630 <main+0xc72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45aa:	fe 01       	movw	r30, r28
    45ac:	e1 5a       	subi	r30, 0xA1	; 161
    45ae:	ff 4f       	sbci	r31, 0xFF	; 255
    45b0:	60 81       	ld	r22, Z
    45b2:	71 81       	ldd	r23, Z+1	; 0x01
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	93 81       	ldd	r25, Z+3	; 0x03
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	40 e2       	ldi	r20, 0x20	; 32
    45be:	51 e4       	ldi	r21, 0x41	; 65
    45c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	8e 01       	movw	r16, r28
    45ca:	07 5a       	subi	r16, 0xA7	; 167
    45cc:	1f 4f       	sbci	r17, 0xFF	; 255
    45ce:	bc 01       	movw	r22, r24
    45d0:	cd 01       	movw	r24, r26
    45d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	f8 01       	movw	r30, r16
    45dc:	91 83       	std	Z+1, r25	; 0x01
    45de:	80 83       	st	Z, r24
    45e0:	1f c0       	rjmp	.+62     	; 0x4620 <main+0xc62>
    45e2:	fe 01       	movw	r30, r28
    45e4:	e9 5a       	subi	r30, 0xA9	; 169
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	88 ec       	ldi	r24, 0xC8	; 200
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
    45f0:	fe 01       	movw	r30, r28
    45f2:	e9 5a       	subi	r30, 0xA9	; 169
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	80 81       	ld	r24, Z
    45f8:	91 81       	ldd	r25, Z+1	; 0x01
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <main+0xc3c>
    45fe:	fe 01       	movw	r30, r28
    4600:	e9 5a       	subi	r30, 0xA9	; 169
    4602:	ff 4f       	sbci	r31, 0xFF	; 255
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4608:	de 01       	movw	r26, r28
    460a:	a7 5a       	subi	r26, 0xA7	; 167
    460c:	bf 4f       	sbci	r27, 0xFF	; 255
    460e:	fe 01       	movw	r30, r28
    4610:	e7 5a       	subi	r30, 0xA7	; 167
    4612:	ff 4f       	sbci	r31, 0xFF	; 255
    4614:	80 81       	ld	r24, Z
    4616:	91 81       	ldd	r25, Z+1	; 0x01
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	11 96       	adiw	r26, 0x01	; 1
    461c:	9c 93       	st	X, r25
    461e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4620:	fe 01       	movw	r30, r28
    4622:	e7 5a       	subi	r30, 0xA7	; 167
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 81       	ld	r24, Z
    4628:	91 81       	ldd	r25, Z+1	; 0x01
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	d1 f6       	brne	.-76     	; 0x45e2 <main+0xc24>
    462e:	04 ca       	rjmp	.-3064   	; 0x3a38 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4630:	8e 01       	movw	r16, r28
    4632:	07 5a       	subi	r16, 0xA7	; 167
    4634:	1f 4f       	sbci	r17, 0xFF	; 255
    4636:	fe 01       	movw	r30, r28
    4638:	e5 5a       	subi	r30, 0xA5	; 165
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	60 81       	ld	r22, Z
    463e:	71 81       	ldd	r23, Z+1	; 0x01
    4640:	82 81       	ldd	r24, Z+2	; 0x02
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	f8 01       	movw	r30, r16
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	80 83       	st	Z, r24
    4652:	de 01       	movw	r26, r28
    4654:	ab 5a       	subi	r26, 0xAB	; 171
    4656:	bf 4f       	sbci	r27, 0xFF	; 255
    4658:	fe 01       	movw	r30, r28
    465a:	e7 5a       	subi	r30, 0xA7	; 167
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	80 81       	ld	r24, Z
    4660:	91 81       	ldd	r25, Z+1	; 0x01
    4662:	11 96       	adiw	r26, 0x01	; 1
    4664:	9c 93       	st	X, r25
    4666:	8e 93       	st	-X, r24
    4668:	fe 01       	movw	r30, r28
    466a:	eb 5a       	subi	r30, 0xAB	; 171
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	80 81       	ld	r24, Z
    4670:	91 81       	ldd	r25, Z+1	; 0x01
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	f1 f7       	brne	.-4      	; 0x4672 <main+0xcb4>
    4676:	fe 01       	movw	r30, r28
    4678:	eb 5a       	subi	r30, 0xAB	; 171
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	db c9       	rjmp	.-3146   	; 0x3a38 <main+0x7a>
					_delay_ms(500);
				}


			}
			else if(Key==2)
    4682:	fe 01       	movw	r30, r28
    4684:	ef 54       	subi	r30, 0x4F	; 79
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	80 81       	ld	r24, Z
    468a:	82 30       	cpi	r24, 0x02	; 2
    468c:	09 f0       	breq	.+2      	; 0x4690 <main+0xcd2>
    468e:	31 c4       	rjmp	.+2146   	; 0x4ef2 <main+0x1534>
			{
				MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
				HLCD_voidClearDisplay();
    469a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Enter ID :");
    46a6:	83 e9       	ldi	r24, 0x93	; 147
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
				i=10000;
    46ae:	fe 01       	movw	r30, r28
    46b0:	e3 55       	subi	r30, 0x53	; 83
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	80 e1       	ldi	r24, 0x10	; 16
    46b6:	97 e2       	ldi	r25, 0x27	; 39
    46b8:	91 83       	std	Z+1, r25	; 0x01
    46ba:	80 83       	st	Z, r24
				ID=0;
    46bc:	fe 01       	movw	r30, r28
    46be:	e5 55       	subi	r30, 0x55	; 85
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	11 82       	std	Z+1, r1	; 0x01
    46c4:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    46c6:	fe 01       	movw	r30, r28
    46c8:	ee 54       	subi	r30, 0x4E	; 78
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	10 82       	st	Z, r1
    46ce:	51 c0       	rjmp	.+162    	; 0x4772 <main+0xdb4>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    46d0:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    46d4:	fe 01       	movw	r30, r28
    46d6:	ef 54       	subi	r30, 0x4F	; 79
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    46dc:	fe 01       	movw	r30, r28
    46de:	ef 54       	subi	r30, 0x4F	; 79
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	80 81       	ld	r24, Z
    46e4:	8f 3f       	cpi	r24, 0xFF	; 255
    46e6:	a1 f3       	breq	.-24     	; 0x46d0 <main+0xd12>
					HLCD_voidSendInt(Key);
    46e8:	fe 01       	movw	r30, r28
    46ea:	ef 54       	subi	r30, 0x4F	; 79
    46ec:	ff 4f       	sbci	r31, 0xFF	; 255
    46ee:	80 81       	ld	r24, Z
    46f0:	88 2f       	mov	r24, r24
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	a0 e0       	ldi	r26, 0x00	; 0
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	bc 01       	movw	r22, r24
    46fa:	cd 01       	movw	r24, r26
    46fc:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
					i/=10;
    4700:	8e 01       	movw	r16, r28
    4702:	03 55       	subi	r16, 0x53	; 83
    4704:	1f 4f       	sbci	r17, 0xFF	; 255
    4706:	fe 01       	movw	r30, r28
    4708:	e3 55       	subi	r30, 0x53	; 83
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	2a e0       	ldi	r18, 0x0A	; 10
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	b9 01       	movw	r22, r18
    4716:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    471a:	cb 01       	movw	r24, r22
    471c:	f8 01       	movw	r30, r16
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	80 83       	st	Z, r24
					ID += ( Key*i );
    4722:	fe 01       	movw	r30, r28
    4724:	ef 54       	subi	r30, 0x4F	; 79
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	80 81       	ld	r24, Z
    472a:	28 2f       	mov	r18, r24
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	fe 01       	movw	r30, r28
    4730:	e3 55       	subi	r30, 0x53	; 83
    4732:	ff 4f       	sbci	r31, 0xFF	; 255
    4734:	80 81       	ld	r24, Z
    4736:	91 81       	ldd	r25, Z+1	; 0x01
    4738:	a9 01       	movw	r20, r18
    473a:	48 9f       	mul	r20, r24
    473c:	90 01       	movw	r18, r0
    473e:	49 9f       	mul	r20, r25
    4740:	30 0d       	add	r19, r0
    4742:	58 9f       	mul	r21, r24
    4744:	30 0d       	add	r19, r0
    4746:	11 24       	eor	r1, r1
    4748:	de 01       	movw	r26, r28
    474a:	a5 55       	subi	r26, 0x55	; 85
    474c:	bf 4f       	sbci	r27, 0xFF	; 255
    474e:	fe 01       	movw	r30, r28
    4750:	e5 55       	subi	r30, 0x55	; 85
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	82 0f       	add	r24, r18
    475a:	93 1f       	adc	r25, r19
    475c:	8d 93       	st	X+, r24
    475e:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Enter ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    4760:	de 01       	movw	r26, r28
    4762:	ae 54       	subi	r26, 0x4E	; 78
    4764:	bf 4f       	sbci	r27, 0xFF	; 255
    4766:	fe 01       	movw	r30, r28
    4768:	ee 54       	subi	r30, 0x4E	; 78
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	80 81       	ld	r24, Z
    476e:	8f 5f       	subi	r24, 0xFF	; 255
    4770:	8c 93       	st	X, r24
    4772:	fe 01       	movw	r30, r28
    4774:	ee 54       	subi	r30, 0x4E	; 78
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	84 30       	cpi	r24, 0x04	; 4
    477c:	08 f4       	brcc	.+2      	; 0x4780 <main+0xdc2>
    477e:	a8 cf       	rjmp	.-176    	; 0x46d0 <main+0xd12>
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );

				}
				Check_ID(ID);
    4780:	fe 01       	movw	r30, r28
    4782:	e5 55       	subi	r30, 0x55	; 85
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	0e 94 c1 2b 	call	0x5782	; 0x5782 <Check_ID>
				if(flag_User != 0)
    478e:	80 91 0e 01 	lds	r24, 0x010E
    4792:	88 23       	and	r24, r24
    4794:	09 f4       	brne	.+2      	; 0x4798 <main+0xdda>
    4796:	50 c9       	rjmp	.-3424   	; 0x3a38 <main+0x7a>
				{
					HLCD_voidClearDisplay();
    4798:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Old Pass : ");
    479c:	86 ec       	ldi	r24, 0xC6	; 198
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
					i=10000;
    47a4:	fe 01       	movw	r30, r28
    47a6:	e3 55       	subi	r30, 0x53	; 83
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	80 e1       	ldi	r24, 0x10	; 16
    47ac:	97 e2       	ldi	r25, 0x27	; 39
    47ae:	91 83       	std	Z+1, r25	; 0x01
    47b0:	80 83       	st	Z, r24
					for(f=0 ; f<4 ; f++)
    47b2:	fe 01       	movw	r30, r28
    47b4:	ee 54       	subi	r30, 0x4E	; 78
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	10 82       	st	Z, r1
    47ba:	51 c0       	rjmp	.+162    	; 0x485e <main+0xea0>
					{
						do
						{
							Key=HKPD_u8GetPressedKey();
    47bc:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    47c0:	fe 01       	movw	r30, r28
    47c2:	ef 54       	subi	r30, 0x4F	; 79
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 83       	st	Z, r24
						}while(Key == NOT_PRESSED);
    47c8:	fe 01       	movw	r30, r28
    47ca:	ef 54       	subi	r30, 0x4F	; 79
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	80 81       	ld	r24, Z
    47d0:	8f 3f       	cpi	r24, 0xFF	; 255
    47d2:	a1 f3       	breq	.-24     	; 0x47bc <main+0xdfe>
						HLCD_voidSendInt(Key);
    47d4:	fe 01       	movw	r30, r28
    47d6:	ef 54       	subi	r30, 0x4F	; 79
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 81       	ld	r24, Z
    47dc:	88 2f       	mov	r24, r24
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	a0 e0       	ldi	r26, 0x00	; 0
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	bc 01       	movw	r22, r24
    47e6:	cd 01       	movw	r24, r26
    47e8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
						i/=10;
    47ec:	8e 01       	movw	r16, r28
    47ee:	03 55       	subi	r16, 0x53	; 83
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e3 55       	subi	r30, 0x53	; 83
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	80 81       	ld	r24, Z
    47fa:	91 81       	ldd	r25, Z+1	; 0x01
    47fc:	2a e0       	ldi	r18, 0x0A	; 10
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	b9 01       	movw	r22, r18
    4802:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    4806:	cb 01       	movw	r24, r22
    4808:	f8 01       	movw	r30, r16
    480a:	91 83       	std	Z+1, r25	; 0x01
    480c:	80 83       	st	Z, r24
						Pass += ( Key*i );
    480e:	fe 01       	movw	r30, r28
    4810:	ef 54       	subi	r30, 0x4F	; 79
    4812:	ff 4f       	sbci	r31, 0xFF	; 255
    4814:	80 81       	ld	r24, Z
    4816:	28 2f       	mov	r18, r24
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	fe 01       	movw	r30, r28
    481c:	e3 55       	subi	r30, 0x53	; 83
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	80 81       	ld	r24, Z
    4822:	91 81       	ldd	r25, Z+1	; 0x01
    4824:	a9 01       	movw	r20, r18
    4826:	48 9f       	mul	r20, r24
    4828:	90 01       	movw	r18, r0
    482a:	49 9f       	mul	r20, r25
    482c:	30 0d       	add	r19, r0
    482e:	58 9f       	mul	r21, r24
    4830:	30 0d       	add	r19, r0
    4832:	11 24       	eor	r1, r1
    4834:	de 01       	movw	r26, r28
    4836:	a7 55       	subi	r26, 0x57	; 87
    4838:	bf 4f       	sbci	r27, 0xFF	; 255
    483a:	fe 01       	movw	r30, r28
    483c:	e7 55       	subi	r30, 0x57	; 87
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 81       	ld	r24, Z
    4842:	91 81       	ldd	r25, Z+1	; 0x01
    4844:	82 0f       	add	r24, r18
    4846:	93 1f       	adc	r25, r19
    4848:	8d 93       	st	X+, r24
    484a:	9c 93       	st	X, r25
				if(flag_User != 0)
				{
					HLCD_voidClearDisplay();
					HLCD_voidSendString("Old Pass : ");
					i=10000;
					for(f=0 ; f<4 ; f++)
    484c:	de 01       	movw	r26, r28
    484e:	ae 54       	subi	r26, 0x4E	; 78
    4850:	bf 4f       	sbci	r27, 0xFF	; 255
    4852:	fe 01       	movw	r30, r28
    4854:	ee 54       	subi	r30, 0x4E	; 78
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	80 81       	ld	r24, Z
    485a:	8f 5f       	subi	r24, 0xFF	; 255
    485c:	8c 93       	st	X, r24
    485e:	fe 01       	movw	r30, r28
    4860:	ee 54       	subi	r30, 0x4E	; 78
    4862:	ff 4f       	sbci	r31, 0xFF	; 255
    4864:	80 81       	ld	r24, Z
    4866:	84 30       	cpi	r24, 0x04	; 4
    4868:	08 f4       	brcc	.+2      	; 0x486c <main+0xeae>
    486a:	a8 cf       	rjmp	.-176    	; 0x47bc <main+0xdfe>
						}while(Key == NOT_PRESSED);
						HLCD_voidSendInt(Key);
						i/=10;
						Pass += ( Key*i );
					}
					Check_Pass(Pass);
    486c:	fe 01       	movw	r30, r28
    486e:	e7 55       	subi	r30, 0x57	; 87
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	80 81       	ld	r24, Z
    4874:	91 81       	ldd	r25, Z+1	; 0x01
    4876:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <Check_Pass>
					if(flag_CorrectPass == 0)
    487a:	80 91 10 01 	lds	r24, 0x0110
    487e:	88 23       	and	r24, r24
    4880:	09 f0       	breq	.+2      	; 0x4884 <main+0xec6>
    4882:	29 c1       	rjmp	.+594    	; 0x4ad6 <main+0x1118>
					{
						flag_CorrectPass=0 ;
    4884:	10 92 10 01 	sts	0x0110, r1
						HLCD_voidClearDisplay();
    4888:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						HLCD_voidSendString("New Pass : ");
    488c:	82 ed       	ldi	r24, 0xD2	; 210
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    4894:	fe 01       	movw	r30, r28
    4896:	ef 5a       	subi	r30, 0xAF	; 175
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	aa e7       	ldi	r26, 0x7A	; 122
    48a0:	b4 e4       	ldi	r27, 0x44	; 68
    48a2:	80 83       	st	Z, r24
    48a4:	91 83       	std	Z+1, r25	; 0x01
    48a6:	a2 83       	std	Z+2, r26	; 0x02
    48a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48aa:	8e 01       	movw	r16, r28
    48ac:	03 5b       	subi	r16, 0xB3	; 179
    48ae:	1f 4f       	sbci	r17, 0xFF	; 255
    48b0:	fe 01       	movw	r30, r28
    48b2:	ef 5a       	subi	r30, 0xAF	; 175
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	60 81       	ld	r22, Z
    48b8:	71 81       	ldd	r23, Z+1	; 0x01
    48ba:	82 81       	ldd	r24, Z+2	; 0x02
    48bc:	93 81       	ldd	r25, Z+3	; 0x03
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	4a ef       	ldi	r20, 0xFA	; 250
    48c4:	54 e4       	ldi	r21, 0x44	; 68
    48c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	f8 01       	movw	r30, r16
    48d0:	80 83       	st	Z, r24
    48d2:	91 83       	std	Z+1, r25	; 0x01
    48d4:	a2 83       	std	Z+2, r26	; 0x02
    48d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48d8:	fe 01       	movw	r30, r28
    48da:	e3 5b       	subi	r30, 0xB3	; 179
    48dc:	ff 4f       	sbci	r31, 0xFF	; 255
    48de:	60 81       	ld	r22, Z
    48e0:	71 81       	ldd	r23, Z+1	; 0x01
    48e2:	82 81       	ldd	r24, Z+2	; 0x02
    48e4:	93 81       	ldd	r25, Z+3	; 0x03
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	40 e8       	ldi	r20, 0x80	; 128
    48ec:	5f e3       	ldi	r21, 0x3F	; 63
    48ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f2:	88 23       	and	r24, r24
    48f4:	44 f4       	brge	.+16     	; 0x4906 <main+0xf48>
		__ticks = 1;
    48f6:	fe 01       	movw	r30, r28
    48f8:	e5 5b       	subi	r30, 0xB5	; 181
    48fa:	ff 4f       	sbci	r31, 0xFF	; 255
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	80 83       	st	Z, r24
    4904:	64 c0       	rjmp	.+200    	; 0x49ce <main+0x1010>
	else if (__tmp > 65535)
    4906:	fe 01       	movw	r30, r28
    4908:	e3 5b       	subi	r30, 0xB3	; 179
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	3f ef       	ldi	r19, 0xFF	; 255
    4918:	4f e7       	ldi	r20, 0x7F	; 127
    491a:	57 e4       	ldi	r21, 0x47	; 71
    491c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4920:	18 16       	cp	r1, r24
    4922:	0c f0       	brlt	.+2      	; 0x4926 <main+0xf68>
    4924:	43 c0       	rjmp	.+134    	; 0x49ac <main+0xfee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4926:	fe 01       	movw	r30, r28
    4928:	ef 5a       	subi	r30, 0xAF	; 175
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	60 81       	ld	r22, Z
    492e:	71 81       	ldd	r23, Z+1	; 0x01
    4930:	82 81       	ldd	r24, Z+2	; 0x02
    4932:	93 81       	ldd	r25, Z+3	; 0x03
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	40 e2       	ldi	r20, 0x20	; 32
    493a:	51 e4       	ldi	r21, 0x41	; 65
    493c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	8e 01       	movw	r16, r28
    4946:	05 5b       	subi	r16, 0xB5	; 181
    4948:	1f 4f       	sbci	r17, 0xFF	; 255
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	f8 01       	movw	r30, r16
    4958:	91 83       	std	Z+1, r25	; 0x01
    495a:	80 83       	st	Z, r24
    495c:	1f c0       	rjmp	.+62     	; 0x499c <main+0xfde>
    495e:	fe 01       	movw	r30, r28
    4960:	e7 5b       	subi	r30, 0xB7	; 183
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	88 ec       	ldi	r24, 0xC8	; 200
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	91 83       	std	Z+1, r25	; 0x01
    496a:	80 83       	st	Z, r24
    496c:	fe 01       	movw	r30, r28
    496e:	e7 5b       	subi	r30, 0xB7	; 183
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	80 81       	ld	r24, Z
    4974:	91 81       	ldd	r25, Z+1	; 0x01
    4976:	01 97       	sbiw	r24, 0x01	; 1
    4978:	f1 f7       	brne	.-4      	; 0x4976 <main+0xfb8>
    497a:	fe 01       	movw	r30, r28
    497c:	e7 5b       	subi	r30, 0xB7	; 183
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4984:	de 01       	movw	r26, r28
    4986:	a5 5b       	subi	r26, 0xB5	; 181
    4988:	bf 4f       	sbci	r27, 0xFF	; 255
    498a:	fe 01       	movw	r30, r28
    498c:	e5 5b       	subi	r30, 0xB5	; 181
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	11 96       	adiw	r26, 0x01	; 1
    4998:	9c 93       	st	X, r25
    499a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    499c:	fe 01       	movw	r30, r28
    499e:	e5 5b       	subi	r30, 0xB5	; 181
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	d1 f6       	brne	.-76     	; 0x495e <main+0xfa0>
    49aa:	28 c0       	rjmp	.+80     	; 0x49fc <main+0x103e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ac:	8e 01       	movw	r16, r28
    49ae:	05 5b       	subi	r16, 0xB5	; 181
    49b0:	1f 4f       	sbci	r17, 0xFF	; 255
    49b2:	fe 01       	movw	r30, r28
    49b4:	e3 5b       	subi	r30, 0xB3	; 179
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	60 81       	ld	r22, Z
    49ba:	71 81       	ldd	r23, Z+1	; 0x01
    49bc:	82 81       	ldd	r24, Z+2	; 0x02
    49be:	93 81       	ldd	r25, Z+3	; 0x03
    49c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	f8 01       	movw	r30, r16
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	80 83       	st	Z, r24
    49ce:	de 01       	movw	r26, r28
    49d0:	a9 5b       	subi	r26, 0xB9	; 185
    49d2:	bf 4f       	sbci	r27, 0xFF	; 255
    49d4:	fe 01       	movw	r30, r28
    49d6:	e5 5b       	subi	r30, 0xB5	; 181
    49d8:	ff 4f       	sbci	r31, 0xFF	; 255
    49da:	80 81       	ld	r24, Z
    49dc:	91 81       	ldd	r25, Z+1	; 0x01
    49de:	11 96       	adiw	r26, 0x01	; 1
    49e0:	9c 93       	st	X, r25
    49e2:	8e 93       	st	-X, r24
    49e4:	fe 01       	movw	r30, r28
    49e6:	e9 5b       	subi	r30, 0xB9	; 185
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <main+0x1030>
    49f2:	fe 01       	movw	r30, r28
    49f4:	e9 5b       	subi	r30, 0xB9	; 185
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
						_delay_ms(1000);
						i=10000;
    49fc:	fe 01       	movw	r30, r28
    49fe:	e3 55       	subi	r30, 0x53	; 83
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 e1       	ldi	r24, 0x10	; 16
    4a04:	97 e2       	ldi	r25, 0x27	; 39
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	80 83       	st	Z, r24
						for(f=0 ; f<4 ; f++)
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ee 54       	subi	r30, 0x4E	; 78
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	10 82       	st	Z, r1
    4a12:	51 c0       	rjmp	.+162    	; 0x4ab6 <main+0x10f8>
						{
							do
							{
								Key=HKPD_u8GetPressedKey();
    4a14:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ef 54       	subi	r30, 0x4F	; 79
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 83       	st	Z, r24
							}while(Key == NOT_PRESSED);
    4a20:	fe 01       	movw	r30, r28
    4a22:	ef 54       	subi	r30, 0x4F	; 79
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	80 81       	ld	r24, Z
    4a28:	8f 3f       	cpi	r24, 0xFF	; 255
    4a2a:	a1 f3       	breq	.-24     	; 0x4a14 <main+0x1056>
							HLCD_voidSendInt(Key);
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	ef 54       	subi	r30, 0x4F	; 79
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	a0 e0       	ldi	r26, 0x00	; 0
    4a3a:	b0 e0       	ldi	r27, 0x00	; 0
    4a3c:	bc 01       	movw	r22, r24
    4a3e:	cd 01       	movw	r24, r26
    4a40:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
							i/=10;
    4a44:	8e 01       	movw	r16, r28
    4a46:	03 55       	subi	r16, 0x53	; 83
    4a48:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	e3 55       	subi	r30, 0x53	; 83
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	80 81       	ld	r24, Z
    4a52:	91 81       	ldd	r25, Z+1	; 0x01
    4a54:	2a e0       	ldi	r18, 0x0A	; 10
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	b9 01       	movw	r22, r18
    4a5a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    4a5e:	cb 01       	movw	r24, r22
    4a60:	f8 01       	movw	r30, r16
    4a62:	91 83       	std	Z+1, r25	; 0x01
    4a64:	80 83       	st	Z, r24
							Pass += ( Key*i );
    4a66:	fe 01       	movw	r30, r28
    4a68:	ef 54       	subi	r30, 0x4F	; 79
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 81       	ld	r24, Z
    4a6e:	28 2f       	mov	r18, r24
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	fe 01       	movw	r30, r28
    4a74:	e3 55       	subi	r30, 0x53	; 83
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	80 81       	ld	r24, Z
    4a7a:	91 81       	ldd	r25, Z+1	; 0x01
    4a7c:	a9 01       	movw	r20, r18
    4a7e:	48 9f       	mul	r20, r24
    4a80:	90 01       	movw	r18, r0
    4a82:	49 9f       	mul	r20, r25
    4a84:	30 0d       	add	r19, r0
    4a86:	58 9f       	mul	r21, r24
    4a88:	30 0d       	add	r19, r0
    4a8a:	11 24       	eor	r1, r1
    4a8c:	de 01       	movw	r26, r28
    4a8e:	a7 55       	subi	r26, 0x57	; 87
    4a90:	bf 4f       	sbci	r27, 0xFF	; 255
    4a92:	fe 01       	movw	r30, r28
    4a94:	e7 55       	subi	r30, 0x57	; 87
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	82 0f       	add	r24, r18
    4a9e:	93 1f       	adc	r25, r19
    4aa0:	8d 93       	st	X+, r24
    4aa2:	9c 93       	st	X, r25
						flag_CorrectPass=0 ;
						HLCD_voidClearDisplay();
						HLCD_voidSendString("New Pass : ");
						_delay_ms(1000);
						i=10000;
						for(f=0 ; f<4 ; f++)
    4aa4:	de 01       	movw	r26, r28
    4aa6:	ae 54       	subi	r26, 0x4E	; 78
    4aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    4aaa:	fe 01       	movw	r30, r28
    4aac:	ee 54       	subi	r30, 0x4E	; 78
    4aae:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab0:	80 81       	ld	r24, Z
    4ab2:	8f 5f       	subi	r24, 0xFF	; 255
    4ab4:	8c 93       	st	X, r24
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ee 54       	subi	r30, 0x4E	; 78
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	80 81       	ld	r24, Z
    4abe:	84 30       	cpi	r24, 0x04	; 4
    4ac0:	08 f4       	brcc	.+2      	; 0x4ac4 <main+0x1106>
    4ac2:	a8 cf       	rjmp	.-176    	; 0x4a14 <main+0x1056>
							}while(Key == NOT_PRESSED);
							HLCD_voidSendInt(Key);
							i/=10;
							Pass += ( Key*i );
						}
						Add_Pass_EEPROM(Pass);
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e7 55       	subi	r30, 0x57	; 87
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	80 81       	ld	r24, Z
    4acc:	91 81       	ldd	r25, Z+1	; 0x01
    4ace:	0e 94 4c 2b 	call	0x5698	; 0x5698 <Add_Pass_EEPROM>
    4ad2:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>
					}
					else
					{
						HLCD_voidClearDisplay();
    4ad6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						for(Pass_Counter=0 ; Pass_Counter<2 ; Pass_Counter++)
    4ada:	fe 01       	movw	r30, r28
    4adc:	e0 55       	subi	r30, 0x50	; 80
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	10 82       	st	Z, r1
    4ae2:	fe c1       	rjmp	.+1020   	; 0x4ee0 <main+0x1522>
						{
							i=10000;
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e3 55       	subi	r30, 0x53	; 83
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 e1       	ldi	r24, 0x10	; 16
    4aec:	97 e2       	ldi	r25, 0x27	; 39
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
							Pass=0;
    4af2:	fe 01       	movw	r30, r28
    4af4:	e7 55       	subi	r30, 0x57	; 87
    4af6:	ff 4f       	sbci	r31, 0xFF	; 255
    4af8:	11 82       	std	Z+1, r1	; 0x01
    4afa:	10 82       	st	Z, r1
							HLCD_voidSendString("Wrong Pass");
    4afc:	82 eb       	ldi	r24, 0xB2	; 178
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    4b04:	fe 01       	movw	r30, r28
    4b06:	ed 5b       	subi	r30, 0xBD	; 189
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	aa ef       	ldi	r26, 0xFA	; 250
    4b10:	b3 e4       	ldi	r27, 0x43	; 67
    4b12:	80 83       	st	Z, r24
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	a2 83       	std	Z+2, r26	; 0x02
    4b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b1a:	8e 01       	movw	r16, r28
    4b1c:	01 5c       	subi	r16, 0xC1	; 193
    4b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b20:	fe 01       	movw	r30, r28
    4b22:	ed 5b       	subi	r30, 0xBD	; 189
    4b24:	ff 4f       	sbci	r31, 0xFF	; 255
    4b26:	60 81       	ld	r22, Z
    4b28:	71 81       	ldd	r23, Z+1	; 0x01
    4b2a:	82 81       	ldd	r24, Z+2	; 0x02
    4b2c:	93 81       	ldd	r25, Z+3	; 0x03
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	4a ef       	ldi	r20, 0xFA	; 250
    4b34:	54 e4       	ldi	r21, 0x44	; 68
    4b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	f8 01       	movw	r30, r16
    4b40:	80 83       	st	Z, r24
    4b42:	91 83       	std	Z+1, r25	; 0x01
    4b44:	a2 83       	std	Z+2, r26	; 0x02
    4b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b48:	fe 01       	movw	r30, r28
    4b4a:	ff 96       	adiw	r30, 0x3f	; 63
    4b4c:	60 81       	ld	r22, Z
    4b4e:	71 81       	ldd	r23, Z+1	; 0x01
    4b50:	82 81       	ldd	r24, Z+2	; 0x02
    4b52:	93 81       	ldd	r25, Z+3	; 0x03
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	40 e8       	ldi	r20, 0x80	; 128
    4b5a:	5f e3       	ldi	r21, 0x3F	; 63
    4b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b60:	88 23       	and	r24, r24
    4b62:	2c f4       	brge	.+10     	; 0x4b6e <main+0x11b0>
		__ticks = 1;
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	9e af       	std	Y+62, r25	; 0x3e
    4b6a:	8d af       	std	Y+61, r24	; 0x3d
    4b6c:	46 c0       	rjmp	.+140    	; 0x4bfa <main+0x123c>
	else if (__tmp > 65535)
    4b6e:	fe 01       	movw	r30, r28
    4b70:	ff 96       	adiw	r30, 0x3f	; 63
    4b72:	60 81       	ld	r22, Z
    4b74:	71 81       	ldd	r23, Z+1	; 0x01
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	3f ef       	ldi	r19, 0xFF	; 255
    4b7e:	4f e7       	ldi	r20, 0x7F	; 127
    4b80:	57 e4       	ldi	r21, 0x47	; 71
    4b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b86:	18 16       	cp	r1, r24
    4b88:	64 f5       	brge	.+88     	; 0x4be2 <main+0x1224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	ed 5b       	subi	r30, 0xBD	; 189
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	60 81       	ld	r22, Z
    4b92:	71 81       	ldd	r23, Z+1	; 0x01
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	93 81       	ldd	r25, Z+3	; 0x03
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e2       	ldi	r20, 0x20	; 32
    4b9e:	51 e4       	ldi	r21, 0x41	; 65
    4ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	bc 01       	movw	r22, r24
    4baa:	cd 01       	movw	r24, r26
    4bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	9e af       	std	Y+62, r25	; 0x3e
    4bb6:	8d af       	std	Y+61, r24	; 0x3d
    4bb8:	0f c0       	rjmp	.+30     	; 0x4bd8 <main+0x121a>
    4bba:	88 ec       	ldi	r24, 0xC8	; 200
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	9c af       	std	Y+60, r25	; 0x3c
    4bc0:	8b af       	std	Y+59, r24	; 0x3b
    4bc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <main+0x1208>
    4bca:	9c af       	std	Y+60, r25	; 0x3c
    4bcc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	9e af       	std	Y+62, r25	; 0x3e
    4bd6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bda:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bdc:	00 97       	sbiw	r24, 0x00	; 0
    4bde:	69 f7       	brne	.-38     	; 0x4bba <main+0x11fc>
    4be0:	16 c0       	rjmp	.+44     	; 0x4c0e <main+0x1250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be2:	fe 01       	movw	r30, r28
    4be4:	ff 96       	adiw	r30, 0x3f	; 63
    4be6:	60 81       	ld	r22, Z
    4be8:	71 81       	ldd	r23, Z+1	; 0x01
    4bea:	82 81       	ldd	r24, Z+2	; 0x02
    4bec:	93 81       	ldd	r25, Z+3	; 0x03
    4bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	9e af       	std	Y+62, r25	; 0x3e
    4bf8:	8d af       	std	Y+61, r24	; 0x3d
    4bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bfe:	9a af       	std	Y+58, r25	; 0x3a
    4c00:	89 af       	std	Y+57, r24	; 0x39
    4c02:	89 ad       	ldd	r24, Y+57	; 0x39
    4c04:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <main+0x1248>
    4c0a:	9a af       	std	Y+58, r25	; 0x3a
    4c0c:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(500);
							HLCD_voidClearDisplay();
    4c0e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
							HLCD_voidSendString("Old Pass : ");
    4c12:	86 ec       	ldi	r24, 0xC6	; 198
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
							for(f=0 ; f<4 ; f++)
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	ee 54       	subi	r30, 0x4E	; 78
    4c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c20:	10 82       	st	Z, r1
    4c22:	51 c0       	rjmp	.+162    	; 0x4cc6 <main+0x1308>
							{
								do
								{
									Key=HKPD_u8GetPressedKey();
    4c24:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    4c28:	fe 01       	movw	r30, r28
    4c2a:	ef 54       	subi	r30, 0x4F	; 79
    4c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2e:	80 83       	st	Z, r24
								}while(Key == NOT_PRESSED);
    4c30:	fe 01       	movw	r30, r28
    4c32:	ef 54       	subi	r30, 0x4F	; 79
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	80 81       	ld	r24, Z
    4c38:	8f 3f       	cpi	r24, 0xFF	; 255
    4c3a:	a1 f3       	breq	.-24     	; 0x4c24 <main+0x1266>
								HLCD_voidSendInt(Key);
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	ef 54       	subi	r30, 0x4F	; 79
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	80 81       	ld	r24, Z
    4c44:	88 2f       	mov	r24, r24
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	a0 e0       	ldi	r26, 0x00	; 0
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	cd 01       	movw	r24, r26
    4c50:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
								i/=10;
    4c54:	8e 01       	movw	r16, r28
    4c56:	03 55       	subi	r16, 0x53	; 83
    4c58:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	e3 55       	subi	r30, 0x53	; 83
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	80 81       	ld	r24, Z
    4c62:	91 81       	ldd	r25, Z+1	; 0x01
    4c64:	2a e0       	ldi	r18, 0x0A	; 10
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	b9 01       	movw	r22, r18
    4c6a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    4c6e:	cb 01       	movw	r24, r22
    4c70:	f8 01       	movw	r30, r16
    4c72:	91 83       	std	Z+1, r25	; 0x01
    4c74:	80 83       	st	Z, r24
								Pass += ( Key*i );
    4c76:	fe 01       	movw	r30, r28
    4c78:	ef 54       	subi	r30, 0x4F	; 79
    4c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7c:	80 81       	ld	r24, Z
    4c7e:	28 2f       	mov	r18, r24
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	fe 01       	movw	r30, r28
    4c84:	e3 55       	subi	r30, 0x53	; 83
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	80 81       	ld	r24, Z
    4c8a:	91 81       	ldd	r25, Z+1	; 0x01
    4c8c:	a9 01       	movw	r20, r18
    4c8e:	48 9f       	mul	r20, r24
    4c90:	90 01       	movw	r18, r0
    4c92:	49 9f       	mul	r20, r25
    4c94:	30 0d       	add	r19, r0
    4c96:	58 9f       	mul	r21, r24
    4c98:	30 0d       	add	r19, r0
    4c9a:	11 24       	eor	r1, r1
    4c9c:	de 01       	movw	r26, r28
    4c9e:	a7 55       	subi	r26, 0x57	; 87
    4ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	e7 55       	subi	r30, 0x57	; 87
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	80 81       	ld	r24, Z
    4caa:	91 81       	ldd	r25, Z+1	; 0x01
    4cac:	82 0f       	add	r24, r18
    4cae:	93 1f       	adc	r25, r19
    4cb0:	8d 93       	st	X+, r24
    4cb2:	9c 93       	st	X, r25
							Pass=0;
							HLCD_voidSendString("Wrong Pass");
							_delay_ms(500);
							HLCD_voidClearDisplay();
							HLCD_voidSendString("Old Pass : ");
							for(f=0 ; f<4 ; f++)
    4cb4:	de 01       	movw	r26, r28
    4cb6:	ae 54       	subi	r26, 0x4E	; 78
    4cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    4cba:	fe 01       	movw	r30, r28
    4cbc:	ee 54       	subi	r30, 0x4E	; 78
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	80 81       	ld	r24, Z
    4cc2:	8f 5f       	subi	r24, 0xFF	; 255
    4cc4:	8c 93       	st	X, r24
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	ee 54       	subi	r30, 0x4E	; 78
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	80 81       	ld	r24, Z
    4cce:	84 30       	cpi	r24, 0x04	; 4
    4cd0:	08 f4       	brcc	.+2      	; 0x4cd4 <main+0x1316>
    4cd2:	a8 cf       	rjmp	.-176    	; 0x4c24 <main+0x1266>
								}while(Key == NOT_PRESSED);
								HLCD_voidSendInt(Key);
								i/=10;
								Pass += ( Key*i );
							}
							Check_Pass(Pass);
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e7 55       	subi	r30, 0x57	; 87
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	80 81       	ld	r24, Z
    4cdc:	91 81       	ldd	r25, Z+1	; 0x01
    4cde:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <Check_Pass>
							if(flag_CorrectPass==1)
    4ce2:	80 91 10 01 	lds	r24, 0x0110
    4ce6:	81 30       	cpi	r24, 0x01	; 1
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <main+0x132e>
    4cea:	7d c0       	rjmp	.+250    	; 0x4de6 <main+0x1428>
							{
								flag_CorrectPass=0 ;
    4cec:	10 92 10 01 	sts	0x0110, r1
								HLCD_voidClearDisplay();
    4cf0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
								HLCD_voidSendString("welcome  : ");
    4cf4:	86 ea       	ldi	r24, 0xA6	; 166
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	aa e7       	ldi	r26, 0x7A	; 122
    4d02:	b4 e4       	ldi	r27, 0x44	; 68
    4d04:	8d ab       	std	Y+53, r24	; 0x35
    4d06:	9e ab       	std	Y+54, r25	; 0x36
    4d08:	af ab       	std	Y+55, r26	; 0x37
    4d0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d0c:	6d a9       	ldd	r22, Y+53	; 0x35
    4d0e:	7e a9       	ldd	r23, Y+54	; 0x36
    4d10:	8f a9       	ldd	r24, Y+55	; 0x37
    4d12:	98 ad       	ldd	r25, Y+56	; 0x38
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	4a ef       	ldi	r20, 0xFA	; 250
    4d1a:	54 e4       	ldi	r21, 0x44	; 68
    4d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	89 ab       	std	Y+49, r24	; 0x31
    4d26:	9a ab       	std	Y+50, r25	; 0x32
    4d28:	ab ab       	std	Y+51, r26	; 0x33
    4d2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    4d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    4d30:	8b a9       	ldd	r24, Y+51	; 0x33
    4d32:	9c a9       	ldd	r25, Y+52	; 0x34
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e8       	ldi	r20, 0x80	; 128
    4d3a:	5f e3       	ldi	r21, 0x3F	; 63
    4d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d40:	88 23       	and	r24, r24
    4d42:	2c f4       	brge	.+10     	; 0x4d4e <main+0x1390>
		__ticks = 1;
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	98 ab       	std	Y+48, r25	; 0x30
    4d4a:	8f a7       	std	Y+47, r24	; 0x2f
    4d4c:	40 c0       	rjmp	.+128    	; 0x4dce <main+0x1410>
	else if (__tmp > 65535)
    4d4e:	69 a9       	ldd	r22, Y+49	; 0x31
    4d50:	7a a9       	ldd	r23, Y+50	; 0x32
    4d52:	8b a9       	ldd	r24, Y+51	; 0x33
    4d54:	9c a9       	ldd	r25, Y+52	; 0x34
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	3f ef       	ldi	r19, 0xFF	; 255
    4d5a:	4f e7       	ldi	r20, 0x7F	; 127
    4d5c:	57 e4       	ldi	r21, 0x47	; 71
    4d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d62:	18 16       	cp	r1, r24
    4d64:	54 f5       	brge	.+84     	; 0x4dba <main+0x13fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d66:	6d a9       	ldd	r22, Y+53	; 0x35
    4d68:	7e a9       	ldd	r23, Y+54	; 0x36
    4d6a:	8f a9       	ldd	r24, Y+55	; 0x37
    4d6c:	98 ad       	ldd	r25, Y+56	; 0x38
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e2       	ldi	r20, 0x20	; 32
    4d74:	51 e4       	ldi	r21, 0x41	; 65
    4d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	98 ab       	std	Y+48, r25	; 0x30
    4d8c:	8f a7       	std	Y+47, r24	; 0x2f
    4d8e:	0f c0       	rjmp	.+30     	; 0x4dae <main+0x13f0>
    4d90:	88 ec       	ldi	r24, 0xC8	; 200
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9e a7       	std	Y+46, r25	; 0x2e
    4d96:	8d a7       	std	Y+45, r24	; 0x2d
    4d98:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <main+0x13de>
    4da0:	9e a7       	std	Y+46, r25	; 0x2e
    4da2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4da6:	98 a9       	ldd	r25, Y+48	; 0x30
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	98 ab       	std	Y+48, r25	; 0x30
    4dac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dae:	8f a5       	ldd	r24, Y+47	; 0x2f
    4db0:	98 a9       	ldd	r25, Y+48	; 0x30
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	69 f7       	brne	.-38     	; 0x4d90 <main+0x13d2>
    4db6:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dba:	69 a9       	ldd	r22, Y+49	; 0x31
    4dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    4dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    4dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    4dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	98 ab       	std	Y+48, r25	; 0x30
    4dcc:	8f a7       	std	Y+47, r24	; 0x2f
    4dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    4dd2:	9c a7       	std	Y+44, r25	; 0x2c
    4dd4:	8b a7       	std	Y+43, r24	; 0x2b
    4dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dda:	01 97       	sbiw	r24, 0x01	; 1
    4ddc:	f1 f7       	brne	.-4      	; 0x4dda <main+0x141c>
    4dde:	9c a7       	std	Y+44, r25	; 0x2c
    4de0:	8b a7       	std	Y+43, r24	; 0x2b
    4de2:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>
								_delay_ms(1000);
								break;
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	aa ef       	ldi	r26, 0xFA	; 250
    4dec:	b3 e4       	ldi	r27, 0x43	; 67
    4dee:	8f a3       	std	Y+39, r24	; 0x27
    4df0:	98 a7       	std	Y+40, r25	; 0x28
    4df2:	a9 a7       	std	Y+41, r26	; 0x29
    4df4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df6:	6f a1       	ldd	r22, Y+39	; 0x27
    4df8:	78 a5       	ldd	r23, Y+40	; 0x28
    4dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    4dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	4a ef       	ldi	r20, 0xFA	; 250
    4e04:	54 e4       	ldi	r21, 0x44	; 68
    4e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	8b a3       	std	Y+35, r24	; 0x23
    4e10:	9c a3       	std	Y+36, r25	; 0x24
    4e12:	ad a3       	std	Y+37, r26	; 0x25
    4e14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e16:	6b a1       	ldd	r22, Y+35	; 0x23
    4e18:	7c a1       	ldd	r23, Y+36	; 0x24
    4e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    4e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	40 e8       	ldi	r20, 0x80	; 128
    4e24:	5f e3       	ldi	r21, 0x3F	; 63
    4e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e2a:	88 23       	and	r24, r24
    4e2c:	2c f4       	brge	.+10     	; 0x4e38 <main+0x147a>
		__ticks = 1;
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	9a a3       	std	Y+34, r25	; 0x22
    4e34:	89 a3       	std	Y+33, r24	; 0x21
    4e36:	3f c0       	rjmp	.+126    	; 0x4eb6 <main+0x14f8>
	else if (__tmp > 65535)
    4e38:	6b a1       	ldd	r22, Y+35	; 0x23
    4e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    4e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    4e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	3f ef       	ldi	r19, 0xFF	; 255
    4e44:	4f e7       	ldi	r20, 0x7F	; 127
    4e46:	57 e4       	ldi	r21, 0x47	; 71
    4e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e4c:	18 16       	cp	r1, r24
    4e4e:	4c f5       	brge	.+82     	; 0x4ea2 <main+0x14e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e50:	6f a1       	ldd	r22, Y+39	; 0x27
    4e52:	78 a5       	ldd	r23, Y+40	; 0x28
    4e54:	89 a5       	ldd	r24, Y+41	; 0x29
    4e56:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	40 e2       	ldi	r20, 0x20	; 32
    4e5e:	51 e4       	ldi	r21, 0x41	; 65
    4e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e64:	dc 01       	movw	r26, r24
    4e66:	cb 01       	movw	r24, r22
    4e68:	bc 01       	movw	r22, r24
    4e6a:	cd 01       	movw	r24, r26
    4e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	9a a3       	std	Y+34, r25	; 0x22
    4e76:	89 a3       	std	Y+33, r24	; 0x21
    4e78:	0f c0       	rjmp	.+30     	; 0x4e98 <main+0x14da>
    4e7a:	88 ec       	ldi	r24, 0xC8	; 200
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	98 a3       	std	Y+32, r25	; 0x20
    4e80:	8f 8f       	std	Y+31, r24	; 0x1f
    4e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e84:	98 a1       	ldd	r25, Y+32	; 0x20
    4e86:	01 97       	sbiw	r24, 0x01	; 1
    4e88:	f1 f7       	brne	.-4      	; 0x4e86 <main+0x14c8>
    4e8a:	98 a3       	std	Y+32, r25	; 0x20
    4e8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    4e90:	9a a1       	ldd	r25, Y+34	; 0x22
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	9a a3       	std	Y+34, r25	; 0x22
    4e96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e98:	89 a1       	ldd	r24, Y+33	; 0x21
    4e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e9c:	00 97       	sbiw	r24, 0x00	; 0
    4e9e:	69 f7       	brne	.-38     	; 0x4e7a <main+0x14bc>
    4ea0:	14 c0       	rjmp	.+40     	; 0x4eca <main+0x150c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    4ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    4eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eae:	dc 01       	movw	r26, r24
    4eb0:	cb 01       	movw	r24, r22
    4eb2:	9a a3       	std	Y+34, r25	; 0x22
    4eb4:	89 a3       	std	Y+33, r24	; 0x21
    4eb6:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb8:	9a a1       	ldd	r25, Y+34	; 0x22
    4eba:	9e 8f       	std	Y+30, r25	; 0x1e
    4ebc:	8d 8f       	std	Y+29, r24	; 0x1d
    4ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <main+0x1504>
    4ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec8:	8d 8f       	std	Y+29, r24	; 0x1d
							}
							_delay_ms(500);
							HLCD_voidClearDisplay();
    4eca:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
						Add_Pass_EEPROM(Pass);
					}
					else
					{
						HLCD_voidClearDisplay();
						for(Pass_Counter=0 ; Pass_Counter<2 ; Pass_Counter++)
    4ece:	de 01       	movw	r26, r28
    4ed0:	a0 55       	subi	r26, 0x50	; 80
    4ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	e0 55       	subi	r30, 0x50	; 80
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	80 81       	ld	r24, Z
    4edc:	8f 5f       	subi	r24, 0xFF	; 255
    4ede:	8c 93       	st	X, r24
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e0 55       	subi	r30, 0x50	; 80
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	82 30       	cpi	r24, 0x02	; 2
    4eea:	08 f4       	brcc	.+2      	; 0x4eee <main+0x1530>
    4eec:	fb cd       	rjmp	.-1034   	; 0x4ae4 <main+0x1126>
    4eee:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>
						}
					}
				}

			}
			else if(Key==3)
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	ef 54       	subi	r30, 0x4F	; 79
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	83 30       	cpi	r24, 0x03	; 3
    4efc:	11 f0       	breq	.+4      	; 0x4f02 <main+0x1544>
    4efe:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>
			{
				MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	60 e0       	ldi	r22, 0x00	; 0
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
				HLCD_voidClearDisplay();
    4f0c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	60 e0       	ldi	r22, 0x00	; 0
    4f14:	0e 94 28 16 	call	0x2c50	; 0x2c50 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Add ID :");
    4f18:	8e ed       	ldi	r24, 0xDE	; 222
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
				i=10000;
    4f20:	fe 01       	movw	r30, r28
    4f22:	e3 55       	subi	r30, 0x53	; 83
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	80 e1       	ldi	r24, 0x10	; 16
    4f28:	97 e2       	ldi	r25, 0x27	; 39
    4f2a:	91 83       	std	Z+1, r25	; 0x01
    4f2c:	80 83       	st	Z, r24
				ID=0;
    4f2e:	fe 01       	movw	r30, r28
    4f30:	e5 55       	subi	r30, 0x55	; 85
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	11 82       	std	Z+1, r1	; 0x01
    4f36:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ee 54       	subi	r30, 0x4E	; 78
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	10 82       	st	Z, r1
    4f40:	51 c0       	rjmp	.+162    	; 0x4fe4 <main+0x1626>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    4f42:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    4f46:	fe 01       	movw	r30, r28
    4f48:	ef 54       	subi	r30, 0x4F	; 79
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    4f4e:	fe 01       	movw	r30, r28
    4f50:	ef 54       	subi	r30, 0x4F	; 79
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	80 81       	ld	r24, Z
    4f56:	8f 3f       	cpi	r24, 0xFF	; 255
    4f58:	a1 f3       	breq	.-24     	; 0x4f42 <main+0x1584>
					HLCD_voidSendInt(Key);
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ef 54       	subi	r30, 0x4F	; 79
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 81       	ld	r24, Z
    4f62:	88 2f       	mov	r24, r24
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	a0 e0       	ldi	r26, 0x00	; 0
    4f68:	b0 e0       	ldi	r27, 0x00	; 0
    4f6a:	bc 01       	movw	r22, r24
    4f6c:	cd 01       	movw	r24, r26
    4f6e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
					i/=10;
    4f72:	8e 01       	movw	r16, r28
    4f74:	03 55       	subi	r16, 0x53	; 83
    4f76:	1f 4f       	sbci	r17, 0xFF	; 255
    4f78:	fe 01       	movw	r30, r28
    4f7a:	e3 55       	subi	r30, 0x53	; 83
    4f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7e:	80 81       	ld	r24, Z
    4f80:	91 81       	ldd	r25, Z+1	; 0x01
    4f82:	2a e0       	ldi	r18, 0x0A	; 10
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	b9 01       	movw	r22, r18
    4f88:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	f8 01       	movw	r30, r16
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
					ID += ( Key*i );
    4f94:	fe 01       	movw	r30, r28
    4f96:	ef 54       	subi	r30, 0x4F	; 79
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	80 81       	ld	r24, Z
    4f9c:	28 2f       	mov	r18, r24
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	e3 55       	subi	r30, 0x53	; 83
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	80 81       	ld	r24, Z
    4fa8:	91 81       	ldd	r25, Z+1	; 0x01
    4faa:	a9 01       	movw	r20, r18
    4fac:	48 9f       	mul	r20, r24
    4fae:	90 01       	movw	r18, r0
    4fb0:	49 9f       	mul	r20, r25
    4fb2:	30 0d       	add	r19, r0
    4fb4:	58 9f       	mul	r21, r24
    4fb6:	30 0d       	add	r19, r0
    4fb8:	11 24       	eor	r1, r1
    4fba:	de 01       	movw	r26, r28
    4fbc:	a5 55       	subi	r26, 0x55	; 85
    4fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    4fc0:	fe 01       	movw	r30, r28
    4fc2:	e5 55       	subi	r30, 0x55	; 85
    4fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc6:	80 81       	ld	r24, Z
    4fc8:	91 81       	ldd	r25, Z+1	; 0x01
    4fca:	82 0f       	add	r24, r18
    4fcc:	93 1f       	adc	r25, r19
    4fce:	8d 93       	st	X+, r24
    4fd0:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Add ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    4fd2:	de 01       	movw	r26, r28
    4fd4:	ae 54       	subi	r26, 0x4E	; 78
    4fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd8:	fe 01       	movw	r30, r28
    4fda:	ee 54       	subi	r30, 0x4E	; 78
    4fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fde:	80 81       	ld	r24, Z
    4fe0:	8f 5f       	subi	r24, 0xFF	; 255
    4fe2:	8c 93       	st	X, r24
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	ee 54       	subi	r30, 0x4E	; 78
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	80 81       	ld	r24, Z
    4fec:	84 30       	cpi	r24, 0x04	; 4
    4fee:	08 f4       	brcc	.+2      	; 0x4ff2 <main+0x1634>
    4ff0:	a8 cf       	rjmp	.-176    	; 0x4f42 <main+0x1584>
					}while(Key == NOT_PRESSED);
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );
				}
				Add_ID_EEPROM(ID);
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	e5 55       	subi	r30, 0x55	; 85
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	80 81       	ld	r24, Z
    4ffa:	91 81       	ldd	r25, Z+1	; 0x01
    4ffc:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <Add_ID_EEPROM>
    5000:	80 e0       	ldi	r24, 0x00	; 0
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	a0 e7       	ldi	r26, 0x70	; 112
    5006:	b1 e4       	ldi	r27, 0x41	; 65
    5008:	89 8f       	std	Y+25, r24	; 0x19
    500a:	9a 8f       	std	Y+26, r25	; 0x1a
    500c:	ab 8f       	std	Y+27, r26	; 0x1b
    500e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5010:	69 8d       	ldd	r22, Y+25	; 0x19
    5012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5018:	20 e0       	ldi	r18, 0x00	; 0
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	4a ef       	ldi	r20, 0xFA	; 250
    501e:	54 e4       	ldi	r21, 0x44	; 68
    5020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5024:	dc 01       	movw	r26, r24
    5026:	cb 01       	movw	r24, r22
    5028:	8d 8b       	std	Y+21, r24	; 0x15
    502a:	9e 8b       	std	Y+22, r25	; 0x16
    502c:	af 8b       	std	Y+23, r26	; 0x17
    502e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5030:	6d 89       	ldd	r22, Y+21	; 0x15
    5032:	7e 89       	ldd	r23, Y+22	; 0x16
    5034:	8f 89       	ldd	r24, Y+23	; 0x17
    5036:	98 8d       	ldd	r25, Y+24	; 0x18
    5038:	20 e0       	ldi	r18, 0x00	; 0
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	40 e8       	ldi	r20, 0x80	; 128
    503e:	5f e3       	ldi	r21, 0x3F	; 63
    5040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5044:	88 23       	and	r24, r24
    5046:	2c f4       	brge	.+10     	; 0x5052 <main+0x1694>
		__ticks = 1;
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	9c 8b       	std	Y+20, r25	; 0x14
    504e:	8b 8b       	std	Y+19, r24	; 0x13
    5050:	3f c0       	rjmp	.+126    	; 0x50d0 <main+0x1712>
	else if (__tmp > 65535)
    5052:	6d 89       	ldd	r22, Y+21	; 0x15
    5054:	7e 89       	ldd	r23, Y+22	; 0x16
    5056:	8f 89       	ldd	r24, Y+23	; 0x17
    5058:	98 8d       	ldd	r25, Y+24	; 0x18
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	3f ef       	ldi	r19, 0xFF	; 255
    505e:	4f e7       	ldi	r20, 0x7F	; 127
    5060:	57 e4       	ldi	r21, 0x47	; 71
    5062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5066:	18 16       	cp	r1, r24
    5068:	4c f5       	brge	.+82     	; 0x50bc <main+0x16fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    506a:	69 8d       	ldd	r22, Y+25	; 0x19
    506c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    506e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	40 e2       	ldi	r20, 0x20	; 32
    5078:	51 e4       	ldi	r21, 0x41	; 65
    507a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507e:	dc 01       	movw	r26, r24
    5080:	cb 01       	movw	r24, r22
    5082:	bc 01       	movw	r22, r24
    5084:	cd 01       	movw	r24, r26
    5086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	9c 8b       	std	Y+20, r25	; 0x14
    5090:	8b 8b       	std	Y+19, r24	; 0x13
    5092:	0f c0       	rjmp	.+30     	; 0x50b2 <main+0x16f4>
    5094:	88 ec       	ldi	r24, 0xC8	; 200
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	9a 8b       	std	Y+18, r25	; 0x12
    509a:	89 8b       	std	Y+17, r24	; 0x11
    509c:	89 89       	ldd	r24, Y+17	; 0x11
    509e:	9a 89       	ldd	r25, Y+18	; 0x12
    50a0:	01 97       	sbiw	r24, 0x01	; 1
    50a2:	f1 f7       	brne	.-4      	; 0x50a0 <main+0x16e2>
    50a4:	9a 8b       	std	Y+18, r25	; 0x12
    50a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a8:	8b 89       	ldd	r24, Y+19	; 0x13
    50aa:	9c 89       	ldd	r25, Y+20	; 0x14
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	9c 8b       	std	Y+20, r25	; 0x14
    50b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b2:	8b 89       	ldd	r24, Y+19	; 0x13
    50b4:	9c 89       	ldd	r25, Y+20	; 0x14
    50b6:	00 97       	sbiw	r24, 0x00	; 0
    50b8:	69 f7       	brne	.-38     	; 0x5094 <main+0x16d6>
    50ba:	14 c0       	rjmp	.+40     	; 0x50e4 <main+0x1726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50bc:	6d 89       	ldd	r22, Y+21	; 0x15
    50be:	7e 89       	ldd	r23, Y+22	; 0x16
    50c0:	8f 89       	ldd	r24, Y+23	; 0x17
    50c2:	98 8d       	ldd	r25, Y+24	; 0x18
    50c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c8:	dc 01       	movw	r26, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	9c 8b       	std	Y+20, r25	; 0x14
    50ce:	8b 8b       	std	Y+19, r24	; 0x13
    50d0:	8b 89       	ldd	r24, Y+19	; 0x13
    50d2:	9c 89       	ldd	r25, Y+20	; 0x14
    50d4:	98 8b       	std	Y+16, r25	; 0x10
    50d6:	8f 87       	std	Y+15, r24	; 0x0f
    50d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    50da:	98 89       	ldd	r25, Y+16	; 0x10
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	f1 f7       	brne	.-4      	; 0x50dc <main+0x171e>
    50e0:	98 8b       	std	Y+16, r25	; 0x10
    50e2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(15);
				HLCD_voidClearDisplay();
    50e4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_voidClearDisplay>
				HLCD_voidSendString("Add Pass : ");
    50e8:	87 ee       	ldi	r24, 0xE7	; 231
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidSendString>
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	aa e7       	ldi	r26, 0x7A	; 122
    50f6:	b4 e4       	ldi	r27, 0x44	; 68
    50f8:	8b 87       	std	Y+11, r24	; 0x0b
    50fa:	9c 87       	std	Y+12, r25	; 0x0c
    50fc:	ad 87       	std	Y+13, r26	; 0x0d
    50fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5100:	6b 85       	ldd	r22, Y+11	; 0x0b
    5102:	7c 85       	ldd	r23, Y+12	; 0x0c
    5104:	8d 85       	ldd	r24, Y+13	; 0x0d
    5106:	9e 85       	ldd	r25, Y+14	; 0x0e
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	4a ef       	ldi	r20, 0xFA	; 250
    510e:	54 e4       	ldi	r21, 0x44	; 68
    5110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	8f 83       	std	Y+7, r24	; 0x07
    511a:	98 87       	std	Y+8, r25	; 0x08
    511c:	a9 87       	std	Y+9, r26	; 0x09
    511e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5120:	6f 81       	ldd	r22, Y+7	; 0x07
    5122:	78 85       	ldd	r23, Y+8	; 0x08
    5124:	89 85       	ldd	r24, Y+9	; 0x09
    5126:	9a 85       	ldd	r25, Y+10	; 0x0a
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e8       	ldi	r20, 0x80	; 128
    512e:	5f e3       	ldi	r21, 0x3F	; 63
    5130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5134:	88 23       	and	r24, r24
    5136:	2c f4       	brge	.+10     	; 0x5142 <main+0x1784>
		__ticks = 1;
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	9e 83       	std	Y+6, r25	; 0x06
    513e:	8d 83       	std	Y+5, r24	; 0x05
    5140:	3f c0       	rjmp	.+126    	; 0x51c0 <main+0x1802>
	else if (__tmp > 65535)
    5142:	6f 81       	ldd	r22, Y+7	; 0x07
    5144:	78 85       	ldd	r23, Y+8	; 0x08
    5146:	89 85       	ldd	r24, Y+9	; 0x09
    5148:	9a 85       	ldd	r25, Y+10	; 0x0a
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	3f ef       	ldi	r19, 0xFF	; 255
    514e:	4f e7       	ldi	r20, 0x7F	; 127
    5150:	57 e4       	ldi	r21, 0x47	; 71
    5152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5156:	18 16       	cp	r1, r24
    5158:	4c f5       	brge	.+82     	; 0x51ac <main+0x17ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    515a:	6b 85       	ldd	r22, Y+11	; 0x0b
    515c:	7c 85       	ldd	r23, Y+12	; 0x0c
    515e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5160:	9e 85       	ldd	r25, Y+14	; 0x0e
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	40 e2       	ldi	r20, 0x20	; 32
    5168:	51 e4       	ldi	r21, 0x41	; 65
    516a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	bc 01       	movw	r22, r24
    5174:	cd 01       	movw	r24, r26
    5176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517a:	dc 01       	movw	r26, r24
    517c:	cb 01       	movw	r24, r22
    517e:	9e 83       	std	Y+6, r25	; 0x06
    5180:	8d 83       	std	Y+5, r24	; 0x05
    5182:	0f c0       	rjmp	.+30     	; 0x51a2 <main+0x17e4>
    5184:	88 ec       	ldi	r24, 0xC8	; 200
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	9c 83       	std	Y+4, r25	; 0x04
    518a:	8b 83       	std	Y+3, r24	; 0x03
    518c:	8b 81       	ldd	r24, Y+3	; 0x03
    518e:	9c 81       	ldd	r25, Y+4	; 0x04
    5190:	01 97       	sbiw	r24, 0x01	; 1
    5192:	f1 f7       	brne	.-4      	; 0x5190 <main+0x17d2>
    5194:	9c 83       	std	Y+4, r25	; 0x04
    5196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5198:	8d 81       	ldd	r24, Y+5	; 0x05
    519a:	9e 81       	ldd	r25, Y+6	; 0x06
    519c:	01 97       	sbiw	r24, 0x01	; 1
    519e:	9e 83       	std	Y+6, r25	; 0x06
    51a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51a2:	8d 81       	ldd	r24, Y+5	; 0x05
    51a4:	9e 81       	ldd	r25, Y+6	; 0x06
    51a6:	00 97       	sbiw	r24, 0x00	; 0
    51a8:	69 f7       	brne	.-38     	; 0x5184 <main+0x17c6>
    51aa:	14 c0       	rjmp	.+40     	; 0x51d4 <main+0x1816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ac:	6f 81       	ldd	r22, Y+7	; 0x07
    51ae:	78 85       	ldd	r23, Y+8	; 0x08
    51b0:	89 85       	ldd	r24, Y+9	; 0x09
    51b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	9e 83       	std	Y+6, r25	; 0x06
    51be:	8d 83       	std	Y+5, r24	; 0x05
    51c0:	8d 81       	ldd	r24, Y+5	; 0x05
    51c2:	9e 81       	ldd	r25, Y+6	; 0x06
    51c4:	9a 83       	std	Y+2, r25	; 0x02
    51c6:	89 83       	std	Y+1, r24	; 0x01
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	9a 81       	ldd	r25, Y+2	; 0x02
    51cc:	01 97       	sbiw	r24, 0x01	; 1
    51ce:	f1 f7       	brne	.-4      	; 0x51cc <main+0x180e>
    51d0:	9a 83       	std	Y+2, r25	; 0x02
    51d2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				i=10000;
    51d4:	fe 01       	movw	r30, r28
    51d6:	e3 55       	subi	r30, 0x53	; 83
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	80 e1       	ldi	r24, 0x10	; 16
    51dc:	97 e2       	ldi	r25, 0x27	; 39
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24

				for(f=0 ; f<4 ; f++)
    51e2:	fe 01       	movw	r30, r28
    51e4:	ee 54       	subi	r30, 0x4E	; 78
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	10 82       	st	Z, r1
    51ea:	51 c0       	rjmp	.+162    	; 0x528e <main+0x18d0>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    51ec:	0e 94 8b 06 	call	0xd16	; 0xd16 <HKPD_u8GetPressedKey>
    51f0:	fe 01       	movw	r30, r28
    51f2:	ef 54       	subi	r30, 0x4F	; 79
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    51f8:	fe 01       	movw	r30, r28
    51fa:	ef 54       	subi	r30, 0x4F	; 79
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	80 81       	ld	r24, Z
    5200:	8f 3f       	cpi	r24, 0xFF	; 255
    5202:	a1 f3       	breq	.-24     	; 0x51ec <main+0x182e>
					HLCD_voidSendInt(Key);
    5204:	fe 01       	movw	r30, r28
    5206:	ef 54       	subi	r30, 0x4F	; 79
    5208:	ff 4f       	sbci	r31, 0xFF	; 255
    520a:	80 81       	ld	r24, Z
    520c:	88 2f       	mov	r24, r24
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	a0 e0       	ldi	r26, 0x00	; 0
    5212:	b0 e0       	ldi	r27, 0x00	; 0
    5214:	bc 01       	movw	r22, r24
    5216:	cd 01       	movw	r24, r26
    5218:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidSendInt>
					i/=10;
    521c:	8e 01       	movw	r16, r28
    521e:	03 55       	subi	r16, 0x53	; 83
    5220:	1f 4f       	sbci	r17, 0xFF	; 255
    5222:	fe 01       	movw	r30, r28
    5224:	e3 55       	subi	r30, 0x53	; 83
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	80 81       	ld	r24, Z
    522a:	91 81       	ldd	r25, Z+1	; 0x01
    522c:	2a e0       	ldi	r18, 0x0A	; 10
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	b9 01       	movw	r22, r18
    5232:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    5236:	cb 01       	movw	r24, r22
    5238:	f8 01       	movw	r30, r16
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	80 83       	st	Z, r24
					Pass += ( Key*i );
    523e:	fe 01       	movw	r30, r28
    5240:	ef 54       	subi	r30, 0x4F	; 79
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	80 81       	ld	r24, Z
    5246:	28 2f       	mov	r18, r24
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	fe 01       	movw	r30, r28
    524c:	e3 55       	subi	r30, 0x53	; 83
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	80 81       	ld	r24, Z
    5252:	91 81       	ldd	r25, Z+1	; 0x01
    5254:	a9 01       	movw	r20, r18
    5256:	48 9f       	mul	r20, r24
    5258:	90 01       	movw	r18, r0
    525a:	49 9f       	mul	r20, r25
    525c:	30 0d       	add	r19, r0
    525e:	58 9f       	mul	r21, r24
    5260:	30 0d       	add	r19, r0
    5262:	11 24       	eor	r1, r1
    5264:	de 01       	movw	r26, r28
    5266:	a7 55       	subi	r26, 0x57	; 87
    5268:	bf 4f       	sbci	r27, 0xFF	; 255
    526a:	fe 01       	movw	r30, r28
    526c:	e7 55       	subi	r30, 0x57	; 87
    526e:	ff 4f       	sbci	r31, 0xFF	; 255
    5270:	80 81       	ld	r24, Z
    5272:	91 81       	ldd	r25, Z+1	; 0x01
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	8d 93       	st	X+, r24
    527a:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSendString("Add Pass : ");
				_delay_ms(1000);
				i=10000;

				for(f=0 ; f<4 ; f++)
    527c:	de 01       	movw	r26, r28
    527e:	ae 54       	subi	r26, 0x4E	; 78
    5280:	bf 4f       	sbci	r27, 0xFF	; 255
    5282:	fe 01       	movw	r30, r28
    5284:	ee 54       	subi	r30, 0x4E	; 78
    5286:	ff 4f       	sbci	r31, 0xFF	; 255
    5288:	80 81       	ld	r24, Z
    528a:	8f 5f       	subi	r24, 0xFF	; 255
    528c:	8c 93       	st	X, r24
    528e:	fe 01       	movw	r30, r28
    5290:	ee 54       	subi	r30, 0x4E	; 78
    5292:	ff 4f       	sbci	r31, 0xFF	; 255
    5294:	80 81       	ld	r24, Z
    5296:	84 30       	cpi	r24, 0x04	; 4
    5298:	08 f4       	brcc	.+2      	; 0x529c <main+0x18de>
    529a:	a8 cf       	rjmp	.-176    	; 0x51ec <main+0x182e>
					}while(Key == NOT_PRESSED);
					HLCD_voidSendInt(Key);
					i/=10;
					Pass += ( Key*i );
				}
				Add_Pass_EEPROM(Pass);
    529c:	fe 01       	movw	r30, r28
    529e:	e7 55       	subi	r30, 0x57	; 87
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	80 81       	ld	r24, Z
    52a4:	91 81       	ldd	r25, Z+1	; 0x01
    52a6:	0e 94 4c 2b 	call	0x5698	; 0x5698 <Add_Pass_EEPROM>
				MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	60 e0       	ldi	r22, 0x00	; 0
    52ae:	40 e0       	ldi	r20, 0x00	; 0
    52b0:	0e 94 c6 18 	call	0x318c	; 0x318c <MDIO_ErrorS_SetPinValue>
    52b4:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <main+0x7a>

000052b8 <ReadInt_EEPROM>:

}*/
	}
}
u16 ReadInt_EEPROM(u8* address)
{
    52b8:	df 93       	push	r29
    52ba:	cf 93       	push	r28
    52bc:	cd b7       	in	r28, 0x3d	; 61
    52be:	de b7       	in	r29, 0x3e	; 62
    52c0:	68 97       	sbiw	r28, 0x18	; 24
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	de bf       	out	0x3e, r29	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	98 8f       	std	Y+24, r25	; 0x18
    52ce:	8f 8b       	std	Y+23, r24	; 0x17
	u16 N,LocalVar=0,j=1000;
    52d0:	1b 8a       	std	Y+19, r1	; 0x13
    52d2:	1a 8a       	std	Y+18, r1	; 0x12
    52d4:	88 ee       	ldi	r24, 0xE8	; 232
    52d6:	93 e0       	ldi	r25, 0x03	; 3
    52d8:	99 8b       	std	Y+17, r25	; 0x11
    52da:	88 8b       	std	Y+16, r24	; 0x10
	u8 n;
	for(u8 i=0 ;i<4 ;i++)
    52dc:	1f 86       	std	Y+15, r1	; 0x0f
    52de:	a6 c0       	rjmp	.+332    	; 0x542c <ReadInt_EEPROM+0x174>
	{
		EEPROM_voidRead(address+3,&n);
    52e0:	8f 89       	ldd	r24, Y+23	; 0x17
    52e2:	98 8d       	ldd	r25, Y+24	; 0x18
    52e4:	03 96       	adiw	r24, 0x03	; 3
    52e6:	9e 01       	movw	r18, r28
    52e8:	2a 5e       	subi	r18, 0xEA	; 234
    52ea:	3f 4f       	sbci	r19, 0xFF	; 255
    52ec:	b9 01       	movw	r22, r18
    52ee:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_voidRead>
		N=(u16)n*j;
    52f2:	8e 89       	ldd	r24, Y+22	; 0x16
    52f4:	28 2f       	mov	r18, r24
    52f6:	30 e0       	ldi	r19, 0x00	; 0
    52f8:	88 89       	ldd	r24, Y+16	; 0x10
    52fa:	99 89       	ldd	r25, Y+17	; 0x11
    52fc:	ac 01       	movw	r20, r24
    52fe:	24 9f       	mul	r18, r20
    5300:	c0 01       	movw	r24, r0
    5302:	25 9f       	mul	r18, r21
    5304:	90 0d       	add	r25, r0
    5306:	34 9f       	mul	r19, r20
    5308:	90 0d       	add	r25, r0
    530a:	11 24       	eor	r1, r1
    530c:	9d 8b       	std	Y+21, r25	; 0x15
    530e:	8c 8b       	std	Y+20, r24	; 0x14
		LocalVar+=N;
    5310:	2a 89       	ldd	r18, Y+18	; 0x12
    5312:	3b 89       	ldd	r19, Y+19	; 0x13
    5314:	8c 89       	ldd	r24, Y+20	; 0x14
    5316:	9d 89       	ldd	r25, Y+21	; 0x15
    5318:	82 0f       	add	r24, r18
    531a:	93 1f       	adc	r25, r19
    531c:	9b 8b       	std	Y+19, r25	; 0x13
    531e:	8a 8b       	std	Y+18, r24	; 0x12
		j/=10 ;
    5320:	88 89       	ldd	r24, Y+16	; 0x10
    5322:	99 89       	ldd	r25, Y+17	; 0x11
    5324:	2a e0       	ldi	r18, 0x0A	; 10
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	b9 01       	movw	r22, r18
    532a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    532e:	cb 01       	movw	r24, r22
    5330:	99 8b       	std	Y+17, r25	; 0x11
    5332:	88 8b       	std	Y+16, r24	; 0x10
		N=0;
    5334:	1d 8a       	std	Y+21, r1	; 0x15
    5336:	1c 8a       	std	Y+20, r1	; 0x14
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	a0 e7       	ldi	r26, 0x70	; 112
    533e:	b1 e4       	ldi	r27, 0x41	; 65
    5340:	8b 87       	std	Y+11, r24	; 0x0b
    5342:	9c 87       	std	Y+12, r25	; 0x0c
    5344:	ad 87       	std	Y+13, r26	; 0x0d
    5346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5348:	6b 85       	ldd	r22, Y+11	; 0x0b
    534a:	7c 85       	ldd	r23, Y+12	; 0x0c
    534c:	8d 85       	ldd	r24, Y+13	; 0x0d
    534e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	4a ef       	ldi	r20, 0xFA	; 250
    5356:	54 e4       	ldi	r21, 0x44	; 68
    5358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	8f 83       	std	Y+7, r24	; 0x07
    5362:	98 87       	std	Y+8, r25	; 0x08
    5364:	a9 87       	std	Y+9, r26	; 0x09
    5366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5368:	6f 81       	ldd	r22, Y+7	; 0x07
    536a:	78 85       	ldd	r23, Y+8	; 0x08
    536c:	89 85       	ldd	r24, Y+9	; 0x09
    536e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	40 e8       	ldi	r20, 0x80	; 128
    5376:	5f e3       	ldi	r21, 0x3F	; 63
    5378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    537c:	88 23       	and	r24, r24
    537e:	2c f4       	brge	.+10     	; 0x538a <ReadInt_EEPROM+0xd2>
		__ticks = 1;
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	9e 83       	std	Y+6, r25	; 0x06
    5386:	8d 83       	std	Y+5, r24	; 0x05
    5388:	3f c0       	rjmp	.+126    	; 0x5408 <ReadInt_EEPROM+0x150>
	else if (__tmp > 65535)
    538a:	6f 81       	ldd	r22, Y+7	; 0x07
    538c:	78 85       	ldd	r23, Y+8	; 0x08
    538e:	89 85       	ldd	r24, Y+9	; 0x09
    5390:	9a 85       	ldd	r25, Y+10	; 0x0a
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	3f ef       	ldi	r19, 0xFF	; 255
    5396:	4f e7       	ldi	r20, 0x7F	; 127
    5398:	57 e4       	ldi	r21, 0x47	; 71
    539a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    539e:	18 16       	cp	r1, r24
    53a0:	4c f5       	brge	.+82     	; 0x53f4 <ReadInt_EEPROM+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	40 e2       	ldi	r20, 0x20	; 32
    53b0:	51 e4       	ldi	r21, 0x41	; 65
    53b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	bc 01       	movw	r22, r24
    53bc:	cd 01       	movw	r24, r26
    53be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	9e 83       	std	Y+6, r25	; 0x06
    53c8:	8d 83       	std	Y+5, r24	; 0x05
    53ca:	0f c0       	rjmp	.+30     	; 0x53ea <ReadInt_EEPROM+0x132>
    53cc:	88 ec       	ldi	r24, 0xC8	; 200
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	9c 83       	std	Y+4, r25	; 0x04
    53d2:	8b 83       	std	Y+3, r24	; 0x03
    53d4:	8b 81       	ldd	r24, Y+3	; 0x03
    53d6:	9c 81       	ldd	r25, Y+4	; 0x04
    53d8:	01 97       	sbiw	r24, 0x01	; 1
    53da:	f1 f7       	brne	.-4      	; 0x53d8 <ReadInt_EEPROM+0x120>
    53dc:	9c 83       	std	Y+4, r25	; 0x04
    53de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53e0:	8d 81       	ldd	r24, Y+5	; 0x05
    53e2:	9e 81       	ldd	r25, Y+6	; 0x06
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	9e 83       	std	Y+6, r25	; 0x06
    53e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ea:	8d 81       	ldd	r24, Y+5	; 0x05
    53ec:	9e 81       	ldd	r25, Y+6	; 0x06
    53ee:	00 97       	sbiw	r24, 0x00	; 0
    53f0:	69 f7       	brne	.-38     	; 0x53cc <ReadInt_EEPROM+0x114>
    53f2:	14 c0       	rjmp	.+40     	; 0x541c <ReadInt_EEPROM+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f4:	6f 81       	ldd	r22, Y+7	; 0x07
    53f6:	78 85       	ldd	r23, Y+8	; 0x08
    53f8:	89 85       	ldd	r24, Y+9	; 0x09
    53fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    53fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	9e 83       	std	Y+6, r25	; 0x06
    5406:	8d 83       	std	Y+5, r24	; 0x05
    5408:	8d 81       	ldd	r24, Y+5	; 0x05
    540a:	9e 81       	ldd	r25, Y+6	; 0x06
    540c:	9a 83       	std	Y+2, r25	; 0x02
    540e:	89 83       	std	Y+1, r24	; 0x01
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	9a 81       	ldd	r25, Y+2	; 0x02
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <ReadInt_EEPROM+0x15c>
    5418:	9a 83       	std	Y+2, r25	; 0x02
    541a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		address-- ;
    541c:	8f 89       	ldd	r24, Y+23	; 0x17
    541e:	98 8d       	ldd	r25, Y+24	; 0x18
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	98 8f       	std	Y+24, r25	; 0x18
    5424:	8f 8b       	std	Y+23, r24	; 0x17
}
u16 ReadInt_EEPROM(u8* address)
{
	u16 N,LocalVar=0,j=1000;
	u8 n;
	for(u8 i=0 ;i<4 ;i++)
    5426:	8f 85       	ldd	r24, Y+15	; 0x0f
    5428:	8f 5f       	subi	r24, 0xFF	; 255
    542a:	8f 87       	std	Y+15, r24	; 0x0f
    542c:	8f 85       	ldd	r24, Y+15	; 0x0f
    542e:	84 30       	cpi	r24, 0x04	; 4
    5430:	08 f4       	brcc	.+2      	; 0x5434 <ReadInt_EEPROM+0x17c>
    5432:	56 cf       	rjmp	.-340    	; 0x52e0 <ReadInt_EEPROM+0x28>
		j/=10 ;
		N=0;
		_delay_ms(15);
		address-- ;
	}
	return LocalVar ;
    5434:	8a 89       	ldd	r24, Y+18	; 0x12
    5436:	9b 89       	ldd	r25, Y+19	; 0x13
}
    5438:	68 96       	adiw	r28, 0x18	; 24
    543a:	0f b6       	in	r0, 0x3f	; 63
    543c:	f8 94       	cli
    543e:	de bf       	out	0x3e, r29	; 62
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	cd bf       	out	0x3d, r28	; 61
    5444:	cf 91       	pop	r28
    5446:	df 91       	pop	r29
    5448:	08 95       	ret

0000544a <WriteInt_EEPROM>:
void WriteInt_EEPROM(u16 number,u8* address)
{
    544a:	df 93       	push	r29
    544c:	cf 93       	push	r28
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	64 97       	sbiw	r28, 0x14	; 20
    5454:	0f b6       	in	r0, 0x3f	; 63
    5456:	f8 94       	cli
    5458:	de bf       	out	0x3e, r29	; 62
    545a:	0f be       	out	0x3f, r0	; 63
    545c:	cd bf       	out	0x3d, r28	; 61
    545e:	9a 8b       	std	Y+18, r25	; 0x12
    5460:	89 8b       	std	Y+17, r24	; 0x11
    5462:	7c 8b       	std	Y+20, r23	; 0x14
    5464:	6b 8b       	std	Y+19, r22	; 0x13
	u8 LocalVar;
	//u8* pointer=address;
	for(u8 i=0 ; i<4 ; i++)
    5466:	1f 86       	std	Y+15, r1	; 0x0f
    5468:	93 c0       	rjmp	.+294    	; 0x5590 <WriteInt_EEPROM+0x146>
	{
		LocalVar=number%10 ;
    546a:	89 89       	ldd	r24, Y+17	; 0x11
    546c:	9a 89       	ldd	r25, Y+18	; 0x12
    546e:	2a e0       	ldi	r18, 0x0A	; 10
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	b9 01       	movw	r22, r18
    5474:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    5478:	88 8b       	std	Y+16, r24	; 0x10
		number/=10 ;
    547a:	89 89       	ldd	r24, Y+17	; 0x11
    547c:	9a 89       	ldd	r25, Y+18	; 0x12
    547e:	2a e0       	ldi	r18, 0x0A	; 10
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	b9 01       	movw	r22, r18
    5484:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    5488:	cb 01       	movw	r24, r22
    548a:	9a 8b       	std	Y+18, r25	; 0x12
    548c:	89 8b       	std	Y+17, r24	; 0x11
		EEPROM_voidWrite(LocalVar , address);
    548e:	8b 89       	ldd	r24, Y+19	; 0x13
    5490:	9c 89       	ldd	r25, Y+20	; 0x14
    5492:	98 2f       	mov	r25, r24
    5494:	88 89       	ldd	r24, Y+16	; 0x10
    5496:	69 2f       	mov	r22, r25
    5498:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEPROM_voidWrite>
    549c:	80 e0       	ldi	r24, 0x00	; 0
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	a0 e7       	ldi	r26, 0x70	; 112
    54a2:	b1 e4       	ldi	r27, 0x41	; 65
    54a4:	8b 87       	std	Y+11, r24	; 0x0b
    54a6:	9c 87       	std	Y+12, r25	; 0x0c
    54a8:	ad 87       	std	Y+13, r26	; 0x0d
    54aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    54ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	4a ef       	ldi	r20, 0xFA	; 250
    54ba:	54 e4       	ldi	r21, 0x44	; 68
    54bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	8f 83       	std	Y+7, r24	; 0x07
    54c6:	98 87       	std	Y+8, r25	; 0x08
    54c8:	a9 87       	std	Y+9, r26	; 0x09
    54ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54cc:	6f 81       	ldd	r22, Y+7	; 0x07
    54ce:	78 85       	ldd	r23, Y+8	; 0x08
    54d0:	89 85       	ldd	r24, Y+9	; 0x09
    54d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	40 e8       	ldi	r20, 0x80	; 128
    54da:	5f e3       	ldi	r21, 0x3F	; 63
    54dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54e0:	88 23       	and	r24, r24
    54e2:	2c f4       	brge	.+10     	; 0x54ee <WriteInt_EEPROM+0xa4>
		__ticks = 1;
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	9e 83       	std	Y+6, r25	; 0x06
    54ea:	8d 83       	std	Y+5, r24	; 0x05
    54ec:	3f c0       	rjmp	.+126    	; 0x556c <WriteInt_EEPROM+0x122>
	else if (__tmp > 65535)
    54ee:	6f 81       	ldd	r22, Y+7	; 0x07
    54f0:	78 85       	ldd	r23, Y+8	; 0x08
    54f2:	89 85       	ldd	r24, Y+9	; 0x09
    54f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	3f ef       	ldi	r19, 0xFF	; 255
    54fa:	4f e7       	ldi	r20, 0x7F	; 127
    54fc:	57 e4       	ldi	r21, 0x47	; 71
    54fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5502:	18 16       	cp	r1, r24
    5504:	4c f5       	brge	.+82     	; 0x5558 <WriteInt_EEPROM+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5506:	6b 85       	ldd	r22, Y+11	; 0x0b
    5508:	7c 85       	ldd	r23, Y+12	; 0x0c
    550a:	8d 85       	ldd	r24, Y+13	; 0x0d
    550c:	9e 85       	ldd	r25, Y+14	; 0x0e
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	40 e2       	ldi	r20, 0x20	; 32
    5514:	51 e4       	ldi	r21, 0x41	; 65
    5516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	bc 01       	movw	r22, r24
    5520:	cd 01       	movw	r24, r26
    5522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	9e 83       	std	Y+6, r25	; 0x06
    552c:	8d 83       	std	Y+5, r24	; 0x05
    552e:	0f c0       	rjmp	.+30     	; 0x554e <WriteInt_EEPROM+0x104>
    5530:	88 ec       	ldi	r24, 0xC8	; 200
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	9c 83       	std	Y+4, r25	; 0x04
    5536:	8b 83       	std	Y+3, r24	; 0x03
    5538:	8b 81       	ldd	r24, Y+3	; 0x03
    553a:	9c 81       	ldd	r25, Y+4	; 0x04
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	f1 f7       	brne	.-4      	; 0x553c <WriteInt_EEPROM+0xf2>
    5540:	9c 83       	std	Y+4, r25	; 0x04
    5542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5544:	8d 81       	ldd	r24, Y+5	; 0x05
    5546:	9e 81       	ldd	r25, Y+6	; 0x06
    5548:	01 97       	sbiw	r24, 0x01	; 1
    554a:	9e 83       	std	Y+6, r25	; 0x06
    554c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    554e:	8d 81       	ldd	r24, Y+5	; 0x05
    5550:	9e 81       	ldd	r25, Y+6	; 0x06
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	69 f7       	brne	.-38     	; 0x5530 <WriteInt_EEPROM+0xe6>
    5556:	14 c0       	rjmp	.+40     	; 0x5580 <WriteInt_EEPROM+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5558:	6f 81       	ldd	r22, Y+7	; 0x07
    555a:	78 85       	ldd	r23, Y+8	; 0x08
    555c:	89 85       	ldd	r24, Y+9	; 0x09
    555e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	9e 83       	std	Y+6, r25	; 0x06
    556a:	8d 83       	std	Y+5, r24	; 0x05
    556c:	8d 81       	ldd	r24, Y+5	; 0x05
    556e:	9e 81       	ldd	r25, Y+6	; 0x06
    5570:	9a 83       	std	Y+2, r25	; 0x02
    5572:	89 83       	std	Y+1, r24	; 0x01
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	9a 81       	ldd	r25, Y+2	; 0x02
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	f1 f7       	brne	.-4      	; 0x5578 <WriteInt_EEPROM+0x12e>
    557c:	9a 83       	std	Y+2, r25	; 0x02
    557e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		address++ ;
    5580:	8b 89       	ldd	r24, Y+19	; 0x13
    5582:	9c 89       	ldd	r25, Y+20	; 0x14
    5584:	01 96       	adiw	r24, 0x01	; 1
    5586:	9c 8b       	std	Y+20, r25	; 0x14
    5588:	8b 8b       	std	Y+19, r24	; 0x13
}
void WriteInt_EEPROM(u16 number,u8* address)
{
	u8 LocalVar;
	//u8* pointer=address;
	for(u8 i=0 ; i<4 ; i++)
    558a:	8f 85       	ldd	r24, Y+15	; 0x0f
    558c:	8f 5f       	subi	r24, 0xFF	; 255
    558e:	8f 87       	std	Y+15, r24	; 0x0f
    5590:	8f 85       	ldd	r24, Y+15	; 0x0f
    5592:	84 30       	cpi	r24, 0x04	; 4
    5594:	08 f4       	brcc	.+2      	; 0x5598 <WriteInt_EEPROM+0x14e>
    5596:	69 cf       	rjmp	.-302    	; 0x546a <WriteInt_EEPROM+0x20>
		number/=10 ;
		EEPROM_voidWrite(LocalVar , address);
		_delay_ms(15);
		address++ ;
	}
}
    5598:	64 96       	adiw	r28, 0x14	; 20
    559a:	0f b6       	in	r0, 0x3f	; 63
    559c:	f8 94       	cli
    559e:	de bf       	out	0x3e, r29	; 62
    55a0:	0f be       	out	0x3f, r0	; 63
    55a2:	cd bf       	out	0x3d, r28	; 61
    55a4:	cf 91       	pop	r28
    55a6:	df 91       	pop	r29
    55a8:	08 95       	ret

000055aa <Add_ID_EEPROM>:
void Add_ID_EEPROM(u16 ID)
{
    55aa:	df 93       	push	r29
    55ac:	cf 93       	push	r28
    55ae:	00 d0       	rcall	.+0      	; 0x55b0 <Add_ID_EEPROM+0x6>
    55b0:	00 d0       	rcall	.+0      	; 0x55b2 <Add_ID_EEPROM+0x8>
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	9a 83       	std	Y+2, r25	; 0x02
    55b8:	89 83       	std	Y+1, r24	; 0x01
	flag_AddID++ ;
    55ba:	80 91 0f 01 	lds	r24, 0x010F
    55be:	8f 5f       	subi	r24, 0xFF	; 255
    55c0:	80 93 0f 01 	sts	0x010F, r24
	switch(flag_AddID)
    55c4:	80 91 0f 01 	lds	r24, 0x010F
    55c8:	28 2f       	mov	r18, r24
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	3c 83       	std	Y+4, r19	; 0x04
    55ce:	2b 83       	std	Y+3, r18	; 0x03
    55d0:	8b 81       	ldd	r24, Y+3	; 0x03
    55d2:	9c 81       	ldd	r25, Y+4	; 0x04
    55d4:	83 30       	cpi	r24, 0x03	; 3
    55d6:	91 05       	cpc	r25, r1
    55d8:	91 f1       	breq	.+100    	; 0x563e <Add_ID_EEPROM+0x94>
    55da:	2b 81       	ldd	r18, Y+3	; 0x03
    55dc:	3c 81       	ldd	r19, Y+4	; 0x04
    55de:	24 30       	cpi	r18, 0x04	; 4
    55e0:	31 05       	cpc	r19, r1
    55e2:	5c f4       	brge	.+22     	; 0x55fa <Add_ID_EEPROM+0x50>
    55e4:	8b 81       	ldd	r24, Y+3	; 0x03
    55e6:	9c 81       	ldd	r25, Y+4	; 0x04
    55e8:	81 30       	cpi	r24, 0x01	; 1
    55ea:	91 05       	cpc	r25, r1
    55ec:	89 f0       	breq	.+34     	; 0x5610 <Add_ID_EEPROM+0x66>
    55ee:	2b 81       	ldd	r18, Y+3	; 0x03
    55f0:	3c 81       	ldd	r19, Y+4	; 0x04
    55f2:	22 30       	cpi	r18, 0x02	; 2
    55f4:	31 05       	cpc	r19, r1
    55f6:	b1 f0       	breq	.+44     	; 0x5624 <Add_ID_EEPROM+0x7a>
    55f8:	48 c0       	rjmp	.+144    	; 0x568a <Add_ID_EEPROM+0xe0>
    55fa:	8b 81       	ldd	r24, Y+3	; 0x03
    55fc:	9c 81       	ldd	r25, Y+4	; 0x04
    55fe:	84 30       	cpi	r24, 0x04	; 4
    5600:	91 05       	cpc	r25, r1
    5602:	51 f1       	breq	.+84     	; 0x5658 <Add_ID_EEPROM+0xae>
    5604:	2b 81       	ldd	r18, Y+3	; 0x03
    5606:	3c 81       	ldd	r19, Y+4	; 0x04
    5608:	25 30       	cpi	r18, 0x05	; 5
    560a:	31 05       	cpc	r19, r1
    560c:	91 f1       	breq	.+100    	; 0x5672 <Add_ID_EEPROM+0xc8>
    560e:	3d c0       	rjmp	.+122    	; 0x568a <Add_ID_EEPROM+0xe0>
	{
	case 1 : WriteInt_EEPROM(ID,ptr);break;
    5610:	20 91 fb 00 	lds	r18, 0x00FB
    5614:	30 91 fc 00 	lds	r19, 0x00FC
    5618:	89 81       	ldd	r24, Y+1	; 0x01
    561a:	9a 81       	ldd	r25, Y+2	; 0x02
    561c:	b9 01       	movw	r22, r18
    561e:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    5622:	33 c0       	rjmp	.+102    	; 0x568a <Add_ID_EEPROM+0xe0>
	case 2 : WriteInt_EEPROM(ID,ptr+8);break;
    5624:	80 91 fb 00 	lds	r24, 0x00FB
    5628:	90 91 fc 00 	lds	r25, 0x00FC
    562c:	9c 01       	movw	r18, r24
    562e:	28 5f       	subi	r18, 0xF8	; 248
    5630:	3f 4f       	sbci	r19, 0xFF	; 255
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	9a 81       	ldd	r25, Y+2	; 0x02
    5636:	b9 01       	movw	r22, r18
    5638:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    563c:	26 c0       	rjmp	.+76     	; 0x568a <Add_ID_EEPROM+0xe0>
	case 3 : WriteInt_EEPROM(ID,ptr+16);break;
    563e:	80 91 fb 00 	lds	r24, 0x00FB
    5642:	90 91 fc 00 	lds	r25, 0x00FC
    5646:	9c 01       	movw	r18, r24
    5648:	20 5f       	subi	r18, 0xF0	; 240
    564a:	3f 4f       	sbci	r19, 0xFF	; 255
    564c:	89 81       	ldd	r24, Y+1	; 0x01
    564e:	9a 81       	ldd	r25, Y+2	; 0x02
    5650:	b9 01       	movw	r22, r18
    5652:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    5656:	19 c0       	rjmp	.+50     	; 0x568a <Add_ID_EEPROM+0xe0>
	case 4 : WriteInt_EEPROM(ID,ptr+24);break;
    5658:	80 91 fb 00 	lds	r24, 0x00FB
    565c:	90 91 fc 00 	lds	r25, 0x00FC
    5660:	9c 01       	movw	r18, r24
    5662:	28 5e       	subi	r18, 0xE8	; 232
    5664:	3f 4f       	sbci	r19, 0xFF	; 255
    5666:	89 81       	ldd	r24, Y+1	; 0x01
    5668:	9a 81       	ldd	r25, Y+2	; 0x02
    566a:	b9 01       	movw	r22, r18
    566c:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    5670:	0c c0       	rjmp	.+24     	; 0x568a <Add_ID_EEPROM+0xe0>
	case 5 : WriteInt_EEPROM(ID,ptr+32);break;
    5672:	80 91 fb 00 	lds	r24, 0x00FB
    5676:	90 91 fc 00 	lds	r25, 0x00FC
    567a:	9c 01       	movw	r18, r24
    567c:	20 5e       	subi	r18, 0xE0	; 224
    567e:	3f 4f       	sbci	r19, 0xFF	; 255
    5680:	89 81       	ldd	r24, Y+1	; 0x01
    5682:	9a 81       	ldd	r25, Y+2	; 0x02
    5684:	b9 01       	movw	r22, r18
    5686:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
	default : break ;
	}



}
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	cf 91       	pop	r28
    5694:	df 91       	pop	r29
    5696:	08 95       	ret

00005698 <Add_Pass_EEPROM>:
void Add_Pass_EEPROM(u16 Pass)
{
    5698:	df 93       	push	r29
    569a:	cf 93       	push	r28
    569c:	00 d0       	rcall	.+0      	; 0x569e <Add_Pass_EEPROM+0x6>
    569e:	00 d0       	rcall	.+0      	; 0x56a0 <Add_Pass_EEPROM+0x8>
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	9a 83       	std	Y+2, r25	; 0x02
    56a6:	89 83       	std	Y+1, r24	; 0x01
	switch(flag_AddID)
    56a8:	80 91 0f 01 	lds	r24, 0x010F
    56ac:	28 2f       	mov	r18, r24
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	3c 83       	std	Y+4, r19	; 0x04
    56b2:	2b 83       	std	Y+3, r18	; 0x03
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	9c 81       	ldd	r25, Y+4	; 0x04
    56b8:	83 30       	cpi	r24, 0x03	; 3
    56ba:	91 05       	cpc	r25, r1
    56bc:	a9 f1       	breq	.+106    	; 0x5728 <Add_Pass_EEPROM+0x90>
    56be:	2b 81       	ldd	r18, Y+3	; 0x03
    56c0:	3c 81       	ldd	r19, Y+4	; 0x04
    56c2:	24 30       	cpi	r18, 0x04	; 4
    56c4:	31 05       	cpc	r19, r1
    56c6:	5c f4       	brge	.+22     	; 0x56de <Add_Pass_EEPROM+0x46>
    56c8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ca:	9c 81       	ldd	r25, Y+4	; 0x04
    56cc:	81 30       	cpi	r24, 0x01	; 1
    56ce:	91 05       	cpc	r25, r1
    56d0:	89 f0       	breq	.+34     	; 0x56f4 <Add_Pass_EEPROM+0x5c>
    56d2:	2b 81       	ldd	r18, Y+3	; 0x03
    56d4:	3c 81       	ldd	r19, Y+4	; 0x04
    56d6:	22 30       	cpi	r18, 0x02	; 2
    56d8:	31 05       	cpc	r19, r1
    56da:	c9 f0       	breq	.+50     	; 0x570e <Add_Pass_EEPROM+0x76>
    56dc:	4b c0       	rjmp	.+150    	; 0x5774 <Add_Pass_EEPROM+0xdc>
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	9c 81       	ldd	r25, Y+4	; 0x04
    56e2:	84 30       	cpi	r24, 0x04	; 4
    56e4:	91 05       	cpc	r25, r1
    56e6:	69 f1       	breq	.+90     	; 0x5742 <Add_Pass_EEPROM+0xaa>
    56e8:	2b 81       	ldd	r18, Y+3	; 0x03
    56ea:	3c 81       	ldd	r19, Y+4	; 0x04
    56ec:	25 30       	cpi	r18, 0x05	; 5
    56ee:	31 05       	cpc	r19, r1
    56f0:	a9 f1       	breq	.+106    	; 0x575c <Add_Pass_EEPROM+0xc4>
    56f2:	40 c0       	rjmp	.+128    	; 0x5774 <Add_Pass_EEPROM+0xdc>
	{
	case 1 : WriteInt_EEPROM(Pass,ptr+4);break;
    56f4:	80 91 fb 00 	lds	r24, 0x00FB
    56f8:	90 91 fc 00 	lds	r25, 0x00FC
    56fc:	9c 01       	movw	r18, r24
    56fe:	2c 5f       	subi	r18, 0xFC	; 252
    5700:	3f 4f       	sbci	r19, 0xFF	; 255
    5702:	89 81       	ldd	r24, Y+1	; 0x01
    5704:	9a 81       	ldd	r25, Y+2	; 0x02
    5706:	b9 01       	movw	r22, r18
    5708:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    570c:	33 c0       	rjmp	.+102    	; 0x5774 <Add_Pass_EEPROM+0xdc>
	case 2 : WriteInt_EEPROM(Pass,ptr+12);break;
    570e:	80 91 fb 00 	lds	r24, 0x00FB
    5712:	90 91 fc 00 	lds	r25, 0x00FC
    5716:	9c 01       	movw	r18, r24
    5718:	24 5f       	subi	r18, 0xF4	; 244
    571a:	3f 4f       	sbci	r19, 0xFF	; 255
    571c:	89 81       	ldd	r24, Y+1	; 0x01
    571e:	9a 81       	ldd	r25, Y+2	; 0x02
    5720:	b9 01       	movw	r22, r18
    5722:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    5726:	26 c0       	rjmp	.+76     	; 0x5774 <Add_Pass_EEPROM+0xdc>
	case 3 : WriteInt_EEPROM(Pass,ptr+20);break;
    5728:	80 91 fb 00 	lds	r24, 0x00FB
    572c:	90 91 fc 00 	lds	r25, 0x00FC
    5730:	9c 01       	movw	r18, r24
    5732:	2c 5e       	subi	r18, 0xEC	; 236
    5734:	3f 4f       	sbci	r19, 0xFF	; 255
    5736:	89 81       	ldd	r24, Y+1	; 0x01
    5738:	9a 81       	ldd	r25, Y+2	; 0x02
    573a:	b9 01       	movw	r22, r18
    573c:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    5740:	19 c0       	rjmp	.+50     	; 0x5774 <Add_Pass_EEPROM+0xdc>
	case 4 : WriteInt_EEPROM(Pass,ptr+28);break;
    5742:	80 91 fb 00 	lds	r24, 0x00FB
    5746:	90 91 fc 00 	lds	r25, 0x00FC
    574a:	9c 01       	movw	r18, r24
    574c:	24 5e       	subi	r18, 0xE4	; 228
    574e:	3f 4f       	sbci	r19, 0xFF	; 255
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	9a 81       	ldd	r25, Y+2	; 0x02
    5754:	b9 01       	movw	r22, r18
    5756:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
    575a:	0c c0       	rjmp	.+24     	; 0x5774 <Add_Pass_EEPROM+0xdc>
	case 5 : WriteInt_EEPROM(Pass,ptr+36);break;
    575c:	80 91 fb 00 	lds	r24, 0x00FB
    5760:	90 91 fc 00 	lds	r25, 0x00FC
    5764:	9c 01       	movw	r18, r24
    5766:	2c 5d       	subi	r18, 0xDC	; 220
    5768:	3f 4f       	sbci	r19, 0xFF	; 255
    576a:	89 81       	ldd	r24, Y+1	; 0x01
    576c:	9a 81       	ldd	r25, Y+2	; 0x02
    576e:	b9 01       	movw	r22, r18
    5770:	0e 94 25 2a 	call	0x544a	; 0x544a <WriteInt_EEPROM>
	default : break ;
	}

}
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	0f 90       	pop	r0
    577a:	0f 90       	pop	r0
    577c:	cf 91       	pop	r28
    577e:	df 91       	pop	r29
    5780:	08 95       	ret

00005782 <Check_ID>:
void Check_ID(u16 User_ID)
{
    5782:	df 93       	push	r29
    5784:	cf 93       	push	r28
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	27 97       	sbiw	r28, 0x07	; 7
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	f8 94       	cli
    5790:	de bf       	out	0x3e, r29	; 62
    5792:	0f be       	out	0x3f, r0	; 63
    5794:	cd bf       	out	0x3d, r28	; 61
    5796:	9f 83       	std	Y+7, r25	; 0x07
    5798:	8e 83       	std	Y+6, r24	; 0x06
	u8 *address=ptr ;
    579a:	80 91 fb 00 	lds	r24, 0x00FB
    579e:	90 91 fc 00 	lds	r25, 0x00FC
    57a2:	9d 83       	std	Y+5, r25	; 0x05
    57a4:	8c 83       	std	Y+4, r24	; 0x04
	u16 ID=0;
    57a6:	1b 82       	std	Y+3, r1	; 0x03
    57a8:	1a 82       	std	Y+2, r1	; 0x02
	flag_User=0;
    57aa:	10 92 0e 01 	sts	0x010E, r1
	for(u8 i=0 ; i<5 ; i++)
    57ae:	19 82       	std	Y+1, r1	; 0x01
    57b0:	19 c0       	rjmp	.+50     	; 0x57e4 <Check_ID+0x62>
	{
		ID=ReadInt_EEPROM(address);
    57b2:	8c 81       	ldd	r24, Y+4	; 0x04
    57b4:	9d 81       	ldd	r25, Y+5	; 0x05
    57b6:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    57ba:	9b 83       	std	Y+3, r25	; 0x03
    57bc:	8a 83       	std	Y+2, r24	; 0x02
		if(ID==User_ID)
    57be:	2a 81       	ldd	r18, Y+2	; 0x02
    57c0:	3b 81       	ldd	r19, Y+3	; 0x03
    57c2:	8e 81       	ldd	r24, Y+6	; 0x06
    57c4:	9f 81       	ldd	r25, Y+7	; 0x07
    57c6:	28 17       	cp	r18, r24
    57c8:	39 07       	cpc	r19, r25
    57ca:	21 f4       	brne	.+8      	; 0x57d4 <Check_ID+0x52>
		{
			flag_User=i+1 ;
    57cc:	89 81       	ldd	r24, Y+1	; 0x01
    57ce:	8f 5f       	subi	r24, 0xFF	; 255
    57d0:	80 93 0e 01 	sts	0x010E, r24
		}
		address+=8 ;
    57d4:	8c 81       	ldd	r24, Y+4	; 0x04
    57d6:	9d 81       	ldd	r25, Y+5	; 0x05
    57d8:	08 96       	adiw	r24, 0x08	; 8
    57da:	9d 83       	std	Y+5, r25	; 0x05
    57dc:	8c 83       	std	Y+4, r24	; 0x04
void Check_ID(u16 User_ID)
{
	u8 *address=ptr ;
	u16 ID=0;
	flag_User=0;
	for(u8 i=0 ; i<5 ; i++)
    57de:	89 81       	ldd	r24, Y+1	; 0x01
    57e0:	8f 5f       	subi	r24, 0xFF	; 255
    57e2:	89 83       	std	Y+1, r24	; 0x01
    57e4:	89 81       	ldd	r24, Y+1	; 0x01
    57e6:	85 30       	cpi	r24, 0x05	; 5
    57e8:	20 f3       	brcs	.-56     	; 0x57b2 <Check_ID+0x30>
		{
			flag_User=i+1 ;
		}
		address+=8 ;
	}
}
    57ea:	27 96       	adiw	r28, 0x07	; 7
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	f8 94       	cli
    57f0:	de bf       	out	0x3e, r29	; 62
    57f2:	0f be       	out	0x3f, r0	; 63
    57f4:	cd bf       	out	0x3d, r28	; 61
    57f6:	cf 91       	pop	r28
    57f8:	df 91       	pop	r29
    57fa:	08 95       	ret

000057fc <Check_Pass>:
void Check_Pass(u16 User_Pass)
{
    57fc:	df 93       	push	r29
    57fe:	cf 93       	push	r28
    5800:	00 d0       	rcall	.+0      	; 0x5802 <Check_Pass+0x6>
    5802:	00 d0       	rcall	.+0      	; 0x5804 <Check_Pass+0x8>
    5804:	00 d0       	rcall	.+0      	; 0x5806 <Check_Pass+0xa>
    5806:	cd b7       	in	r28, 0x3d	; 61
    5808:	de b7       	in	r29, 0x3e	; 62
    580a:	9c 83       	std	Y+4, r25	; 0x04
    580c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Pass=0 ;
    580e:	1a 82       	std	Y+2, r1	; 0x02
    5810:	19 82       	std	Y+1, r1	; 0x01
	switch(flag_User)
    5812:	80 91 0e 01 	lds	r24, 0x010E
    5816:	28 2f       	mov	r18, r24
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	3e 83       	std	Y+6, r19	; 0x06
    581c:	2d 83       	std	Y+5, r18	; 0x05
    581e:	8d 81       	ldd	r24, Y+5	; 0x05
    5820:	9e 81       	ldd	r25, Y+6	; 0x06
    5822:	83 30       	cpi	r24, 0x03	; 3
    5824:	91 05       	cpc	r25, r1
    5826:	79 f1       	breq	.+94     	; 0x5886 <Check_Pass+0x8a>
    5828:	2d 81       	ldd	r18, Y+5	; 0x05
    582a:	3e 81       	ldd	r19, Y+6	; 0x06
    582c:	24 30       	cpi	r18, 0x04	; 4
    582e:	31 05       	cpc	r19, r1
    5830:	5c f4       	brge	.+22     	; 0x5848 <Check_Pass+0x4c>
    5832:	8d 81       	ldd	r24, Y+5	; 0x05
    5834:	9e 81       	ldd	r25, Y+6	; 0x06
    5836:	81 30       	cpi	r24, 0x01	; 1
    5838:	91 05       	cpc	r25, r1
    583a:	89 f0       	breq	.+34     	; 0x585e <Check_Pass+0x62>
    583c:	2d 81       	ldd	r18, Y+5	; 0x05
    583e:	3e 81       	ldd	r19, Y+6	; 0x06
    5840:	22 30       	cpi	r18, 0x02	; 2
    5842:	31 05       	cpc	r19, r1
    5844:	b1 f0       	breq	.+44     	; 0x5872 <Check_Pass+0x76>
    5846:	3c c0       	rjmp	.+120    	; 0x58c0 <Check_Pass+0xc4>
    5848:	8d 81       	ldd	r24, Y+5	; 0x05
    584a:	9e 81       	ldd	r25, Y+6	; 0x06
    584c:	84 30       	cpi	r24, 0x04	; 4
    584e:	91 05       	cpc	r25, r1
    5850:	21 f1       	breq	.+72     	; 0x589a <Check_Pass+0x9e>
    5852:	2d 81       	ldd	r18, Y+5	; 0x05
    5854:	3e 81       	ldd	r19, Y+6	; 0x06
    5856:	25 30       	cpi	r18, 0x05	; 5
    5858:	31 05       	cpc	r19, r1
    585a:	49 f1       	breq	.+82     	; 0x58ae <Check_Pass+0xb2>
    585c:	31 c0       	rjmp	.+98     	; 0x58c0 <Check_Pass+0xc4>
	{
	case 1 : Pass=ReadInt_EEPROM(ptr+4);break;
    585e:	80 91 fb 00 	lds	r24, 0x00FB
    5862:	90 91 fc 00 	lds	r25, 0x00FC
    5866:	04 96       	adiw	r24, 0x04	; 4
    5868:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    586c:	9a 83       	std	Y+2, r25	; 0x02
    586e:	89 83       	std	Y+1, r24	; 0x01
    5870:	27 c0       	rjmp	.+78     	; 0x58c0 <Check_Pass+0xc4>
	case 2 : Pass=ReadInt_EEPROM(ptr+12);break;
    5872:	80 91 fb 00 	lds	r24, 0x00FB
    5876:	90 91 fc 00 	lds	r25, 0x00FC
    587a:	0c 96       	adiw	r24, 0x0c	; 12
    587c:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    5880:	9a 83       	std	Y+2, r25	; 0x02
    5882:	89 83       	std	Y+1, r24	; 0x01
    5884:	1d c0       	rjmp	.+58     	; 0x58c0 <Check_Pass+0xc4>
	case 3 : Pass=ReadInt_EEPROM(ptr+20);break;
    5886:	80 91 fb 00 	lds	r24, 0x00FB
    588a:	90 91 fc 00 	lds	r25, 0x00FC
    588e:	44 96       	adiw	r24, 0x14	; 20
    5890:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    5894:	9a 83       	std	Y+2, r25	; 0x02
    5896:	89 83       	std	Y+1, r24	; 0x01
    5898:	13 c0       	rjmp	.+38     	; 0x58c0 <Check_Pass+0xc4>
	case 4 : Pass=ReadInt_EEPROM(ptr+28);break;
    589a:	80 91 fb 00 	lds	r24, 0x00FB
    589e:	90 91 fc 00 	lds	r25, 0x00FC
    58a2:	4c 96       	adiw	r24, 0x1c	; 28
    58a4:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    58a8:	9a 83       	std	Y+2, r25	; 0x02
    58aa:	89 83       	std	Y+1, r24	; 0x01
    58ac:	09 c0       	rjmp	.+18     	; 0x58c0 <Check_Pass+0xc4>
	case 5 : Pass=ReadInt_EEPROM(ptr+36);break;
    58ae:	80 91 fb 00 	lds	r24, 0x00FB
    58b2:	90 91 fc 00 	lds	r25, 0x00FC
    58b6:	84 96       	adiw	r24, 0x24	; 36
    58b8:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <ReadInt_EEPROM>
    58bc:	9a 83       	std	Y+2, r25	; 0x02
    58be:	89 83       	std	Y+1, r24	; 0x01
	default : break;
	}
	if(User_Pass == Pass)
    58c0:	2b 81       	ldd	r18, Y+3	; 0x03
    58c2:	3c 81       	ldd	r19, Y+4	; 0x04
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
    58c6:	9a 81       	ldd	r25, Y+2	; 0x02
    58c8:	28 17       	cp	r18, r24
    58ca:	39 07       	cpc	r19, r25
    58cc:	19 f4       	brne	.+6      	; 0x58d4 <Check_Pass+0xd8>
	{
		flag_CorrectPass=1 ;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	80 93 10 01 	sts	0x0110, r24
	}
}
    58d4:	26 96       	adiw	r28, 0x06	; 6
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	f8 94       	cli
    58da:	de bf       	out	0x3e, r29	; 62
    58dc:	0f be       	out	0x3f, r0	; 63
    58de:	cd bf       	out	0x3d, r28	; 61
    58e0:	cf 91       	pop	r28
    58e2:	df 91       	pop	r29
    58e4:	08 95       	ret

000058e6 <__mulsi3>:
    58e6:	62 9f       	mul	r22, r18
    58e8:	d0 01       	movw	r26, r0
    58ea:	73 9f       	mul	r23, r19
    58ec:	f0 01       	movw	r30, r0
    58ee:	82 9f       	mul	r24, r18
    58f0:	e0 0d       	add	r30, r0
    58f2:	f1 1d       	adc	r31, r1
    58f4:	64 9f       	mul	r22, r20
    58f6:	e0 0d       	add	r30, r0
    58f8:	f1 1d       	adc	r31, r1
    58fa:	92 9f       	mul	r25, r18
    58fc:	f0 0d       	add	r31, r0
    58fe:	83 9f       	mul	r24, r19
    5900:	f0 0d       	add	r31, r0
    5902:	74 9f       	mul	r23, r20
    5904:	f0 0d       	add	r31, r0
    5906:	65 9f       	mul	r22, r21
    5908:	f0 0d       	add	r31, r0
    590a:	99 27       	eor	r25, r25
    590c:	72 9f       	mul	r23, r18
    590e:	b0 0d       	add	r27, r0
    5910:	e1 1d       	adc	r30, r1
    5912:	f9 1f       	adc	r31, r25
    5914:	63 9f       	mul	r22, r19
    5916:	b0 0d       	add	r27, r0
    5918:	e1 1d       	adc	r30, r1
    591a:	f9 1f       	adc	r31, r25
    591c:	bd 01       	movw	r22, r26
    591e:	cf 01       	movw	r24, r30
    5920:	11 24       	eor	r1, r1
    5922:	08 95       	ret

00005924 <__udivmodhi4>:
    5924:	aa 1b       	sub	r26, r26
    5926:	bb 1b       	sub	r27, r27
    5928:	51 e1       	ldi	r21, 0x11	; 17
    592a:	07 c0       	rjmp	.+14     	; 0x593a <__udivmodhi4_ep>

0000592c <__udivmodhi4_loop>:
    592c:	aa 1f       	adc	r26, r26
    592e:	bb 1f       	adc	r27, r27
    5930:	a6 17       	cp	r26, r22
    5932:	b7 07       	cpc	r27, r23
    5934:	10 f0       	brcs	.+4      	; 0x593a <__udivmodhi4_ep>
    5936:	a6 1b       	sub	r26, r22
    5938:	b7 0b       	sbc	r27, r23

0000593a <__udivmodhi4_ep>:
    593a:	88 1f       	adc	r24, r24
    593c:	99 1f       	adc	r25, r25
    593e:	5a 95       	dec	r21
    5940:	a9 f7       	brne	.-22     	; 0x592c <__udivmodhi4_loop>
    5942:	80 95       	com	r24
    5944:	90 95       	com	r25
    5946:	bc 01       	movw	r22, r24
    5948:	cd 01       	movw	r24, r26
    594a:	08 95       	ret

0000594c <__udivmodsi4>:
    594c:	a1 e2       	ldi	r26, 0x21	; 33
    594e:	1a 2e       	mov	r1, r26
    5950:	aa 1b       	sub	r26, r26
    5952:	bb 1b       	sub	r27, r27
    5954:	fd 01       	movw	r30, r26
    5956:	0d c0       	rjmp	.+26     	; 0x5972 <__udivmodsi4_ep>

00005958 <__udivmodsi4_loop>:
    5958:	aa 1f       	adc	r26, r26
    595a:	bb 1f       	adc	r27, r27
    595c:	ee 1f       	adc	r30, r30
    595e:	ff 1f       	adc	r31, r31
    5960:	a2 17       	cp	r26, r18
    5962:	b3 07       	cpc	r27, r19
    5964:	e4 07       	cpc	r30, r20
    5966:	f5 07       	cpc	r31, r21
    5968:	20 f0       	brcs	.+8      	; 0x5972 <__udivmodsi4_ep>
    596a:	a2 1b       	sub	r26, r18
    596c:	b3 0b       	sbc	r27, r19
    596e:	e4 0b       	sbc	r30, r20
    5970:	f5 0b       	sbc	r31, r21

00005972 <__udivmodsi4_ep>:
    5972:	66 1f       	adc	r22, r22
    5974:	77 1f       	adc	r23, r23
    5976:	88 1f       	adc	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	1a 94       	dec	r1
    597c:	69 f7       	brne	.-38     	; 0x5958 <__udivmodsi4_loop>
    597e:	60 95       	com	r22
    5980:	70 95       	com	r23
    5982:	80 95       	com	r24
    5984:	90 95       	com	r25
    5986:	9b 01       	movw	r18, r22
    5988:	ac 01       	movw	r20, r24
    598a:	bd 01       	movw	r22, r26
    598c:	cf 01       	movw	r24, r30
    598e:	08 95       	ret

00005990 <__prologue_saves__>:
    5990:	2f 92       	push	r2
    5992:	3f 92       	push	r3
    5994:	4f 92       	push	r4
    5996:	5f 92       	push	r5
    5998:	6f 92       	push	r6
    599a:	7f 92       	push	r7
    599c:	8f 92       	push	r8
    599e:	9f 92       	push	r9
    59a0:	af 92       	push	r10
    59a2:	bf 92       	push	r11
    59a4:	cf 92       	push	r12
    59a6:	df 92       	push	r13
    59a8:	ef 92       	push	r14
    59aa:	ff 92       	push	r15
    59ac:	0f 93       	push	r16
    59ae:	1f 93       	push	r17
    59b0:	cf 93       	push	r28
    59b2:	df 93       	push	r29
    59b4:	cd b7       	in	r28, 0x3d	; 61
    59b6:	de b7       	in	r29, 0x3e	; 62
    59b8:	ca 1b       	sub	r28, r26
    59ba:	db 0b       	sbc	r29, r27
    59bc:	0f b6       	in	r0, 0x3f	; 63
    59be:	f8 94       	cli
    59c0:	de bf       	out	0x3e, r29	; 62
    59c2:	0f be       	out	0x3f, r0	; 63
    59c4:	cd bf       	out	0x3d, r28	; 61
    59c6:	09 94       	ijmp

000059c8 <__epilogue_restores__>:
    59c8:	2a 88       	ldd	r2, Y+18	; 0x12
    59ca:	39 88       	ldd	r3, Y+17	; 0x11
    59cc:	48 88       	ldd	r4, Y+16	; 0x10
    59ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    59d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    59d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    59d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    59d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    59d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    59da:	b9 84       	ldd	r11, Y+9	; 0x09
    59dc:	c8 84       	ldd	r12, Y+8	; 0x08
    59de:	df 80       	ldd	r13, Y+7	; 0x07
    59e0:	ee 80       	ldd	r14, Y+6	; 0x06
    59e2:	fd 80       	ldd	r15, Y+5	; 0x05
    59e4:	0c 81       	ldd	r16, Y+4	; 0x04
    59e6:	1b 81       	ldd	r17, Y+3	; 0x03
    59e8:	aa 81       	ldd	r26, Y+2	; 0x02
    59ea:	b9 81       	ldd	r27, Y+1	; 0x01
    59ec:	ce 0f       	add	r28, r30
    59ee:	d1 1d       	adc	r29, r1
    59f0:	0f b6       	in	r0, 0x3f	; 63
    59f2:	f8 94       	cli
    59f4:	de bf       	out	0x3e, r29	; 62
    59f6:	0f be       	out	0x3f, r0	; 63
    59f8:	cd bf       	out	0x3d, r28	; 61
    59fa:	ed 01       	movw	r28, r26
    59fc:	08 95       	ret

000059fe <itoa>:
    59fe:	fb 01       	movw	r30, r22
    5a00:	9f 01       	movw	r18, r30
    5a02:	e8 94       	clt
    5a04:	42 30       	cpi	r20, 0x02	; 2
    5a06:	c4 f0       	brlt	.+48     	; 0x5a38 <itoa+0x3a>
    5a08:	45 32       	cpi	r20, 0x25	; 37
    5a0a:	b4 f4       	brge	.+44     	; 0x5a38 <itoa+0x3a>
    5a0c:	4a 30       	cpi	r20, 0x0A	; 10
    5a0e:	29 f4       	brne	.+10     	; 0x5a1a <itoa+0x1c>
    5a10:	97 fb       	bst	r25, 7
    5a12:	1e f4       	brtc	.+6      	; 0x5a1a <itoa+0x1c>
    5a14:	90 95       	com	r25
    5a16:	81 95       	neg	r24
    5a18:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1a:	64 2f       	mov	r22, r20
    5a1c:	77 27       	eor	r23, r23
    5a1e:	0e 94 92 2c 	call	0x5924	; 0x5924 <__udivmodhi4>
    5a22:	80 5d       	subi	r24, 0xD0	; 208
    5a24:	8a 33       	cpi	r24, 0x3A	; 58
    5a26:	0c f0       	brlt	.+2      	; 0x5a2a <itoa+0x2c>
    5a28:	89 5d       	subi	r24, 0xD9	; 217
    5a2a:	81 93       	st	Z+, r24
    5a2c:	cb 01       	movw	r24, r22
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	a1 f7       	brne	.-24     	; 0x5a1a <itoa+0x1c>
    5a32:	16 f4       	brtc	.+4      	; 0x5a38 <itoa+0x3a>
    5a34:	5d e2       	ldi	r21, 0x2D	; 45
    5a36:	51 93       	st	Z+, r21
    5a38:	10 82       	st	Z, r1
    5a3a:	c9 01       	movw	r24, r18
    5a3c:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <strrev>

00005a40 <strrev>:
    5a40:	dc 01       	movw	r26, r24
    5a42:	fc 01       	movw	r30, r24
    5a44:	67 2f       	mov	r22, r23
    5a46:	71 91       	ld	r23, Z+
    5a48:	77 23       	and	r23, r23
    5a4a:	e1 f7       	brne	.-8      	; 0x5a44 <strrev+0x4>
    5a4c:	32 97       	sbiw	r30, 0x02	; 2
    5a4e:	04 c0       	rjmp	.+8      	; 0x5a58 <strrev+0x18>
    5a50:	7c 91       	ld	r23, X
    5a52:	6d 93       	st	X+, r22
    5a54:	70 83       	st	Z, r23
    5a56:	62 91       	ld	r22, -Z
    5a58:	ae 17       	cp	r26, r30
    5a5a:	bf 07       	cpc	r27, r31
    5a5c:	c8 f3       	brcs	.-14     	; 0x5a50 <strrev+0x10>
    5a5e:	08 95       	ret

00005a60 <_exit>:
    5a60:	f8 94       	cli

00005a62 <__stop_program>:
    5a62:	ff cf       	rjmp	.-2      	; 0x5a62 <__stop_program>
